{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#valueflows-vf-is-a-vocabulary-for-the-distributed-economic-networks-of-the-next-economy-to-coordinate-the-creation-distribution-and-exchange-of-economic-resources","title":"Valueflows (VF) is a vocabulary for the distributed economic networks of the next economy, to coordinate the creation, distribution, and exchange of economic resources.","text":"<p>Here are some suggestions to help you find your way into this documentation, depending on your specific interest and level of prior understanding.</p> <ul> <li> <p>For a high level understanding of what Valueflows is and what it is for, please start with this introductory summary.  You could also check into what other groups are doing with Valueflows in the reference implementations, or take a peek at the algorithms overview for more possibilities.</p> </li> <li> <p>To learn about the vocabulary itself, you could start with the high-level description of the core model, and then continue as you like in these directions...</p> <ul> <li> <p>For the more visually oriented or people who like diagrams, head to the UML diagram.</p> </li> <li> <p>Whether or not you look at the diagram, see these class and relationship explanations by subject area, which also point to the related concepts pages.  Or just go straight to the concepts section.</p> </li> <li> <p>For even more gory details, check the rest of the specification pages, and/or examples section.</p> </li> </ul> </li> <li> <p>Or if you want a more fun and friendly way to understand the vocabulary, you can start here with a Valueflows story about apple pie, yum!.</p> </li> <li> <p>To lookup specific details, you can use the Search function above.  Definitions and relationships by data element (class, property, etc.) are linked on the first formatted spec here; and are textually described by subject area here.  The concepts section and examples section also might be helpful to lookup developer level information.</p> </li> </ul> <p>You can find the repository here on codeberg, also mirrored on github.</p> <p>Or come on over and say hello or ask questions in matrix element.</p> <p>This vocabulary and documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</p>"},{"location":"algorithms/cashflows/","title":"Cash Flows","text":"<p>This algorithm is called Cash Flows because that is the most-used small business monitoring tool, but it could also refer to monitoring the inflows and outflows of any critical resource, for example, water.</p> <p>Cash inflows and outflows are plotted on a timeline, sometimes weekly, sometimes quarterly, totalled as a positive or negative number for each period, and then summarized into a running cumulative cash flow.</p> <p>Here's an article about cash flows for farming. And a sample report from that article:</p> <p></p> <p>Cash flows could be budgeted (future estimated cash flows), or actual past cash flows, often compared to the estimates.</p>"},{"location":"algorithms/critical-path/","title":"Critical Path","text":"<p>Excerpted from the Critical Path Method (CPM) Wikipedia page.</p> <p>The essential technique for using CPM is to construct a model of the project that includes the following:</p> <ul> <li>A list of all activities [in Value Flows, those would be Processes] required to complete the project (typically categorized within a work breakdown structure) [this could come from the Dependent Demand explosion],</li> <li>The time (duration) that each activity will take to complete,</li> <li>The dependencies between the activities and,</li> <li>Logical end points such as milestones or deliverable items.</li> </ul> <p>Using these values, CPM calculates the longest path of planned activities to logical end points or to the end of the project, and the earliest and latest that each activity can start and finish without making the project longer. This process determines which activities are \"critical\" (i.e., on the longest path) and which have \"total float\" (i.e., can be delayed without making the project longer). In project management, a critical path is the sequence of project network activities which add up to the longest overall duration, regardless if that longest duration has float or not. This determines the shortest time possible to complete the project. </p> <p>How to use CPM: prioritize all of the processes on the critical path. Delaying any of them will delay the whole project. Delaying some other process beyond its \"float\" might put that process on the critical path. </p>"},{"location":"algorithms/dependent-demand/","title":"Dependent Demand","text":"<p>Dependent demand is one popular planning and scheduling algorithm for economic networks. It is used in Material Requirements Planning (MRP), for example. The algorithm traverses recipes to create schedules for economic processes.</p> <p>Here is a long description of Dependent Demand. Below is a short version.</p> <p>Basically, you traverse a graph of Recipe Processes backwards from the last Recipe Output, connecting Recipe Inputs with Recipe Outputs that have matching Resource Categories, and backscheduling all the processes and resource requirements based on estimated process durations.   See Graph search algorithms.</p> <p>This description refers to this diagram:  Take each request for quantities of Recipe Resource as a demand and start the traversal.</p> <p>Start:</p> <ul> <li>First check for onhand and available Economic Resources, or previously scheduled output Intents, that are not yet allocated to any demand.</li> <li>Allocate any that you find to the highest priority demand (where highest priority usually means earliest delivery date). (Those are soft allocations, known only in the computer system.)</li> <li> <p>For demands that find no or insufficient available inventory or output Intents, look for a Recipe Process that can create some. If you can't find a Recipe Process, suggest a purchase.</p> <ul> <li>(Note: a Recipe is not really a thing, it's just a graph - although in a future release it will be a thing. A requested Recipe Resource may have one or more Recipe Processes that can create some Resources of that specification. Each of those Recipe Processes may have Recipe Flow inputs that specify some other Recipe Resources, and each of those Recipe Resources may have Recipe Processes that can create them, and so on, recursively, until you can't find any more creation Recipe Processes. If you find more than one creation Recipe Processes, you will need some way to select one.)</li> </ul> </li> <li> <p>When you find a Recipe Process,</p> <ul> <li>then schedule a planned Process based on the Recipe Process, with an output Intent of the required quantity of the demanded Recipe Resource. Backschedule so that the end of the process meets the timing requirements of the inputs to the processes that will be waiting for them.</li> <li>Then schedule input Intents for each of the recipe inputs of that Recipe Process, with their quantities scaled to the quantity of the planned output.</li> <li>Then start over from the Start with each of those new input Intents as the demand.</li> </ul> </li> </ul>"},{"location":"algorithms/equations/","title":"Value Equations","text":"<p>As far as we know, the idea and name for value equations was invented by Sensorica, a pioneering Open Value Network.  They are now calling them \"Benefit Redistribution Algorithms\".</p> <p>The idea is to have a published formula for distributing income to contributors to creating some deliverable that brings in some money.</p> <p>This is a (simplified) very specific example taken from Sensorica:</p> <p>Contributing to creating the output:</p> <p></p> <p>Distributing income according to the value equation: </p> <p>Here's a lot more detail about value equations as implemented in Sensorica's NRP software, one of the precursors to Valueflows.</p>"},{"location":"algorithms/netflows/","title":"Network Flows","text":"<p>We've presented a selection of algorithms you could use with value flows networks. Here are some articles describing others:</p> <ul> <li>Stanford Network Flow Problems</li> <li>MIT Network Flow lecture notes</li> <li>Shortest Path Problem, listing several algorithms.</li> <li>A 500+ page book about directed graph algorithms</li> </ul>"},{"location":"algorithms/overview/","title":"Algorithms Overview","text":"<p>This section is about what computer programs (or humans with pencil and paper and a lot of work) can do with Valueflows economic networks once they are constructed on the Web or in a database.</p>"},{"location":"algorithms/overview/#network-based-algorithms","title":"Network-based algorithms","text":"<ul> <li>Dependent Demand constructs schedules for operational economic networks from recipes<ul> <li>Many other scheduling algorithms can be used over the same recipes. </li> <li>Gantt charts are a popular network schedule visualization. </li> <li>Critical Path is another scheduling algorithm that analyzes a network of processes to figure out the bottlenecks, the processes that need special attention.</li> </ul> </li> <li>Value Rollups summarize the total value of all inputs to the resulting output from a recipe.</li> <li>Value Equations determine how income should be distributed according to contributions to a deliverable item.</li> <li>Track and Trace follow the path of a resource forwards (to where it went) and backwards (where it came from, and what other resources went into it).</li> <li>Provenance is like Trace, focusing on the path of a resource and all of the other resources that went into it.</li> <li>Cash Flow is mostly about money, but could also apply to other resources, looking at the inflows and outflows on a timeline, historical in the past, forecasted in the future.</li> <li> <p>Economic and Ecosystem Analysis:</p> <ul> <li>System Dynamics</li> <li>Systems Ecology including Energy Flow Analysis</li> <li>Input-Output Analysis</li> <li>Environmentally Extended IPO Analysis</li> <li>Life Cycle Analysis</li> <li>Material Flow Analysis </li> </ul> </li> <li> <p>Network Flows is a general name for all of those algorithms and many many more. See Flow Networks on Wikipedia and elsewhere.</p> </li> </ul> <p>There are similarities and differences among the algorithms:</p> <ul> <li>Scheduling algorithms and cash flows use time-phasing: placing planned or reported events on a timeline.</li> <li>Dependent Demand schedules backwards from an end date; Critical Path schedules forwards from a start date.</li> <li>Dependent Demand does an explosion: breaking down the end resource of a recipe into a tree of components and processes.</li> <li>Value Rollups do an implosion: summarizing all the inputs of the exploded tree of components and processes into a total value.</li> <li>The Economic and Ecosystem algorithms use Input-Process-Output Models</li> <li>All of those algorithms work on flow networks, otherwise known as directed graphs, composed of nodes and links between them.</li> </ul> <p></p>"},{"location":"algorithms/overview/#agent-based-algorithms","title":"Agent-based algorithms","text":"<ul> <li> <p>Agent-Based Models</p> <ul> <li>In biology</li> <li>In economics</li> <li>In sociology, including Social Network Analysis</li> </ul> </li> <li> <p>Complex adaptive systems</p> </li> </ul>"},{"location":"algorithms/provenance/","title":"Provenance","text":"<p>Provenance is a form of tracing the origins of some end state. The term is often used for scientific papers or for valuable assets like artworks or diamonds.</p> <p>From PROV Overview: \"Provenance is information about entities, activities, and people involved in producing a piece of data or thing, which can be used to form assessments about its quality, reliability or trustworthiness.\" Provenance traces the history of an artifact, its processes and inputs, their processes and inputs, etc.</p> <p> - source</p> <p>Provenance goes backward from the end of a flow, just like value equations.</p> <p>Two businesses based on provenance and blockchains:</p> <ul> <li>https://www.provenance.org/</li> <li>https://www.everledger.io/</li> </ul>"},{"location":"algorithms/rollup/","title":"Value Rollup","text":"<p>Value rollups can be done on recipes as well as on reported events. They summarize the values of all of the inputs to all of the processes that go into the creation of a Resource Category or an Economic Resource.</p> <p>In business, cost rollups on recipes (usually bills of material and routings) calculate the Standard Cost of producing a commercial product model. Then actual cost rollups, summarizing the actual events that went into creating a product instance, can be compared to the standard cost.</p> <p>In value networks, value rollups can be done in both of those same ways (standard value and actual value), but all of the input values need to be converted into the same unit: often, but not necessarily, a unit of money. In a time bank system, the unit would be hours. In a mutual credit system, the unit could be hours, or it could be whatever the credits represent.</p>"},{"location":"algorithms/track/","title":"Track and Trace","text":""},{"location":"algorithms/track/#difference-between-tracking-and-tracing","title":"Difference between tracking and tracing","text":"<p>From StackExchange::</p> <p>The difference is in direction &amp; point in time:</p> <p>To trace: follow the completed path backwards from its current point to where it began... When you \"trace\" a cellphone call, you try to determine its origin... You go backward to the starting point.</p> <p>To track: follow the emerging path forwards from your starting point to wherever the thing currently is... When you \"track\" a cellphone, you monitor [the starting] location ... and follow it wherever it goes...</p> <p>One of the most-often used traces is to find the origins of health problems like mad cow disease and tainted drugs and food. In Valueflows terms, that would start with the product (economic resource) that caused a health problem, and trace back along the chain of resource flows to the source or sources of the product.  Then it might be necessary to also track forwards from the source(s) to find everything else that might include that source(s).</p> <p>It is also used when the provenance is useful for other information, like to determine the sustainability of the creation of a resource (like fossil fuel inputs, potential carbon implications, etc.), how healthy the inputs are, how local is the production and distribution, etc.  Or when an agent is interested in what happens to a resource they created, for example what is the effect of their recycling efforts or material donations to an educational program.</p> <p>Also, this logic is used in other features, like \"contribution economy\" calculations, where all contributions of various kinds over time can be found by tracing backwards from an end resource.</p>"},{"location":"algorithms/track/#valueflows-query-terminology","title":"Valueflows query terminology","text":"<ul> <li><code>previous</code> and <code>next</code> bring back the element one flow step backwards or forwards</li> <li><code>track</code> and <code>trace</code> bring back the whole resource flow tree forwards or backwards, starting with a resource or an output event</li> </ul> <p>Briefly, to gather a whole track or trace, the previous or next methods should be used in recursive logic, traveling down the flow and each branch of the flow, when there are many inputs or many outputs.</p>"},{"location":"algorithms/track/#adding-breadcrumbs-on-initial-save","title":"Adding breadcrumbs on initial save","text":"<p>For the most part, the structure provides the causal order of the flows.  But for some specific situations, such as repeated cycles referencing the same ProcessSpecifications, additional information should be saved on the EconomicEvent and EconomicResource to aid in obtaining consistent causal order. (Timestamps are not reliable in distributed systems.)</p> <ul> <li> <p>Add two new fields called <code>previousEvent</code>, one on EconomicResource and one on EconomicEvent.  The <code>previousEvent</code> fields reference an EconomicEvent.</p> </li> <li> <p>When a new event is created with a <code>resourceInventoriedAs</code>, the new event takes the resource's <code>previousEvent</code> value and puts it into the new event's <code>previousEvent</code> field, and puts the new event into the resource's <code>previousEvent</code> field.</p> </li> <li> <p>Those previousEvent references provide breadcrumbs for tracking and tracing through ambiguous situations, see pseudocode below.</p> </li> </ul>"},{"location":"algorithms/track/#trace-logic","title":"Trace logic","text":""},{"location":"algorithms/track/#where-to-start-a-trace","title":"Where to start a trace","text":"<p>The \"starting item\" can be an EconomicResource or EconomicEvent.  If you want to start at the present time, and trace everything that ever happened to the resource, start with the resource and the value of its <code>previousEvent</code>.  If you just want to know how a resource was made, and what inputs went into it, start with selecting the output event where that resource was initially created, or if it is a stock resource, where it was last incremented. </p>"},{"location":"algorithms/track/#pseudocode","title":"Pseudocode","text":"<p>The following is included to give some idea of the logic required.  It is not meant to reflect code, for example \"null\" could be \"nil\" or \"none\", and \"list\" could be any collection.  It tries to cover all actions and scenarios, and has been tested in one installation, but is still meant as a suggestion.</p> <pre><code>EconomicResource \"previous\":\n    find all events that are process outputs and where the resource is resourceInventoriedAs\n    find all events that have the resource as toResourceInventoriedAs (all transfers and move)\n    find all raise/lower events that reference the resource as resourceInventoriedAs\n    return all of the above events\n\nProcess \"previous\":\n    return all events that are input to the process\n\nEconomicEvent \"previous\":\n    if the event is output of a process\n        return the process\n    else if the event action is raise or lower, and the event's previousEvent is null\n        return empty list\n    else if resourceInventoriedAs of the event exists\n        return the resourceInventoriedAs resource\n    else\n        return empty list\n</code></pre> <pre><code>trace (parameter: starting item)\n    initialize \"flows\", \"visited\", \"contained\", \"modified\", \"delivered\" \n            (list or similar, \"flows\" must be ordered)\n    add the starting item to \"visited\"\n    add the starting item to \"flows\"\n    if the item is an separate event\n        add the resourceInventoriedAs to \"contained\"\n    if the item is a modify event\n        add the resourceInventoriedAs to \"modified\"\n    if the item is a dropoff event\n        add the resourceInventoriedAs to \"delivered\"\n    call trace-depth-first-search (which will go recursively backwards through the tree)\n    return \"flows\"\n\ntrace-depth-first-search (parameters: \"flows\", \"visited\", \"contained\", \"modified\", \"delivered\", \"savedEvent\")\n    for the last item in \"flows\", get \"previous\" (defined above)\n    if that last item in \"flows\" is an event\n        save the previousEvent in \"savedEvent\"\n    order descending the \"previous\" items by id or other unique element (approximate time order is helpful)\n    for each of those items\n        put the last item in \"flows\" in the item's \"parent\" (facilitates showing as a tree)\n    if the \"savedEvent\" is one of those items\n        move it to the position where it will be processed first\n    else if the item that will be processed first is a resource in \"visited\"\n        put the \"savedEvent\" in the position where it will be processed first\n    for each of those items\n        if the item is not in \"visited\"\n            set \"skip\" to false\n            if the item is a pickup event\n                if the event's resourceInventoriedAs is in \"delivered\"\n                    remove it from \"delivered\"\n                else \n                    set \"skip\" to true\n            else if the item is an accept event\n                if the event's resourceInventoriedAs is in \"modified\"\n                    remove it from \"modified\"\n                else \n                    set \"skip\" to true\n            else if the item is a combine event\n                if the event's resourceInventoriedAs is in \"contained\"\n                    remove it from \"contained\"\n                else \n                    set \"skip\" to true\n            else if the item is an separate event\n                add the resourceInventoriedAs to \"contained\"\n            else if the item is a modify event\n                add the resourceInventoriedAs to \"modified\"\n            else if the item is a dropoff event\n                add the resourceInventoriedAs to \"delivered\"\n            if \"skip\" is false\n                add the item to \"visited\"\n                add the item to \"flows\"\n                call trace-depth-first-search\n    return \"flows\"\n</code></pre>"},{"location":"algorithms/track/#track-logic","title":"Track logic","text":""},{"location":"algorithms/track/#pseudocode_1","title":"Pseudocode","text":"<p>Again, the following is included to give some idea of the logic required.  It tries to cover all actions and scenarios, but is meant as a suggested starting point, it has not been tested in code, nor even desk-checked.  Rather it is a starting point that reverses the <code>trace</code> logic.  When it has been tested, we will update here.</p> <pre><code>EconomicResource \"next\":\n    return all events where the resource is resourceInventoriedAs\n\nProcess \"next\":\n    return all events that are output of the process\n\nEconomicEvent \"next\":\n    if the event is input of a process\n        return the process\n    if the event is output of a process\n        return the resourceInventoriedAs\n    if the toResourceInventoriedAs of the event exists\n        return the toResourceInventoriedAs\n    else\n        return an empty list\n</code></pre> <pre><code>track (parameter: starting item)\n    initialize \"flows\", \"visited\", \"contains\", \"modifies\", \"delivers\"\n            (list or similar, \"flows\" must be ordered)\n    add the starting item to \"visited\"\n    add the starting item to \"flows\"\n    if the item is a combine event\n        add the resourceInventoriedAs to \"contains\"\n    if the item is an accept event\n        add the resourceInventoriedAs to \"modifies\"\n    if the item is a pickup event\n        add the resourceInventoriedAs to \"delivers\"\n    call track-depth-first-search (which will go recursively forwards through the tree)\n    return \"flows\"\n\ntrack-depth-first-search (parameters: \"flows\", \"visited\", \"contains\", \"modifies\", \"delivers\", \"savedEvent\")\n    for the last item in \"flows\", get \"next\" (defined above)\n    if that last item is an event\n        find the next event by looking for the last item event in any event's previousEvent field\n        if it exists (would you ever get multiples???)\n            save it in \"savedEvent\"\n        else\n            remove the old \"savedEvent\" (???)\n    order the \"next\" items by id or other unique element (approximate time order is helpful)\n    for each of those \"next\" items\n        put the last item in \"flows\" in the item's \"parent\" (facilitates showing as a tree)\n    if the savedEvent is one of those items\n        move it to the position where it will be processed first\n    else if the item that will be processed first is a resource in \"visited\"\n        put the savedEvent in the position where it will be processed first\n    for each of those items\n        if the item is not in \"visited\"\n            set \"skip\" to false\n            if the item is a dropoff event\n                if the event's resourceInventoriedAs is in \"delivers\"\n                    remove it from \"delivers\"\n                else\n                    set \"skip\" to true\n            else if the item is an modify event\n                if the event's resourceInventoriedAs is in \"modifies\"\n                    remove it from \"modifies\"\n                else\n                    set \"skip\" to true\n            else if the item is a separate event\n                if the event's resourceInventoriedAs is in \"contains\"\n                    remove it from \"contains\"\n                else\n                    set \"skip\" to true\n            else if the item is an combine event\n                add the resourceInventoriedAs to \"contains\"\n            else if the item is a accept event\n                add the resourceInventoriedAs to \"modifies\"\n            else if the item is a pickup event\n                add the resourceInventoriedAs to \"delivers\"\n            if \"skip\" is false\n                add the item to \"visited\"\n                add the item to \"flows\"\n                call track-depth-first-search\n    return \"flows\"\n</code></pre>"},{"location":"algorithms/track/#tracking-identifier","title":"Tracking identifier","text":"<p>Currently, often companies' internal flow information is not public, although in many countries they are required to be able to provide input and output information when needed in a medical emergency, without connecting all the dots internally.  Also any organization can be missing resource flow data so that there are gaps in the flows, no matter the level of transparency.</p> <p>For these reasons, tracking identifier (such as a serial number or a lot identifier) is currently used when food or medical tracing and tracking is required.  And in VF, they can be used whenever there is missing resource flow information for any reason; or when many resources go in and out of one process, such as might happen in transportation.</p> <p>Also note that lots get \"spread out\" into splits of a resource or different types of resources.  For example, one recent product recall was of fungus medicine ingredient that was tainted with benzene. The producer needed to identify all of the products that the tainted ingredient went into, and then all of the many packages of the same medicine that have the same lot identifier, which stays attached to the individual packages wherever they go. All of those packages will need to be found and destroyed and the recipients can be reimbursed by the producer.</p>"},{"location":"appendix/presentations/","title":"Other Available Documentation","text":"<p>We are occasionally asked for other documentation and visuals for Valueflows.  We'll keep adding below as new things become available.  We also appreciate projects contributing graphics and other useful presentations back to the Valueflows community, and we will add them here. </p>"},{"location":"appendix/presentations/#graphics-in-this-documentation","title":"Graphics in this documentation","text":"<p>Most of the graphics on these VF website pages are available in xml (for drawing tools) and as images here:</p> <ul> <li>images in the main documentation</li> <li>images on the example pages</li> </ul>"},{"location":"appendix/presentations/#presentations","title":"Presentations","text":"<p>All of the following presentations can also be found in this directory, with editable versions where we have them.</p> <p>A basic VF presentation, 2021</p> <p>A short presentation to the Climate Collabathon, 2020, which includes some duplicates of the previous deck, but also some additional slides.</p> <p>Everything in Valueflows is connected, a high level trip through the model.</p> <p>An early presentation by Connor Turland, intended for people involved in the distributed web (DWeb), talking about \"why Valueflows\", and core challenges and opportunities.</p> <p>A presentation to a Bill McCarthy accounting class in 2017, including some history of Valueflows in relation to REA, comparisons, and example projects.</p> <p>A presentation to a Bill McCarthy accounting class in 2020, including \"what can an economic network do that an enterprise can't?\", and example projects.</p> <p>Intro to REA, selected slides from Bill McCarthy, and a few others.</p> <p>Accounting for Good by pospi, lead developer of hREA, the VF backend framework for Holochain.</p> <p>Citizen involvement in Amsterdam textiles circular economy</p>"},{"location":"appendix/presentations/#videos","title":"Videos","text":"<p>A short summary for the Yale Climate Collabathon, 2020 (14 minutes, slides above)</p> <p>Holochain Ecosystem Session with New York Textile Lab, 2021 (52 minutes, very interesting supply chain coordination use case)</p> <p>Tom Miller walks through the VF story about pie, 2020 (45 minutes, slides available here)</p> <p>Deep dive into VF for devs, 2019 (2 hours, model slightly out of date)</p> <p>Dave Darby interviews Lynn about VF, 2019, part 1 amd part 2</p>"},{"location":"appendix/rea/","title":"REA & Other References","text":""},{"location":"appendix/rea/#rea-resources-events-agents","title":"REA (Resources, Events, Agents)","text":"<p>The REA ontology is the main basis for the Valueflows model.  Here is some background.</p> <p>Bill McCarthy's list of REA papers</p> <p>McCarthy's original 1982 REA paper</p> <p>REA ontology paper</p> <p>Singapore REA Learning Tool</p> <p>Extending REA from internal business systems into larger economic networks:</p> <p>Radically Distributed Supply Chain Systems</p> <p>A semantic model for Internet supply chain collaboration a little dated and most of the internal links are broken, but still useful</p> <p>ISO Accounting and Economic Ontology based on REA. </p> <p>International Standards Organization, \u201cISO 15944-4: Information Technology \u2013 Business Operational View \u2013 Part 4: Business Transaction Scenarios \u2013 Accounting and Economic Ontology,\u201d Second Version of International Standard, The International Organization for Standards (ISO), Geneva, Switzerland, April 2015.  (Link connects reader to request for free copy of certain ISO standards; reader then chooses to ask for 15944-4-2015.)</p> <p>McCarthy ISO slide deck</p> <p>REA Beyond the Enterprise</p> <p>From private ownership to commons accounting</p>"},{"location":"appendix/rea/#ipo-input-process-output","title":"IPO (Input-Process-Output)","text":"<p>Merged into the REA pattern, is the IPO pattern, which is used in many fields of study and analysis. IPO use for Material Flow Analysis is almost the same as we use it in Valueflows.</p>"},{"location":"appendix/rea/#dependent-demand","title":"Dependent Demand","text":"<p>We do event-driven Resource Requirements Planning based on that pattern.  Dependent Demand - a Business Pattern</p>"},{"location":"appendix/rea/#rea-and-climate","title":"REA and Climate","text":"<p>REA (and Valueflows) works very well for climate analysis and accounting, see Accounting for Planetary Survival, especially Resources - Events - Agents (REA): An accounting system for networked cooperation and shared supply chains starting on pg. 85; and Appendix I: From private ownership accounting to commons accounting.</p>"},{"location":"appendix/usedfor/","title":"Who Is Developing Software Using Valueflows","text":""},{"location":"appendix/usedfor/#reference-applications","title":"Reference applications","text":"<p>Listed here are some of the developer teams and user groups who have implemented or are implementing Valueflows in open source projects.  Please let us know if we have missed you and you would like to be listed. </p>"},{"location":"appendix/usedfor/#holochain-ecosystem","title":"Holochain ecosystem","text":"<p>A generic Valueflows backend is being developed in Holochain, called hREA.  Information can be found on the hREA website, on hREA github, chat in discord. hREA exposes the Valueflows graphql api for UI/UX apps to build on.  Blog entry here. (The core is stable for beta use, but it is missing a few features.)</p> <p>Some of the UI/UX apps being built on hREA are </p> <ul> <li> <p>Code A, an international group of university professors working on climate change issues, wants to create an application for classes to use as they do practical work to learn about methods for micro to macro climate accounting, and how to coordinate among themselves and with their communities.  Code is on REA-Playspace github.  This is the first real visualization based core UI for Valueflows, and we think will be useful for other apps. (In process.)</p> </li> <li> <p>Carbon Farm Network, organized by New York Textile Lab is a supply chain network that connects designers to fiber producers and mills to help grow an economically diverse textile supply ecosystem. They are featured on this Holochain Ecosystem video. (In process.)</p> </li> <li> <p>Sensorica, an open value network in Montreal, is just starting design on a new version of their NRP software, which was used as one input for Valueflows. (In process.)</p> </li> </ul> <p>A post called Economy as Ecosystem highlights these user groups.</p>"},{"location":"appendix/usedfor/#fediverse-ecosystem","title":"Fediverse ecosystem","text":"<p>The Fediverse is a collection of networking applications that federate with each other using the ActivityPub (AP) social networking protocol as the core.</p> <ul> <li> <p>Bonfire kicked the federation direction off by supporting Valueflows as an extension of ActivityPub, and including the same Valueflows graphql api as hREA. This supports a user-friendly integration of social and economic networking, which we think is an important direction. Information is at the Bonfire website, the Valueflows extension is on gitlab. (In process.)</p> </li> <li> <p>Reflow was an EU funded project that seeks to understand and transform urban material flows, co-create and test regenerative solutions at business, governance, and citizen levels to create a resilient circular economy.  The ReflowOS backend was developed by Dyne (see below), built on the Bonfire application. (Complete.)</p> </li> <li> <p>Interfacer, a collaboration between FabCity Hamburg and Dyne (see below), built on Reflow to support a global network of Fab Cities that proposes a new urban, economic, social and industrial model that relocalises production to the city and its bioregional context, while building a digital infrastructure enabling ecological, economic and social sustainability.  Here is a list of git repositories. You can try it here, webinar here, demo here. (Complete for single installations, federation not complete.)</p> </li> <li> <p>Dyne has done the Valueflows related development on Reflow and Interfacer, including developing the EU  \"Digital Product Passport\", webinar here, based on Valueflows resource tracing. (Complete.)</p> </li> <li> <p>LearnDeep, initially created by students at MSOE, supports a network of high school fablabs in Milwaukee that receive contributions of materials from the community and share these with each other. Their code has been merged upstream and is being completed as a Bonfire flavour by the Bonfire team on gitlab. (In process.)</p> </li> <li> <p>We are in process of proposing VF extensions for AP using their Fediverse Enhancement Proposal (FEP) process.  Proposals thus far are Federated Marketplace, Federated Work Coordination, To-do's.</p> </li> </ul>"},{"location":"appendix/usedfor/#other-applications","title":"Other applications","text":"<ul> <li> <p>Web of Needs. The goal is to do automated matching of intents with attached actors/resources on the one side and interaction patterns on the other, such that meaningful interactions can be automatically suggested to users. The code is on github. (In process.)</p> </li> <li> <p>Basis Project is a protocol for scalable, ecological production.  It's using an auto-generated (from the owl file) Valueflows class structure in Rust to drive a reference implementation.  The code lives on github. (Complete.)</p> </li> <li> <p>The Weather Makers are using Valueflows to model their ecosystem planning, engineering and management strategy for restoring water cycles as the key to achieving overall biosphere restoration. Green the Sinai is one ambitious potential project. (In process.)</p> </li> </ul>"},{"location":"appendix/usedfor/#whither-from-here","title":"Whither from here?","text":"<p>Valueflows philosophically seeks to develop in collaboration with user groups on the ground. This round of projects is providing valuable input to the Valueflows vocabulary. We can expect some additions and extensions.</p> <p>However, Valueflows is working towards a stable version 1.0 of the core model that people will be able to count on for a reasonable time period.  We are close.</p>"},{"location":"concepts/accounting/","title":"Accounting","text":""},{"location":"concepts/accounting/#recording-basic-economic-activity","title":"Recording Basic Economic Activity","text":"<p>The Valueflows vocabulary is based on the REA ontology (Resources, Events and Agents) the ISO Accounting and Economic Ontology, which was evolved for that purpose. (See Appendix for links.)</p> <p>Since all the data is recorded as the economic activity happens and is represented in its most basic form, you can get separate accounting views for: a network, each group in the network, each project, each individual. In other words, people in the network log events as they occur and the accounting Just Happens.</p> <p>All of the views can emerge from subsets of the same data.  Any standard (or non-standard) accounting report can be created.</p> <p>Or potentially, views for a global value system economy (really).</p> <p>See also Ecological Accounting.</p>"},{"location":"concepts/accounting/#accounting-views-independent-vs-dependent","title":"Accounting views: independent vs dependent","text":"<p>Conventional accounting always takes the view of an individual agent: often a company. REA, and Valueflows, take an independent view, sometimes called a \u201ccollaboration space\u201d or economic network or supply chain view.  At the same time, derived from the independent view, REA and Valueflows support each agent's own accounting view.</p> <p>For example, from one agent's viewpoint, the exchange may be a \"purchase\", from the other agent's viewpoint, it might be a \"sale\". From the neutral viewpoint, it is an exchange of resources, with usually at least two flows of resources, from different directions.</p> <p>For the individual agent\u2019s accounting systems, assuming an Exchange of goods for money, when the goods are transferred from the seller to the purchaser, the purchaser\u2019s Accounts Payable are increased (credited) and the seller\u2019s Accounts Receivable are increased (debited). The independent view sees a transfer of goods from one agent to another.</p> <p>While conventional accounting uses the individual agent view, larger-scale economic analyses and planning, like for networks, communities, and bioregions, use the independent view. See Value Flow Algorithms.</p>"},{"location":"concepts/accounting/#accounting-as-in-accountability","title":"Accounting as in Accountability...","text":"<ul> <li>from peers to each other</li> <li>from members to a network</li> <li>from a network to the members</li> <li>from one network to another</li> <li>from a network to the community</li> <li>from a network to the ecosystem</li> </ul> <p>Accounting isn't always just counting beans.  It will be important for community economies: what resources do we have, what happened with them, how are they doing? What resources do we need? Who needs what? Who can provide what?  What waste have we generated and how can we improve?</p>"},{"location":"concepts/accounting/#but-if-you-want-to-count-beans","title":"But if you want to count beans...","text":"<p>The standard set of accounting reports are needed by many organizations. A standard General Ledger, Balance Sheet, and Income Statement can be generated automatically from Valueflows data. No need to create a Chart of Accounts or post double-entries, those can all be created by a computer program on request.</p> <p></p> <p>Moreover, General Ledgers and accounting reports can be created automatically for each agent in an economic network using the VF vocabulary.  The accounting views use the Dependent or Individual Agent view of ValueFlows.</p> <p>Accounting statements can also be updated instantly for each participant in any economic event as soon as the event is recorded. For example, consider an economic exchange, where one agent transfers some goods to another, and the other agent transfers some money in return. The inventory of the goods-providing agent will be instantly decremented, and the receiving agent's incremented. Likewise the money accounts of the money-providing and receiving agents will immediately change. Income statements, balance sheets, and cash flow reports can reflect the new changes immediately. The financial positions of each agent can always be up-to-date as of the last recorded event.</p> <p>This article describes how to generate General Ledgers etc. from REA data using procedural code: Operation of a Relational Accounting System, Graham Gal and Bill McCarthy</p> <p>Wim Laurier is working on how to do it declaratively. This paper gives an early view of how Wim and Satoshi Horiuchi intend to do it.</p> <p>The difference between doing it procedurally and doing it declaratively:</p> <ul> <li>A procedural program defines a step-by-step method of getting the desired results.</li> <li>A declarative program describes the desired results and hands it to another program that can generate the desired results from your description. The person who desires the results writes much less code.</li> </ul>"},{"location":"concepts/accounting/#making-corrections","title":"Making Corrections","text":"<p>It is standard accounting practice that recorded activity that affect financial and other accounting reports cannot be changed directly in case of error.  That is because one cannot tell when reports could have been published containing that data, and many financial reports cannot be amended.</p> <p>Valueflows allows for correction of an economic event with another economic event, which should be recorded with a <code>corrects</code> link to the original event.  This gives flexibility to display the event as corrected, or as separate events, depending on the need.  The quantity should be the amount to be added or subtracted from the original event quantity.  So this works differently than the increment/decrement rules, and will be the only time negative quantities can be used.  It is not required, but is often customary to completely \"back out\" or \"reverse\" the original record (i.e. if the quantity was 10, then the quantity of the correction record is -10, as of the date corrected); then the original event can be re-entered correctly with the earlier correct date and no need for the <code>corrects</code> link. Alternatively, the correction event could just record the difference, as of the date of correction, with the <code>corrects</code> link to the original.</p> <p>If the original event was input to or output of a process, or was part of an agreement, then the correction event should contain those same relationships so it will appear embedded into the flow(s) where it belongs without worrying about the <code>corrects</code> link.  The correction event should be recorded as of the date of the correction, though.</p> <p>All events should record the computer-generated <code>created</code> date/time also, as this may be used in periodic reports to keep the events filtered properly without missing or double counting anything; or where it is important to be able to compare traces (for example) to verify representation of the same resource based on history. (This is also needed when events are allowed to be recorded after the fact, irrespective of corrections, which is true for many situations.  That is, often the event date will be earlier than the created date.)</p>"},{"location":"concepts/actions/","title":"Actions","text":"<p>All flows (Economic Event, Commitment, Intent, Claim, Recipe Flow) use an action property to designate what the flow is doing and how it will affect or has affected an economic resource (or not).</p> <p>See also Flows and Economic Resources.</p> <p>The actions contain data that defines how they will behave relative to a user interface, and relative to the effects on economic resources.  This enables the behavior to be data-driven if desired.</p>"},{"location":"concepts/actions/#action-definitions","title":"Action Definitions","text":"<p>We have defined a core set of actions, but expect that this will be extended with some others. If extended, we recommend that they be defined as part of this or another formal vocabulary so that all can use them and assume the same meaning.</p> <p>produce - A new resource is created in the process, or an addition to an existing stock resource of the same type is incremented.  <code>produce</code> is used in manufacturing of goods, but also in any kind of creation of a material or digital or energy resource.</p> <p>consume - Most often, an ingredient or component is transformed  into the output(s) of the process. Or the input resource can be just used up during the process, like energy. After the process the specified quantity of the consumed input is gone.</p> <p>use - Most often <code>use</code> is employed for equipment or tools that are used in a process, but not consumed.  After the process, the piece of equipment of tool still exists, but during the process, it is unavailable. The unavailability can be useful to know if the resource must be scheduled, or if one needs to know how much the resource is used.</p> <p>cite - <code>cite</code> is used when a resource is input to a process, but is neither used nor consumed, and remains available during the process.  Examples are a design file or a scientific paper, any digital knowledge, which is cited so that the agent(s) responsible for the resource receive credit.</p> <p>work - <code>work</code> refers to labor applied to a process.  There is generally no identifiable resource involved, only the provider agent. In this case, the type of work or skill involved can be identified by a resource specification. A possible exception would be if the agent's work schedule is kept on a calendar, representing when the specific agent is available to work.</p> <p>pickup -  The transported resource or person enters the process; the same resource will appear later in an output of the process.</p> <p>dropoff -  The transported resource or person leaves the process; the same resource or person appeared in an input of this process.</p> <p>accept - This is used as input to a process involving repair, modification, testing, or similar of a resource.  The same resource will appear in the output of the process.  It is sometimes a bit of a gray area when to use <code>accept</code>/<code>modify</code> vs. <code>consume</code>/<code>produce</code>.  The choice is based on the need to have the same identified resource before and after the process. Generally if the resource is involved in a series of processes to create it before anything else happens to it, <code>accept</code>/<code>modify</code> is appropriate.  If the input resource and the output resource need to be identified as different resource specifications for any reason, then <code>accept</code>/<code>modify</code> is not appropriate.</p> <p>modify - The identified resource that was accepted into a process appears in the output of that process, with modifications made.  Note not all modifications require a physical change, for example quality testing.  In all cases though, it matters that the resource has gone through that process, and the <code>stage</code> of the resource (the process specification of the process) is then used as part of the logical identification of the resource when the resource is requested as a process input or for a transfer.</p> <p>combine - A resource is put in a package or a combination resource; the same resource might appear later when it is separated.  Examples are packing one or more resources for transportation or storage, or creation of a kit resource.  The combined resource is still identified in the system, but is <code>containedIn</code> the package or combination resource, which would be usually produced in the process.  When a resource is <code>containedIn</code> another resource, it is not available on its own.  Note that packing materials or containers which will continue to have their own identity later are also combined in the process; if not, they can be consumed. Note also that it doesn't make sense to combine a resource, for example a digital resource, if that resource can in fact be acted upon while combined.</p> <p>separate - A resource is removed from a package or a combination resource; the same resource appeared as input earlier in this or another process when it was combined.  When the resource is separated, it loses its <code>containedIn</code> reference, and becomes available on its own.</p> <p>deliverService - A new service is produced and delivered as output of a process. A service implies that an agent actively receives the service at the same time as it is delivered.  Services are not tangible, so would not create or increment an inventoried resource. Services are perhaps most often delivered directly to an agent. But unlike other actions, sometimes the service is at the same time being delivered into another documented process, in which case it can be output from a process and input to another, at the same time.</p> <p>transferAllRights - This action gives full (in the human realm) rights and responsibilities to another agent, without transferring physical custody.  People might call this \"ownership\"; or it might be considered \"stewardship\" or similar.  This occurs instantaneously, and does not involve documented physical transfer.</p> <p>transferCustody - This action gives physical custody and control of a resource to another agent, without full rights. The physical custodian often has responsibilities associated with custody, however.  Examples where transfer of custody is useful are loaning a resource to another agent, or when a resource is transferred to have a service performed by another agent, like transportation or repair.</p> <p>transfer - This action gives full (human) rights and responsibilities plus physical custody, combining the last two actions for simplicity.</p> <p>move - <code>move</code> changes the location (and possibly the identifier, if location is part of the logical identifier) of a resource, but does not transfer agent rights or custodianship.</p> <p>copy - A new resource is created for the receiver, an exact copy of the original provider resource, used for digital resources.</p> <p>raise - This action adjusts a quantity up, used either when a computer system is brought up and existing resources must be entered with a beginning balance, or when an inventory count in the real world shows that the quantity in the computer system is too low.  When it is known how a resource was obtained, it is preferable to use the real action.</p> <p>lower - This action adjusts a quantity down, used either when a computer system is brought up and existing resources must be entered with a negative beginning balance (very rare!), or when an inventory count in the real world showing that the quantity in the computer system is too high.  When it is known how a resource was lowered, it is preferable to use the real action.</p>"},{"location":"concepts/actions/#action-behaviors","title":"Action Behaviors","text":"<p>The behaviors that are included on the tables below are also defined as Action properties so that computer systems can be \"data driven\" in this respect if desired.</p>"},{"location":"concepts/actions/#event-effects","title":"Event Effects","text":"<p>eventQuantity - Either only <code>resourceQuantity</code> or only <code>effortQuantity</code> or both make sense on an economic event with this action.  The action <code>use</code> provides for both because there can be a requirement for use of some number of a resource (or resource specification) for some time or other effort unit.</p> <p>inputOutput - An event with this action can be <code>input</code> of a process, or <code>output</code> of a process, or should not be related to a process.  The event with the special case <code>outputInput</code> is basically an output of a process, but can sometimes also be an input to another recorded process, at the same time as it is an output.  This is because services imply delivery as they are created.</p> <p>pairsWith - These pairings indicate that events with these actions will be input and output of the same process, and imply reference to the same economic resource.</p> <p>createResource - An event with this action generally should support the options to create a new resource or to increment an existing \"stock\" resource. This will be a choice the user (or possibly specific application rules) must make, there are no rules defined in the vocabulary or data, and it depends on what actually is done operationally, and how agents choose to identify and manage their resources. It is also possible that neither will occur, if the agent does not inventory this particular resource for whatever reason.  If a resource is created by the actions with <code>optional</code>, it is the <code>resourceInventoriedAs</code>; if with <code>optionalTo</code>, it is the <code>toResourceInventoriedAs</code>.  </p> <p>Note: Any action that can create a new resource can alternatively affect (almost always increment) an existing \"stock\" resource. </p>"},{"location":"concepts/actions/#resource-effects","title":"Resource Effects","text":"<p>accountingEffect - If there is an inventoried resource, this defines how the economic resource's <code>accountingQuantity</code> is affected by the event's <code>resourceQuantity</code>.</p> <p>onhandEffect - If there is an inventoried resource, this defines how the economic resource's <code>onhandQuantity</code> is affected by the event's <code>resourceQuantity</code>.</p> <p>For both AccountingEffect and OnhandEffect, the main options are <code>decrement</code> (subtract from), <code>increment</code> (add to), or no effect. For actions with the option <code>decrementIncrement</code>, the <code>resourceInventoriedAs</code> should be decremented (if there is one);and the <code>toResourceInventoriedAs</code> should be incremented (if there is one).  For actions with the option <code>incrementTo</code>, the <code>toResourceInventoriedAs</code> should be created/incremented, and the <code>resourceInventoriedAs</code> should be left as-is.</p> <p>Note: The event's <code>effortQuantity</code> does not affect economic resources.</p> <p>Note: The actions <code>use</code> and <code>work</code> are time-based actions, either with or without an explicit schedule. Although not defined in VF, if a calendar schedule is documented as connected to the economic resource, then those economic events could possibly \"decrement\" that calendar schedule in some way.</p> <p>locationEffect - For this action, if the economic event's <code>toLocation</code> exists, then the affected economic resource's <code>currentLocation</code> should be set to the same location.  For <code>new</code>, the resource's location should be set only if it is a new resource.  For <code>updateTo</code>, the resource is the one in <code>toResourceInventoriedAs</code>.  For <code>update</code>, the resource is the one in <code>resourceInventoriedAs</code>.</p> <p>containedEffect - This applies to the actions that deal with resources contained in other resources, and applies to the <code>resourceInventoriedAs</code>.  The <code>update</code> option sets the resource's <code>containedIn</code> resource, which can be referenced in the event's <code>toResourceInventoriedAs</code>; the <code>remove</code> option nulls the resource's <code>containedIn</code> resource.</p> <p>accountableEffect - If there is an inventoried resource, these actions should set the resource's <code>primaryAccountable</code> agent using the event's <code>receiver</code> agent.  For <code>new</code>, this applies to new resources created by the event (otherwise the <code>receiver</code> and the <code>primaryAccountable</code> should already match).  For <code>updateTo</code>, the resource updated is the <code>toResourceInventoriedAs</code>.</p> <p>stageEffect - For actions with <code>stage</code>, if the process which the event is output of is based on a process specification, set the <code>stage</code> of the <code>resourceInventoriedAs</code>, or of the new resource if one is created, to the process specification.</p> <p>stateEffect - If a resource is created or updated by the economic event, if the <code>state</code> is included in the event, set the <code>state</code> of the resource to the event <code>state</code>.  If <code>update</code> the resource is the <code>resourceInventoriedAs</code>; if <code>updateTo</code> the resource is the <code>toResourceInventoriedAs</code>.</p>"},{"location":"concepts/actions/#behaviors-by-action","title":"Behaviors by Action","text":"<p>To make the diagram bigger, you can right click and select 'View Image' or 'Open Image in New Tab' or a similar command in your browser.</p> <p></p> <p>*In the above chart, the <code>notApplicable</code> values are not included, for easier overall viewing.  For the complete list of behavior values by action as defined in the rdf vocabulary, see the turtle file starting at the Actions section.</p>"},{"location":"concepts/actions/#implied-transfers","title":"Implied Transfers","text":"<p>Implied transfers can happen when the provider and receiver agent are different.  The transfer (or transferCustody or transferAllRights) behaviors and implications should be applied in addition to the behaviors and implications documented for the non-transfer action. See Implied Transfers in Concepts for details.</p>"},{"location":"concepts/actions/#saving-breadcrumbs-for-track-and-trace","title":"Saving Breadcrumbs for Track and Trace","text":"<p>If you will be using the track or trace algorithms to find the connected value flows forwards or backwards when there might be repeated processes, an additional field is needed when saving an event.  See Breadcrumbs in the Track and Trace algorithm for the procedure.</p>"},{"location":"concepts/agents/","title":"Agents","text":"<p>The agent vocabulary describes networks of people, organizations, and ecological agents, constructed using a simple but powerful model of agents and their relationships.</p> <p>See also Agents in the Diagram Explanations and Agent examples.</p>"},{"location":"concepts/agents/#types-of-agents","title":"Types of Agents","text":"<p>Types of agents:</p> <ul> <li>Persons are human beings.</li> <li>Organizations include formal or informal organizations of all kinds. This also includes groups, as long as they consider themselves to have some agency as a group.</li> <li>The ecological agent concept is added to expand the scope of REA to do ecological and climate accounting, including impact of various resources on agents in the environment.</li> </ul> <p>(The concept of \"Agent\" could also in the future include software/AI-based agents(bots, self-driving vehicles, etc.), but this is controversial and somewhat complex.)</p> <p>In Valueflows, we are talking about economic agents, agents who can create or modify or exchange value, and make agreements with each other - who have economic agency.  Adding the Ecological Agent also expands the concept of \"economic\", bringing that kind of activity and impact, and even agency, out to the whole ecosystem, not just the human one.</p> <p>If people want to define types of organizations (like cooperative, corporation, network, community, etc.) we provide a classification property which people can define as they wish.  We do the same for the ecological agent (like ecosystem, forest, etc.).</p> <p>We have defined the properties of Agents very minimally. There are a number of useful properties in existing vocabularies, such as foaf, vcard, schema.org, and others that can be used. Or people can create their own as needed.</p>"},{"location":"concepts/agents/#agent-relationships","title":"Agent Relationships","text":"<p>Agent relationships have many nuances, thus VF provides the ability to define one's own kinds of relationships.  For example people might \"participate\" with an organization by means of agreeing to terms and conditions.  Or people might have more active \"membership\" in a group or organization.  Or people might consider themselves members but want a more independently flavored term such as \"affiliates\".</p> <p>A relationship can be more like a role, for example \"grower\" or \"harvester\" for a food network.</p> <p>Relationships have direction: For example, in \"Michael is a member of Enspiral\", Michael is the subject and Enspiral is the object.  In this case the inverse is also valid, \"Enspiral has member Michael\". In VF, we consider this to be one relationship.  One directional relationships like \"follows\" are also supported.</p> <p>Relationships can be in a scope (or not): For example, \"Kathy is mentor of Sam, in the scope of Enspiral.\"</p> <p>EcologicalAgents and Organizations both need human Agents to act on their behalf and represent their agency in the world of people. This can be defined as various roles.</p>"},{"location":"concepts/agents/#network-shapes","title":"Network Shapes","text":"<p>Different kinds of relationships can be thought of as creating the \"shapes\" of a network. Something like this:</p> <p></p> <p>The following shows some agents that are \"inside\" a network, also some agents that are \"outside\" a network, but have relationships with the network agent or with agents within the network.</p> <p></p>"},{"location":"concepts/agents/#agent-philosophies","title":"Agent Philosophies","text":"<p>We also want to acknowledge that some people prefer to think of themselves as independent and decentralized agents who interact in different places in the economy as individuals, and some people think of themselves more as members of different groups and networks and communities and interact more in the context of those groups and networks and communities.  Many experiments are going on as people strive towards another economy.  We want to support all these experiments, so want to support both of these ways of thinking and organizing ourselves.  The agent vocabulary is very flexible, and will support these as well as current conventional structures.</p> <p>So, if people want to form a group that has agency as a group, fine.  If people want to consider that their group does not have agency as a group, also fine.  Not all groups, and especially not all networks, will be economic Agents in Valueflows. That depends on the agreement of the people in the group, and what the group needs to do as-a-group. For example, does the group need to make agreements as-a-group with other groups? Or exchange resources with other agents as-a-group?  Note that within the vocabulary, network formations will emerge, as agents have economic interactions with each other in the world.  This does not mean that the network is necessarily a Valueflows Agent, but it could be, if the participants want.</p>"},{"location":"concepts/classification/","title":"Classification","text":""},{"location":"concepts/classification/#kinds-of-classification","title":"Kinds of classification","text":"<p>Classification creates references to categories and other classifications of the economic resources and processes, and exchanges.  The classifications can be a part of a taxonomy, flat list, tag set, faceted classification scheme, and any other structure desired.  This is left loose for now, and can be tightened up between groups, or as part of the vocabulary as we get more experience.</p> <p>Valueflows will not include the structures that the classifications are part of, and assume that is handled outside the VF scope.</p> <p>Classifications can be created by user groups for themselves, or can be existing semantic structures, such as wikidata.</p>"},{"location":"concepts/classification/#examples","title":"Examples","text":"<p>Resource Classification</p> <pre><code>Haralson apple - https://www.wikidata.org/wiki/Q3127261\nHonda Fit - https://www.wikidata.org/wiki/Q1135125\nTransistor - https://www.wikidata.org/wiki/Q5339\n</code></pre> <p>Process Classification</p> <pre><code>Transport - https://www.wikidata.org/wiki/Q7590\nPackaging - https://www.wikidata.org/wiki/Q29585952\n</code></pre> <p>Exchange Classification</p> <pre><code>Trade - https://www.wikidata.org/wiki/Q601401\nBarter - https://www.wikidata.org/wiki/Q484830\nGift - https://www.wikidata.org/wiki/Q184303\n</code></pre>"},{"location":"concepts/concepts-overview/","title":"Concepts Overview","text":"<p>These concept pages are organized by topic within Valueflows.</p> <p>We recommend you read the introductory core concepts first, before digging into these more detailed concept documents.</p> <p>Another path to these concepts is from the diagram explanations, where many of them are referenced within their subject area.</p>"},{"location":"concepts/ecology/","title":"Ecological Accounting","text":""},{"location":"concepts/ecology/#why-ecological-accounting","title":"Why ecological accounting","text":"<p>There is increasing desire to account for \"externalities\" from human production and transportation processes, and certainly the need has always been there. Related, there are also more efforts to do \"climate accounting\" on a global level, to provide knowledge in the efforts to improve the situation, which is spiraling out of control on many levels - climate chaos, soil and biodiversity loss, uncontrolled emission of substances on the land and in the water toxic to life, etc.</p> <p>There are many reasons this has not been part of the accounting paradigm, including interests of corporate players and tendencies of industrial era humans to think about \"the environment\" as something separate from us, from which we can extract resources without regard to the many interconnections.  Although there are some efforts to give ecosystems rights relative to human impact, and helpful ways to think about the issues from indigenous sources and people working on the \"commons\", a large \"paradigm shift\" will be needed and there is much inertia and resistance.</p> <p>As always, our goal is to give Valueflows the latitude to support both conventional and next economy accounting.  The latter will more and more involve ecological accounting.</p> <p>So, understanding there will be much more learned going forward in practice, we want to make Valueflows broadly supportive of these efforts.  In general, this can be a step forward in being able to broaden our ability to do the accounting we need to do to confront the current climate and biodiversity challenges.</p> <p>See also Accounting.</p>"},{"location":"concepts/ecology/#rea-i-p-o-resource-flows","title":"REA I-P-O resource flows","text":"<p>The Valueflows input-process-output resource flow model works very well for ecological accounting, with some broadening of our thinking about agents and resources, and what \"economic\" entails.  If we think of \"economic\" as broader than human activity, which has tentacles into most if not all of the other ecosystems on earth, it becomes easier to consider \"accounting\" in light of flows to and from those ecosystems, all of which eventually affect human economies.</p> <p>This diagram shows some of the flows for solar panel production.  Silica dust is an output of the mining process, which gives mine workers silicosis.  There are many additional flows here which could be detailed to go into and out of ecological ecosystems, affecting them and also humans.</p> <p></p>"},{"location":"concepts/ecology/#economic-resources","title":"Economic Resources","text":"<p>We have thought of economic resources as having use value (and sometimes exchange value) to humans and ecosystems.  If we broaden that to include \"bad\" as well as \"good\" resources, we can model more completely and accurately the resource flows that impact ecosystems including humans.  It is also not very helpful to even think in terms of \"bad\" and \"good\", since that is conditional.  For example, CO2 is \"good\" for plants in a greenhouse, but \"bad\" pumped into the atmosphere, and some of the CO2 in the greenhouse will leak out, making it \"bad\"... yet it is the same substance.</p>"},{"location":"concepts/ecology/#agents","title":"Agents","text":"<p>We have defined Agents as people and organizations (formal or informal).  If we go beyond human-centric thinking, we could conceive of Agents as other living things, and also as groups of other living things, or whole ecosystems.  Those ecosystems could be of any size or complexity, and all types of agents could have various relationships between each other and their ecosystems.</p> <p>This requires some things which are traditionally considered by humans to be resources, to be considered agents in their own right.  We understand that some living things (say beef cattle being raised by a farmer) need to be accounted for as resources, and Valueflows will of course continue to support that.  On the other side of the puzzle, we also realize that we could consider a human being as an ecosystem, given the microbiota that lives there and even influences behavior.  So, the goal is to keep the model simple and flexible enough to support current practices, while also supporting continuing exploration and expansion of our thinking about agency within the global ecosystem of living beings.</p> <p>But how can these non-human agents give input to human accounting systems?  One way is through sensors; another is through human \"representatives\".  Of course, this is all still unavoidably human-centric.  Some ecological agents need human agents to represent them in human governance activities, similar to specific humans representing organizations. This idea has both supporters and opposition: Federal Judge Strikes Down Lake Erie Bill of Rights. And there are evolving experiments to refine how humans cant on behalf of ecosystems, and to include indigenous groups who have had responsibility going back centuries. There are many ethical, legal, and practical considerations, but we think it is important to support wishes to account for climate change and harm from externalities.</p>"},{"location":"concepts/estimates/","title":"Estimates and Analysis","text":"<p>Scenarios define high-level strategies. They contain Processes and Transfers.</p> <p>See also Flows in motion: Estimation and Analysis on the Diagrams Explanation, and Estimate and Analysis examples.</p>"},{"location":"concepts/estimates/#scenarios","title":"Scenarios","text":"<p>The Processes section explains processes at their basic level, starting with operational observable processes. The Transfers section explains non-process flows.  The Operational Planning section explains how to group those processes and transfers into a scheduled plan at an operational level. This section explains how to use the same process, transfer, and plan pattern to represent higher level requirements, those that are not (yet) actually scheduled, or already aggregated data.  We are calling that admittedly broad category Scenarios.</p> <p>Processes and transfers can be composed into scenarios at any level.  Like scheduled plans, these scenarios can be created from recipes.  Like scheduled plans, they use the same input-output-process pattern and non-process-flow pattern. The flows in a scenario are usually intents, but sometimes sumarized economic events.</p> <p>Some examples we have seen:</p> <ul> <li>Plan Refinement. Before the final operation plan is set, sometimes it is useful to make more general plans, which then can be refined further, ending with the scheduled plan.  These plans are estimates made using \"planning horizons\", which are defined durations starting from the planning date - for example year, then month, then blending into the actual scheduled plans.</li> <li>Budgeting.  A Budget is a summary of input requirements for a scope for a time interval (sometimes corresponding to the organization's \"accounting period\"), often yearly, as a higher level of planning. Budgets are often created to support a specific goal. Budgets are usually created before operational planning is done, and are estimates.  Often a forecast is made consisting of desired or expected deliverables for the period, sometimes using past event history as a starting point.  This would create a demand-driven budget.  Or sometimes a supply-driven budget makes more sense, for example when all of the producing capacity will be used in any case, and then the outputs will be constrained by the inputs available.  In any case, the budgeted inputs and outputs are kept, as they are often compared to actuals later.  The budget itself could be represented as a Process, and it could nest line item processes based on type of resource or process.  A budget is usually for one scope.</li> <li>Comparative Analysis.  Sometimes different plans will be created for the same basic data set.  One example is when doing risk analysis or other comparative analysis.  Different assumptions might skew a plan in different useful directions, for example a \"normal scenario\" and a \"worst case scenario\".</li> <li>Network Analysis.  This is an analytical look at all or some of the actual and/or potential resource flows for a scope, often a community or region.  This can be modeled using higher level types of processes and types of resources, and could include intents or economic events.  One use of this kind of analysis is to identify gaps and opportunities to keep resources circulating in a community to improve economic health and resilience.</li> </ul> <p>Agents can define different scenarios that they want to use. So for example, if a group does yearly budgets, each budget for different years could reference the same \"yearly budget\" scenario definition.</p> <p>The model itself is quite flexible, and we expect there will be more uses for it, all using the basic input-process-output structure with resource flows connecting them, contained by a scenario.</p>"},{"location":"concepts/estimates/#connecting-plans-and-scenarios","title":"Connecting Plans and Scenarios","text":"<p>Plans do not need to be directly connected to Scenarios, but sometimes they can be a refinement of a Scenario. If comparisons are needed, often the time periods and scope are all that is needed.  In addition, if resource specifications and/or process specifications are part of a classification taxonomy, that can be used for connecting the higher to lower perspectives.  For example, the plan for carrots could be aggregated into the higher level scenario for all vegetables.</p> <p>Often Plans do not fit cleanly within Scenarios, because plans tend to be for real production when it happens, which usually does not fit nicely into accounting periods or planning horizons.  Seasonal food production can be an exception to this.</p> <p>Scenarios can be refinements of other scenarios.  For example, a group might do scenarios for yearly estimates, then refine those for each month, before creating operational plans which will be executed.</p> <p></p> <p>If other requirements arise, we are happy to add connections as needed to the vocabulary.</p>"},{"location":"concepts/exchanges/","title":"Exchanges","text":"<p>See also an Exchange diagram in Core, Flows in motion: Recipe, Flows in motion: Planning, Flows in motion: Observation, also the Exchange examples.</p>"},{"location":"concepts/exchanges/#the-independent-viewpoint","title":"The independent viewpoint","text":"<p>Here we look at exchanges of resources from an independent or neutral viewpoint (not the viewpoint of one of the Agents in the exchange). For example, from one Agent's viewpoint, the exchange may be a Purchase, from the other Agent's viewpoint, it might be a Sale. From the neutral viewpoint, it is an exchange of resources, with usually at least two flows of resources, from different directions. So for example, the seller might give some goods to the buyer, and the buyer might give some money to the seller. Or in a barter exchange, one agent might give the other some books, and the other agent might compensate with some cookies.</p> <p>Exchange is ubiquitous on the internet today, with offers everywhere. In Valueflows, we track not only the offers and promises, but also the actual flows of resources in networks, in all directions. And we support exchanges that don't involve money as well as those that do.</p> <p>Valueflows enables multilateral exchange agreements as well. Any number of agents can commit to flows where they provide something and flows where they receive something. This way creating a reciprocal cycle in the flows graph. So for example, Alice can provide apples from her orchard to Bob, who can provide accommodation to Claire, who can provide tutoring to Alice's children. Such exchanges can happen in infinite number of possible ways, as long as all agents participating agree on specific reciprocal cycle in the flows graph.</p> <p>We also support non-reciprocal one-way transfers, such as in a gift economy.  However, an exchange implies at least two transfers with reciprocity.</p>"},{"location":"concepts/exchanges/#exchanges-and-flows","title":"Exchanges and flows","text":"<p>Exchanges as modeled in VF actually are reciprocal flows, not resources directly.</p> <ul> <li> <p>For example, most timebanks exchange work for credits.  The work event can be part of a process that produces something for some other agent.  It is also part of an exchange in the timebank.  The transfer of credits on the other hand, is not part of any process that creates or transports something, it is merely the timebank recording that one account was decremented and another account was incremented.</p> </li> <li> <p>Exchange of work also happens in open value networks, where people record work events as input to many processes, and then when income is received for outputs of that work, people receive part of that income, in exchange for their work.</p> </li> <li> <p>Another example is when a service is created as an output of a process, where that service delivery event can be considered an implied transfer, and exchanged for some other resource.</p> </li> </ul> <p>To be included in an exchange, a flow must have a different provider agent and receiver agent.  Flows involved in transfers of rights to an inventoried resource are most obvious.  Other types of flows can also imply transfer behavior, and can thus be used as part of an exchange, such as consume and produce.  And yet other types of flows do not involve an inventoried resource, but still can be included in an exchange, such as work, delivering a service, or usage of some equipment.  Some types of flows don't make sense to include in an exchange, because there is only a transfer of custody involved, such as pickup and dropoff, or accept and modify. For more details see Explicit and implied transfers.</p>"},{"location":"concepts/exchanges/#agreements","title":"Agreements","text":"<p>An Agreement can encompass a promised exchange, or an observed exchange without the promise.</p> <p>Various kinds of agreements between agents often define the rights and responsibilities for economic resources that are transferred. Agreements can reflect any economic paradigm, so make it possible for the Exchange and Transfer vocabulary to work equally well for capitalist businesses, transitional economic interactions, and next economy interactions.</p> <p>Agreements can be of any kind and scope, from an order to an agreement in a contribution-based economy to a larger blanket agreement.</p> <p>Agreements can be combined into an Agreement Bundle.  This can be useful for example when each \"line item\" in an \"order\" needs to have a line item reciprocal commitment (like a \"price\"), instead of one combined reciprocal commitment for several primary commitments.</p> <p>Valueflows does not define the detailed internal vocabulary for agreements.</p>"},{"location":"concepts/exchanges/#recipe-exchanges","title":"Recipe exchanges","text":"<p>Recipes can include patterns for exchange, as well as production.  The Recipe Exchange is used to generate an agreement(s) and reciprocal commitments when a plan in created from the recipe.</p>"},{"location":"concepts/flows/","title":"Flows","text":"<p>Value flows (you could also call them resource flows) are a fundamental construct in the Valueflows ontology. They put the economic activity into motion.</p> <p>See also Actions, Core Concepts, Processes, Transfers.</p>"},{"location":"concepts/flows/#kinds-of-flows","title":"Kinds of Flows","text":"<p>The types of flows form a progression from defined to  potential to scheduled to realized.</p>"},{"location":"concepts/flows/#recipe-flow","title":"Recipe Flow","text":"<p>Recipes are used to create plans, and the Recipe Flow can create a corresponding Intent or a Commitment in a Plan, depending on if all the agents are known and the level of certainty of the planning.  See also Recipes, Planning from Recipe, Flows in motion: Recipe, Planning from Recipe example.</p>"},{"location":"concepts/flows/#intent","title":"Intent","text":"<p>Intents describe potential future events which have not been agreed to by other agents, such as offers and requests. Intents are often used for discovering another agent to participate in a desired event. On the process side, for example, planned work could be an Intent, but planned work that some agent committed to do is a Commitment.  See also Offers and Requests, Flows in motion: Offers and Requests, Offers and Requests examples.</p>"},{"location":"concepts/flows/#commitment","title":"Commitment","text":"<p>Commitments describe potential future events which the involved agents have already agreed to pursue. Commitments can be considered contractual promises from one agent to another.  Commitments can be thought of as plans for Economic Events, and Economic Events can fulfill Commitments.  Commitments can satisfy Intents.  See also Operational Planning, Flows in motion: Planning, Planning examples.</p>"},{"location":"concepts/flows/#possible-gray-area-between-intent-and-commitment","title":"Possible gray area between Intent and Commitment","text":"<p>When making an operational plan, where there isn't really a question of some agent stepping up to commit or being assigned, and no published Intent is needed, then Commitments can be used, even though there may not be an agent committed yet. The criterion can be thought of as firmness of plan, not commitments of agents.  Basically, sometimes making a plan takes some time, so during that activity, if Commitments are not assigned, it is OK, better than adding unnecessarily to the machinery needed to make a plan by using Intents.  On the other hand if publication of the flow is needed to find an Agent to commit, then an Intent is better, as it can become part of a Proposal.</p>"},{"location":"concepts/flows/#economic-event","title":"Economic Event","text":"<p>Economic Events describe past events, something observed, never some potential future event.  They can fulfill Commitments or satisfy Intents (when there is no Commitment).  See also How Resources Relate to Events, Flows in motion: Observation, Production examples, some of the Transfer and Exchange examples.</p>"},{"location":"concepts/flows/#claim","title":"Claim","text":"<p>Claims resemble Commitments, but are initiated by the receiver, not the provider.  If there is not an existing Commitment, an Economic Event can trigger a reciprocal Claim, based on an agreement.  Even then, Claims sometimes do not have to actually be instantiated, often they can be implied from an Economic Event and an agreement.  For example, if Alice has agreed to sell Bob some carrots for $2, then if Alice delivers the carrots to Bob, she has an implicit claim for $2 from Bob.  See also Flows in motion: Observation, Claim example.</p>"},{"location":"concepts/flows/#timeline-plans-and-observations","title":"Timeline, plans and observations","text":"<p>The figure below shows that Economic Events have to be observed and for that reason only appear as records of the past. Future plans get represented with Intents and Commitments.</p> <p></p>"},{"location":"concepts/flows/#matching-intents","title":"Matching Intents","text":"<p>Often agents will start their plans independently and record their initial intents. Later once they make a Commitment with another agent, it will represent a specific shared part of their plans. For that reason any Commitment can result in Satisfaction of the providing agent's Intent as well as Satisfaction of the receiving agent's Intent.</p> <p></p>"},{"location":"concepts/flows/#granularity","title":"Granularity","text":"<p>Intents, Commitments, and Economic Events can occur at any granularity that is needed or for which data can be obtained.  So they primarily are used for all operational needs, but can also be used at higher levels for budgeting for organizations, analytical and high level planning needs for communities or regions, etc.</p> <p>Any flows that are part of a Plan are operational, defined at the lowest level.  Flows that are part of a Scenario are not operational.  They could have many uses, from pre-planning to higher level analysis, but are not considered part of any scheduled planning for what will actually occur.</p>"},{"location":"concepts/flows/#actions","title":"Actions","text":"<p>All types of flows use the same set of actions, which define what the flow does and how it behaves in relation to resources.  You can find detailed documentation on actions on the Actions page.</p>"},{"location":"concepts/flows/#quantities-and-times","title":"Quantities and Times","text":"<p>Quantities are used for counting, such as:</p> <ul> <li>Exchange/transfer</li> <li>Resource increment and decrement</li> <li>Recipes, how much or many goes into and out of a transformation process</li> </ul> <p>Times are used for coordination and scheduling, such as:</p> <ul> <li>Calendar availability</li> <li>Planned timelines</li> </ul> <p>They can be used together for analysis and reporting, such as:</p> <ul> <li>Accounting totals (quantity) within accounting period (time)</li> </ul> <p>Quantities can be any needed unit of measure, including counts, volumes, weights, etc.  Time can be a beginning/end time (an interval), or a point in time, or a due date.  The flows require at least one of those.  If a point in time is recorded, an application should return that time as the beginning and end time if asked.</p> <p>Note that recipes may need to scale both quantities and calendar times when used to create a plan.</p> <p>Sometimes a quantity is expressed in time-based units, like \"I worked 6 hours\", or \"we used this machine for 8 hours\".  These flows also may have a related time, like \"I worked from 10am to 4pm\", or \"we used this machine from 8am to 4pm\". In these examples, the quantity is used for accounting figures, exchange, recipes.  The time is used to schedule and coordinate the work or machine usage.</p> <p>Sometimes a situation may call for a \"compound quantity\", like \"Number-per-Year\".</p> <p>See also at Use of Other Vocabularies.</p>"},{"location":"concepts/flows/#correcting-events","title":"Correcting Events","text":"<p>Economic events are immutable in accounting practice, since at any time they could have been reported formally.  To correct economic implications of an economic event, you need another economic event, which can be related to the first one with the relationship <code>corrects</code>.  The correcting event can have a negative number.  It can either completely back out the original event or adjust it.  See also Making Corrections on the Accounting page, the Correcting Errors example.</p>"},{"location":"concepts/location/","title":"Location","text":""},{"location":"concepts/location/#spatial-location","title":"Spatial Location","text":"<p>Perhaps the original concept of location is a physical place.  This could be a point, or some other geometry, from simple to complex.  The main requirement in VF for a physical location tends to be for geographic mapping, which is usually a point on a map, but could be an area.  It also could be used for things like locations of resources, many of which could be in one building.  Managing space in a warehouse could be automated.</p> <p>In VF, location tends to be on the edge of the model, thus is not modeled deeply.  An agent can have a primary location, an economic resource can have a current location, and the flows can happen at a location.  Certain economic events can also change the location of an economic resource. Our experience is this covers most of the economic needs for locations.  Some implementations will want more than this, which can be added per implementation.</p> <p>The location data itself is also fairly basic.  The core is the latitude, longitude, and altitude, subclassed from the Basic Geo Vocabulary (WGS84).  We have included some other descriptive information for human understanding.  None of the information is meant to be globally unique identification of a spatial location, and the accuracy of the geometry should be what is needed by your application. Our definition is also more limited, since we focus on somewhat fixed locations. We also assume locations are specified relative to the Earth.</p> <p>To accommodate needs for more complex spatial location definitions, we include a data reference to the extensive Geography information of the GEOSPARQL Specification, which can then be used for purposes not supported in the core VF.</p> <p>See also Specification location information.</p>"},{"location":"concepts/location/#virtual-location","title":"Virtual Location","text":"<p>We support two kinds of virtual locations for economic resources, and more can be added as needs arise.</p> <ul> <li>One is a URI location for economic resources that are electronic, such as documents, code or designs.</li> <li>The other is a currency location for economic resources that are located in an account, crypto wallet, etc.  The latter should be formatted according to the specific requirements of the type of currency.</li> </ul> <p>For agents that do not have a physical location, implementations can use website or other agent information from other vocabularies (see Agents).</p>"},{"location":"concepts/plan/","title":"Operational Planning","text":"<p>An operational plan is a schedule of related operational processes, that constitute a body of scheduled work with defined deliverable(s).  A plan normally contains one or more process resource flows, one for each deliverable.  It can also contain the reciprocal agreements expected for different involved agents involved in the flows.</p> <p>See also Flows in motion: Planning in the Diagram Explanations, Generating plans from recipes, and the Planning examples.</p>"},{"location":"concepts/plan/#coordinating-work","title":"Coordinating work","text":"<p>A plan can cover more than one scope, if the different scopes are tightly coordinated with pre-agreed rules, for example sub-organizations of a main organization, or an ongoing supply chain.  If not, or if the agents prefer, then requirements from one scope could become deliverables for another scope's plan.  Different batch sizes could trigger a new plan for inputs to the main deliverable too.  But all of this does not affect the vocabulary or model.  Plans can relate to each other through resource flows just like processes.</p> <p>Plans are used for understanding and coordinating what needs to happen for specific outputs. The size and complexity of a plan is up to the people who are planning and coordinating the work.</p> <p>A plan can be generated from a recipe, or created without one.</p> <p>Some examples:</p> <ul> <li> <p>A communications group creates articles for a larger group. The communications group needs some of their articles to be translated into various languages, by another group within the larger group. Both the creation of an article and its translation could be part of the same plan.</p> </li> <li> <p>An organization decides to mount a campaign for some objective.  There might be many different deliverables: a fundraising website, some brochures, some events, etc.  All of these can be part of the same plan for easier coordination.  For example, a campaign logo could be used in all of these separate outputs.</p> </li> <li> <p>An organization gets an order for some things they produce.  They can create a plan to produce to that order, including all line items.  Or they can gather all the orders for a time period for an item and produce to that as a larger plan.</p> </li> <li> <p>An organization produces a standard batch size to stock, in anticipation of future orders.</p> </li> </ul>"},{"location":"concepts/plan/#processes-nested-in-a-plan","title":"Processes nested in a Plan","text":"<p>When processes are \"nested\", it is not random, nor based on a taxonomy. It is based on what processes are actually part of the plan. And not all the inputs and outputs of nested processes are considered inputs and outputs of the plan, since some are both produced and consumed within the plan.  In the following simplified example, the flows between plant/weed and weed/harvest start and end inside the nest, and so are not inputs to, or outputs of, the plan.</p> <p></p> <ul> <li> <p>There are some common situations for nested processes that will not be as simple as the above diagram.  These include:</p> <ul> <li>Action makes a difference.  When a piece of equipment or tool is \"used\", it is not gone at the end of the nesting process.  But if it is managed as a time-based resource with a calendar, some calendar duration is in fact consumed.  Or if a citable resource is created and then cited inside, it is also still there at the end of the nesting process.</li> <li>Batch or lot size makes a difference. Suppose you have a requirement for 5 of some assembled item, and 4 of some input component are needed to make each item, 20 components in all. But the minimum batch size for the component is 100. Then 80 of the components will be left in inventory at the end of the nesting process, and that 80 will also an output of the outer process.</li> </ul> </li> </ul>"},{"location":"concepts/plan/#planning-from-a-recipe","title":"Planning from a Recipe","text":"<p>Plans can be generated from a recipe by scaling the recipe according to the demanded quantity of the end outputs.  This is called a \"demand explosion\".  The generation might take into account current inventories, batch sizes, etc., so it is not necessarily a \"pure\" reflection of the recipe.  In addition, often plans are tweaked after generation from a recipe, depending on how firm and exact the recipe is.  A manufacturing recipe might be more exact than a recipe for a more general business process.  For these reasons, a plans is decoupled from the recipe that generated it in the vocabulary.  It maintains only the references to the resource and process specifications that were supplied from the recipe.</p> <p></p>"},{"location":"concepts/processes/","title":"Processes","text":"<p>By Process, we mean an activity that transforms inputs into outputs. The outputs might then become inputs to other processes, forming networks and chains. Those chains may be circular, where an output from one process becomes an input to another process that occurred previously in the same chain, supporting circular economies.</p> <p>Process spans the Plan and Observation layers.  I.e. intents, commitments, and economic events can all be connected to the same process as it moves through planning and observation.</p> <p>See also Input-Process-Output in the introduction, Flows in Motion: Planning and Flows in Motion: Observation in the Diagram Explanations, Production examples, Planning examples, and Community planning and Regional analysis in the Scenario examples.</p>"},{"location":"concepts/processes/#for-example","title":"For example...","text":"<ul> <li> <p>For example: a farming process takes compost, soil, seeds, water and human and mechanical work as inputs, and transforms them into grains, nuts, fruit, and vegetables. Those ingredients may go to kitchens that create dinners for people to eat. Some of those ingredients may be pared off in preparation, or spoil, or be left on plates. Those leftovers go into compost, which starts the process chain over from the beginning.</p> </li> <li> <p>Or for a bad example: a CAFO (Confined Animal Feeding Operation) produces a lot of manure. They put manure into big lagoons, which drain into the water table, and come back up in people's drinking water, causing diseases, for which the people become inputs to hospital processes.</p> </li> <li> <p>One of the inputs to the CAFO process is antibiotics. The animals are filled with antibiotics because they get sick in the CAFO environment. And the antibiotics are also an output, mixed in with the manure and meat.</p> </li> <li> <p>The antibiotics then breed resistant bacteria, which end up in the people, and send them to the hospital, and then kill the people, because the common antibiotics no longer work. And the resistant bacteria remain in the hospital to kill other people.</p> </li> </ul> <p>Connected processes enable us to see cause and effect, if we want.</p>"},{"location":"concepts/processes/#process-structures","title":"Process structures","text":"<p>Process-based flows can create \"directed graphs\" in infinite combinations.</p> <p></p>"},{"location":"concepts/processes/#co-products-and-by-products","title":"Co-products and by-products","text":"<p>Usually processes have one output, but not always.  Sometimes there are co-products that have somewhat equal value.  Sometimes there are co-products that provide something useful, such as plastic shavings being put back into the melting pot for continued production as input.  Sometimes there are unintended by-products, resources that are known but not useful or are harmful.</p> <p>Valueflows does not distinguish between \"good\" and \"bad\" resources created by processes, as that is conditional and can be subjective. On the other hand, this pattern gives the opportunity to record and understand harmful \"externalities\" from producing and transporting resources.</p>"},{"location":"concepts/proposals/","title":"Offers and Requests (Proposals and Intents)","text":"<p>Proposals are published requests or offers, sometimes with what is expected in return.</p> <p>See also Intents and Matching Intents in the Flows concept page, Flows in motion: Offers and Requests in the Diagram Explanations, and Offers and Requests examples.</p>"},{"location":"concepts/proposals/#how-proposals-work","title":"How proposals work","text":"<p>Proposals are everywhere in advertising.  But we see many groups posting proposals that are different from commercial advertisements, such as timebanks, mutual aid groups, commitment pools, people working together on a project and looking for help, groups looking for donations, supply chains seeking specific offers from suppliers in their network.  All of these are supported, including commercial advertisements.</p> <p>A Proposal has one or more primary Intents, and optionally one or more reciprocal Intents. The proposal has to do with the publishing of the intents, which have the actual content.  An intent can be published in more than one proposal, for example over time, or with different reciprocal intents like wholesale and retail price lists.  Multiple primary or reciprocal intents on one proposal imply an \"and\", like a Community Supported Agriculture (CSA) group might offer weekly veggie boxes, and in exchange want some money plus some work contribution on the farm.</p> <p>Proposals can be grouped into Proposal Lists, for example for price lists.</p> <p>Proposals can stay directed to a broad or specific audience. In the broadest case, they stay available for anyone (public proposals). In the most narrow case, the stay available only for specific agent. In between those two extremes a whole spectrum exists.  For example two distinct proposals can exist on providing particular product or service - one for club members and one for general public etc.</p>"},{"location":"concepts/proposals/#matching-offers-and-requests","title":"Matching offers and requests","text":"<p>Proposals may be specific or more general, often not commercial at all, expressed not in identified products but in classifications and text.  But they want to find each other. The offers want to find the matching requests. The requests want to find the matching offers.</p> <p>When they find their match, those with the matching offer and request enter into a conversation which might result in an agreement, starting a cycle that ends with observed transfer or exchange.</p> <p>Agreements, which are committed to by agents, can evolve from proposals directly, or conversations about proposals, or be entered into without proposals.  Besides agreements, a proposal to do something might trigger a conversation which could result in commitment for an input(s) to a process, with or without an associated exchange agreement.</p> <p>These types of conversations may lead to more and better cycles of engagement.  Valueflows does not at this time define the pattern of this kind of conversation, but intends to integrate with different social networking vocabularies for this purpose.  We do think that social and economic networking are naturally intertwined in human behavior.</p> <p></p>"},{"location":"concepts/recipes/","title":"Recipes","text":"<p>See also Flows in Motion: Recipes on the Diagram Explanation, Planning from a Recipe on the Operational Planning page, and the Simple plan from recipe example.</p>"},{"location":"concepts/recipes/#not-just-for-cooking","title":"Not just for cooking...","text":"<p>Recipes are for:</p> <ul> <li>documenting how to do something,</li> <li>generating plans for people to do it together,</li> <li>providing signals for coordinating their work.</li> </ul> <p>Recipes contain all the info required to create a resource or provide a service.  In ERP (Enterprise Resource Planning) terms, it\u2019s a combination of bills of material and routings and suppliers. And the logic for generating plans from recipes is roughly the same as Material Requirements Planning.</p> <p>If you encounter the same planning pattern more than once, and your software allows planning from recipes, you might want to capture the pattern in a Recipe so you don't need to cut and paste or re-enter the same information every time.</p>"},{"location":"concepts/recipes/#recipe-patterns","title":"Recipe patterns","text":"<p>These are two basic shapes of recipes. These recipe patterns can be used alone, or mixed and matched in the same recipe:</p> <ul> <li> <p>Manufacturing pattern: assemble or transform input resources into different output resource(s). This combines bills of material, processing instructions (routings), other inputs like labor and equipment requirements, and possible suppliers for the inputs. The manufacturing pattern creates recursive structures. In other words, if an input component has a recipe itself, that recipe will be incorporated into its parent, so you can view a processing tree from parents through children unto many generations.  For example:</p> <ul> <li>Assemble a robot from metal, wires, computer chips, software, etc.</li> <li>Bake bread from flour, yeast, water, etc., using an oven.</li> </ul> </li> </ul> <p>A manufacturing recipe can be thought of like a tree shape, where the top of the tree produces the resource to be assembled, and the roots are all the components.</p> <ul> <li> <p>Workflow pattern: change the same resource into a different stage of the same resource. This describes a sequence of processes used to complete work on one resource.  They create a series of stages that one resource will go through until it is finished. For example:</p> <ul> <li>Translate a source document, edit the translation, format for publication, and publish.</li> <li>Repair a bike.</li> <li>Do quality testing on something that was created using the manufacturing pattern.</li> </ul> </li> </ul> <p>A workflow recipe tends to be more like a linear flow.</p> <p>The examples above have to do with producing specific goods or services.  Recipes can also be used to document more general business processes that an organization uses to produce more generally defined kinds of outputs.  For example, an R&amp;D process might be hard to document in detail, but it does have general steps like researching existing technology, concept generation, experimentation, concept selection, refinement, testing, documenting the design. </p>"},{"location":"concepts/recipes/#recipe-and-recipe-group","title":"Recipe and Recipe Group","text":"<p>These are optional constructs.  You might want a Recipe when you include more than one process in one recipe, and especially if different recipes can create the same Resource Specification output in different ways.  It is also useful when certain processes are included in multiple recipes.</p> <p>A Recipe Group is for when your plans regularly produce more than one output which can be produced separately.  For example, a campaign might produce one or more events, various brochures, a website, etc.</p>"},{"location":"concepts/recipes/#byproducts-and-coproducts","title":"Byproducts and Coproducts","text":"<p>A Recipe knows its primary output, i.e what is created by this Recipe.  As of now, it does not directly know its byproducts and coproducts, but this information can be added for specific use cases, outside of Valueflows, if needed. It can also be found by interrogating the contents of the recipe input-process-output graph. This choice favors simplicity at this stage.</p>"},{"location":"concepts/recipes/#generation-of-plans","title":"Generation of plans","text":"<p>Plans can be generated from a Recipe, a Recipe Group, or directly from a Recipe Process, which will find predescessor Recipe Processes as needed.</p> <p>Back-scheduling a plan from a Recipe: Start with end items and a due date, generate the plan from the end item to its inputs, to the outputs leading the inputs, to their inputs, etc.</p> <p>Forward-scheduling from a Recipe: Start with the inputs with no predecessors and a start date, generate the plan from the inputs to their outputs, to the inputs that want the outputs, etc.</p> <p>Forward-scheduling from a Resource: Start with a Resource and generate the plan based on its recipe.  Examples:</p> <ul> <li>Translation: start with a source document</li> <li>Auto repair: start with an auto that needs repair.</li> </ul>"},{"location":"concepts/resources/","title":"Economic Resources","text":"<p>The resource vocabulary describes resources and types of resources, defined broadly.  They can include useful goods and services, digital documents and representations, code, money, tokens, credits, energy, work, skills, CO2, methane, heat, air, water, soil microbiota....</p> <p>See also Resources in the Diagram Explanations, Actions, and Resource examples.</p>"},{"location":"concepts/resources/#definition","title":"Definition","text":"<p>Traditionally, an economic resource is defined by its utility, but also by its scarcity and its control by an economic agent. That definition is based on accounting for private ownership, and we believe is too limited.</p> <ul> <li>Intellectual creations like designs are not scarce, yet they clearly are economic resources. They only become scarce when legally restricted by patents, licenses, and copyrights.</li> <li>Air, water, and other products of nature are clearly economic resources, but they are not under the control of an agent unless they are legally restricted by ownership. However, by means of the invisible foot that accompanies the invisible hand, they are regularly degraded by enterprises, and not accounted for, classified as \u201cexternalities\u201d.</li> </ul> <p>We want to think of ourselves as participants in ecosystems, not competing enterprises. As such, we need to account for our effects on all aspects of our ecosystems.</p> <p>And we want knowledge to be freely available.</p> <p>Also, we prefer to think of use value, but economic resources also often have exchange value.</p>"},{"location":"concepts/resources/#the-difference-between-a-resource-and-its-specificationclassifications","title":"The difference between a resource and its specification/classification(s)","text":"<p>An economic resource is observable.  Its specification or classification defines what kind of thing the economic resource is.</p> <p>So, for example, most listings of things offered for sale on an e-commerce site are specifications, which can be searched using classifications. The one in a box delivered to your door is a resource.</p> <p>Or the description of the book entitled \"The Power of Babel: A Natural History of Language\", ISBN-13: 978-0060520854, is a specification. Your library may have two copies that you can check out. Those are resources.</p>"},{"location":"concepts/resources/#the-difference-between-a-resource-specification-and-a-resource-classification","title":"The difference between a resource specification and a resource classification","text":"<p>An economic resource or a flow can have only one resource specification in Valueflows.  This defines the lowest level useful type or kind of the resource that is needed. The Valueflows vocabulary defines this as the ResourceSpecification.  Note that often taxonomies and other references on the web can define very specific resource specifications at their leaf levels, and these can be used if the necessary properties can be found.</p> <p>An economic resource or a flow can have any number of resource classifications.  They are used to filter, match, or group economic resources.  Resource classifications can be part of a taxonomy. That means they can be defined very broadly and generally and maybe vaguely, or they can be defined very narrowly, but fit into broader classifications.</p> <p>So, for example, Herb might be the parent classification of Anise Hyssop, Goldenrod, Nettles, Red Clover, etc.  Besides its usefulness in understanding taxonomies of resource types, this can be useful when one can define a general recipe that will work for many more specific kinds of resources.</p> <p>People can use the multitude of existing taxonomies for resource classifications, or can also create their own as needed.</p> <p>Resource classifications can also use other schemes, like facets or tags.  It is left vague in order to be flexible.</p> <p>The references to resource classifications are uri's, and not otherwise defined inside Valueflows.</p>"},{"location":"concepts/resources/#identification-and-behaviors-of-resources","title":"Identification and Behaviors of Resources","text":"<p>Here are three different kinds of resources from the viewpoint of identification:</p> <ul> <li>serialized resources, where each individual instance has a unique identifier,</li> <li>lot-controlled resources, where each lot or batch has a unique identifier, but the lot or batch may contain many individual instances, and</li> <li>count or volume or stock resources, where individual instances are indistinguishable, or in the case of fluids, only exist on a molecular level.</li> </ul> <p>Serialized resources would fit the direct identification pattern. Lots can be split up, so the identification of a subset of a lot would require some other properties, such as location. Stock resources can only be described indirectly, by means of some combination of properties, such as specification and location. (Location is a complex ontology of its own: for example, in warehousing, a location is often composed of warehouse:room:aisle:row:tier.)  The tracking identifier is used for serial numbers.</p> <p>Moreover, identification of resources will depend on scope and purpose. We want to allow each scope or context to define resources that they have relationships with, according to the combination of properties that works best for them, which might include which agent has which relationship with a resource.</p> <p>And then in the \"independent view\", for larger-scale analysis of resource flows, or for example for lot tracking for public health issues like mad cow disease, different combinations of properties might be needed.</p>"},{"location":"concepts/resources/#substitutability","title":"Substitutability","text":"<p>This defines if any resources of that specification can be freely substituted for any other resource of that same specification when used, consumed, traded, etc.  For example, one container of \"B9R-1-red DLP resin photopolymer\" is probably substitutable for another container of the same photopolymer.  While each resource for a resource specification called \"English-Spanish translation\" is probably not substitutable because each will be a different document.</p>"},{"location":"concepts/resources/#unique-identifiers-for-resources","title":"Unique identifiers for resources","text":"<p>This can vary.  And people can be allowed within some boundaries of agreement to specify which combination of other properties would constitute identifiers.</p> <p>Here are some examples from manufacturing situations:</p> <ul> <li>Unique identifier = an assigned serialized identifier, which is unique across manufacturers, due to agreements in an industry.  Examples are computers, vehicles, and other equipment.</li> <li>Unique identifier = resource model + lot identifier + location + owner: so in other words, the owner of the rights was part of the unique identifier of the resource, and if the resource got transferred from one owner to another, the first owner's resources would be decremented, and the second owner's resources would be incremented.</li> </ul> <p>Note in the last case, a transfer of rights means a different resource. This is common with resources that are not serialized, where one logical resource has a quantity greater than 1, and the individual instances are substitutable. (Think nuts and bolts, grain, strawberries, bottles of beer in cases, etc.)</p>"},{"location":"concepts/resources/#stage-and-state","title":"Stage and state","text":"<p>Sometimes part of the logical identification of a resource includes:</p> <ul> <li>stage: the ProcessSpecification of the most recent process the resource was output from, such as \"test\"</li> <li>state: the state of the resource on output from a process, such as \"failed\"</li> </ul> <p>Stage is used when the same identified resource passes through multiple processes in its lifetime, and that information is needed by the next process to determine which resources can be valid inputs.  For example, in creating a translation, you might have one translated document pass through translation, editing, proofreading, and formatting stages. You don't want to bring that resource into the formatting stage until it has been proofread, for example. Or you might have a testing stage for a component or product, in which case you don't want to consume or transfer the resource until it both has been through the testing stage, and had a <code>pass</code> output state.</p> <p>These can be defined on the recipe or the plan, showing where an input flow expects a certain stage and/or state of a resource. In that case, Dependent demand planning will select only those resources that fit the specified stage and state.  In user-interface forms for adding process input EconomicEvents, if the use case uses stages, the input event form should query EconomicResources for required stage and state when offering selections of possible input resources.</p> <p>An alternative to using staged resources is to have different resource specifications, and therefore different identified resources at each stage.  This eliminates the extra complexity of the stage model, but also means you can't tell that the same resource is passing through stages.</p>"},{"location":"concepts/resources/#inventory","title":"Inventory","text":"<p>Economic Resources can be inventoried, not inventoried but could be, or it doesn't make sense to think about inventory.  If a resource is not inventoried, it is generally not instantiated in the software, but defined using resource specification and other properties, such as the accountable agent or location.</p> <ul> <li>Inventoried: You want to keep track of it, its changes in quantity, and how many you have right now.</li> <li>Not inventoried: You could keep track of it, but it isn't worth it.  This usually happens for quantities of small or hard to measure items that are obtained in bulk, like solder or bolts.  In this case, you have to look at the actual resource to see if you need more, the data won't tell you.</li> <li>Not applicable: This is for types of work (unless scheduled), services, and other resources where it just doesn't make sense.</li> </ul>"},{"location":"concepts/resources/#how-resources-relate-to-events","title":"How resources relate to events","text":"<p>In the original REA ontology, an Economic Event is a change in the quantity or in the rights to an Economic Resource performed by Economic Agents. An event is also defined by its behavior in relation to the resource  (consume, use, produce, transfer, etc.).</p> <p>Some people use the terms \"stock\" and \"stock flow\".  A stock is a resource; a stock flow is an event. (The term stock is too limiting, since a resource could be digital, like a document or media file.)</p> <p>An event can trigger incrementing or decrementing a resource.  Sometimes it does neither, as in the case of using a piece of equipment or citing a document.  But in any case, the quantity of a resource related to the event is not a resource itself, it is just a property of the event.  For example a resource could be 100 widgets on a pallet, lot number 1234.  If 10 of those widgets are consumed in a process that makes something out of them, that is an event: consumption of 10 widgets of lot number 1234.  The 10 widgets are not a resource in their own right.  The event triggers the decrement of the original resource of 100 widgets, which now has quantity of 90.</p> <p>For serialized or uniquely identified resources, if the logical and technical unique identifiers are not changed by an event, such as moving a vehicle to another location without any changes to its accountable agent (and assuming location is not part of the logical identifier), the resource does not behave like a stock and is not decremented or incremented.</p> <p>All economic information in an Economic Resource must be put there by an Economic Event.  Non-economic information (note, image, etc.) can be updated on the Economic Resource directly. Economic information is anything that might affect periodic accounting or financial reporting.  In this way, there is always an immutable detailed time-based record of information that affected such reporting.  And there are not excessive economic events for only non-economic updates.</p> <p>Note that the economic information is therefore derived information, and could be re-calculated as needed by iterating through the Economic Events. But that could have performance issues, so isn't generally recommended.</p>"},{"location":"concepts/resources/#how-resources-relate-to-transfers","title":"How resources relate to transfers","text":"<p>Two different kinds of \"inventorying\" of resources are affected by transfers.</p> <ul> <li>quantity of the resource where the agent has full (human realm) rights and responsibilities, irrespective of custody</li> <li>quantity of the resource where the agent has custody or physical possession, irrespective of rights, more of an operational focus</li> </ul> <p>We define two current quantities on the economic resource for these two concepts, accounting quantity for the first and onhand quantity for the second.</p> <p>For example, in vendor-managed inventory, the vendor owns the inventory so they see it in their accounting; but the store sees it in their onhand quantities. Or for inventory being shipped FOB source, the intended receiver owns the inventory and sees it in their accounting, but the goods are actually onhand in a truck.</p> <p>See also the Transfers concepts.</p>"},{"location":"concepts/resources/#how-resources-relate-to-each-other","title":"How resources relate to each other","text":"<p>If one resource contains other resources, the contained resources are part of, or make up the larger resource.</p> <p>For example, a bank account might contain a number of \"virtual accounts\" that a group manages itself, outside the bank's knowledge.  Or, a tool maker might make several different kinds of tools, which they treat as separate resources; but they might package some of those into a tool kit, also a resource.</p>"},{"location":"concepts/scoping/","title":"Scoping","text":""},{"location":"concepts/scoping/#boundary-for-analysis-and-accounting","title":"Boundary for analysis and accounting","text":"<p>Scope can be thought of as a boundary for analysis and accounting, mostly used for sets of economic events, commitments, and intents.  A scope is an agent of some kind.  See also Agent concepts.</p> <p>The scope is where work is done, where processes live, where value is created and exchanged. Economic events, commitments and intents can reference an organization, person, or ecological agent as an entity that defines their scope.</p> <p>It is not required that events, commitments, or intents designate a scope.  In fact, sometimes the scope is the same as the provider or recipient agent.  Or sometimes there is no useful scope.</p> <p>For functions that require traversing value flows, often the value flow will cross from one scope to another.  For example, perhaps another network or organization makes a component that you consume when making your product.  When this happens, there are some options.</p> <ul> <li>Standing agreements can govern what happens.</li> <li>A conversation for action might be required to determine what should occur for the specific instance.</li> </ul>"},{"location":"concepts/scoping/#accounting","title":"Accounting","text":"<p>Accounting is usually done for a bounded scope. Where a computer system supports one enterprise, this is simple.  When a computer system supports many organizations or there is a distributed network of economic activity, it is useful to be able to segregate the accounting using scope.  It basically enables multi-party accounting in a networked scenario.</p>"},{"location":"concepts/scoping/#planning","title":"Planning","text":"<p>Sometimes a generic recipe will cross scope boundaries for particular agents. For example one agent could produce a resource that consumes a component made by another agent.  In this case, can the first agent schedule the production of the component by the second agent?  Possibly yes, if there are agreements in place for that, and the first agent has verified that inventory does not already exist.  Or possibly, based again on agreements, the first agent can assume the second agent will provide the component, with the second agent taking responsibility for checking if it is onhand, and if not, scheduling it for production.</p>"},{"location":"concepts/scoping/#distributing-incoming-resources","title":"Distributing Incoming Resources","text":"<p>Some organizations distribute income backwards on value flows, based on people's contributions to the resources that generated the income.  When traversing the value chain, it is useful to know when the traversal has crossed a scope boundary, because it is possible that the rules for distributing the incoming resources will change for a different scope.  If the rules change or the rules are unknown, the income can be passed on to the other scope for them to distribute.</p> <p>Note that income does not need to be money and can include distributing the output of a process to the contributors, like when a community farm distributes food to its contributors.</p>"},{"location":"concepts/scoping/#scoping-agents","title":"Scoping Agents","text":"<p>Often the scope can be determined by already recorded agents, such as provider, receiver, subject, object.  But in other cases, for example when an organization is keeping track of activity or relationships between members, an explicit scoping agent is needed.  Implementations that use the scope concept may want to always record the scope of relevant entities, even when they can be implied.</p>"},{"location":"concepts/transfers/","title":"Transfers","text":"<p>See also Flows without processes in the Core, How resources relate to transfers, and the Transfer and exchange examples.</p>"},{"location":"concepts/transfers/#transfer-concepts","title":"Transfer concepts","text":"<p>One concept of transfer is an activity that re-assigns rights for an economic resource from one agent to another.  A second concept is an activity that operationally changes physical custody or possession of an economic resource from one agent to another, without affecting rights.</p> <p>Note that a transfer is a one-way activity.  Two or more reciprocal transfers form an exchange, and are connected in Valueflows by an Agreement.</p> <p>We think that now, and more so in the future, there will be more gradations of rights and responsibilities for resources than are sometimes considered now.  For example, as a society we may decide that we should take more responsibility for recycling or upcycling resources at the end of their useful life for us, or not wasting them.  The concept of \"ownership\" may transition more into \"stewardship\" in a concept of the world that does not put humans in a position of controlling the world's resources or abdicating responsibilities to the ecosystem in the name of ownership.  So, we are for the most part avoiding talking about ownership in this vocabulary, or any of the possible gradations and combinations of rights and responsibilities, leaving the concept of rights flexible.</p>"},{"location":"concepts/transfers/#transfer-examples","title":"Transfer examples","text":"<ul> <li> <p>For example, perhaps some agent has many apple trees, and plans on pressing apple cider. Another agent has an apple press and agrees to transfer use of the press (a resource).  The agent with the trees might transfer a portion of the apple cider to the agent with the press.  The use of the press involves some rights (to use the press for some period of time) and responsibilities (to not run it beyond its capacity and to clean it up before returning it).</p> </li> <li> <p>Or in a library, a book can be checked out, a transfer of custody from the library to the reader.  The agent who checks it out can read it and is responsible for caring for it and returning it on time, another transfer of custody.</p> </li> <li> <p>Or let's say that a community has farmland and equipment held in common.  The community transfers custody for the land and equipment to some farmers to use and take care of.  The community also transfers seeds every year to the farmers, enough to grow the food the community needs.  During the year, the harvests are distributed (transferred) to the community members for their consumption.  In reciprocity, the community provides for other needs of the farmers (transfers resources).</p> </li> </ul> <p>Implementation note: Different networks may choose to handle namespaces and identifiers at different granularity.  This also may depend on the technology used.  So one network may have separate namespaces for the nodes in the network; another may have one namespace for the whole network.  In the latter case, an implication on transfers is that the provider agent and the receiver agent may use the same resource identifier for <code>resourceInventoriedAs</code> and <code>toResourceInventoriedAs</code>, even though the primary accountable has changed.</p>"},{"location":"concepts/transfers/#explicit-and-implied-transfers","title":"Explicit and implied transfers","text":"<p>In Valueflows, several actions can involve the transfer concepts and behavior.  (For more detailed information, see the Actions page, especially the Behaviors by Action.)</p> <p>The explicitly denoted transfers are:</p> <ul> <li>transfer all rights (primary accountability: ownership, stewardship, etc.)</li> <li>transfer custody (only the physical custody or possession)</li> <li>transfer (shorthand for both rights and custody, since they often go together)</li> </ul> <p>Some other actions can imply a transfer of all rights, a transfer of custody, or both.  This shortens and sometimes simplifies the flows.  But it is not at all required, it is fine to have separate transfer flows if that makes the use case more understandable.  The Transport with Transfer example illustrates this.</p> <p>The way to imply a transfer is to designate a different provider and receiver.  It is not always true the other way though, a different provider and receiver does not necessary imply transfer behavior, usually because there is not an inventoried resource.  See also Exchanges and flows.</p> <p>The following actions imply a full transfer of all rights and custody, when there is a different provider and receiver.   The implication is that any behavior rules of the primary action plus the transfer action are implemented.  And also the flow can be included in an agreement, for example paying for consuming a resource provided by a different agent in the receiver's process.</p> <ul> <li>consume, produce</li> </ul> <p>The following actions imply transfer of custody only, when there is a different provider and receiver.  Since the implied transfer is only custody, this would normally not be used as part of an agreement.  But the behavior rules of the primary action plus the transfer of custody would be implemented.</p> <ul> <li>pickup, dropoff</li> <li>accept, modify</li> </ul> <p>These examples that might help provide clarity: Transportation with Transfer, Checkout book, Claim for income.</p>"},{"location":"examples/","title":"Index","text":"<p>Useful info: before doing a PR for an example:</p> <p>To validate YAML syntax, use <code>https://github.com/nodeca/js-yaml/#safeloadall-string--iterator--options-</code>.  Also works to use  <code>js-yaml filename</code>.</p> <p>Validate all dates with <code>Data.parse()</code></p>"},{"location":"examples/ex-agent/","title":"Agent Examples","text":"<p>This example include agents (people and organizations) and their relationships.</p> <p></p> <pre><code># Example: Agents and Agent Relationships\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    bob: https://bob.example/\n    fablab: https://fablab.example/\n    coop: https://coop.example/\n\n'@graph':\n\n  # Agents\n\n  - '@id': https://alice.example/\n    '@type': vf:Person\n    name: Alice\n    image: https://alice.example/avatar.png\n    primaryLocation: https://somelocation.example\n    note: Alice is a mechanical engineer who likes to work in the fablab.\n\n  - '@id': https://bob.example/\n    '@type': vf:Person\n    name: Bob\n\n  - '@id': https://fablab.example/\n    '@type': vf:Organization\n    name: Driftless Fablab\n\n  - '@id': https://coop.example/\n    '@type': vf:Organization\n    name: Community Tool Lending Coop\n\n  # Roles\n\n  - '@id': fablab:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': AgentRelationshipRole\n    roleLabel: is member of\n    inverseRoleLabel: has member\n    note: Both persons and organizations can be members of this fablab.\n\n  - '@id': fablab:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': AgentRelationshipRole\n    roleLabel: is supplier of\n    inverseRoleLabel: is customer of\n\n  - '@id': fablab:a25500e0-0106-43cd-8cbb-e74779488835\n    '@type': AgentRelationshipRole\n    roleLabel: mentors\n    inverseRoleLabel: has mentor\n\n  # Relationships\n\n  - '@id': fablab:6b97b1be-8e07-44ac-82e5-214f1b2aaf33\n    '@type': AgentRelationship\n    subject: https://alice.example/\n    relationship: fablab:52f0e212-3c4f-4d27-b345-5e964c135824 # member\n    object: https://fablab.example/\n\n  - '@id': fablab:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': AgentRelationship\n    subject: https://coop.example/\n    relationship: fablab:02b39a30-3e04-4305-9656-7f261aa63c84 # trading partner\n    object: https://fablab.example/\n    note: The coop is a supplier of tools for the fablab.\n\n  - '@id': fablab:6f438393-7f87-4914-806c-e23a4fd15e89\n    '@type': AgentRelationship\n    subject: https://alice.example/\n    relationship: fablab:a25500e0-0106-43cd-8cbb-e74779488835 # mentor\n    object: https://bob.example/\n    inScopeOf: https://fablab.example/\n    note: Alice mentors Bob at the fablab.\n</code></pre>"},{"location":"examples/ex-complex/","title":"Plan - Produce - Exchange Examples","text":""},{"location":"examples/ex-complex/#plan-from-recipe-with-production-and-exchange","title":"Plan from recipe with production and exchange","text":"<p>This shows a simple recipe that includes both a process and the exchange of work that is input to the process for currency.</p> <p></p> <pre><code># Example: Simple recipe with both process and exchange\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    doc: https://documenters.example\n\n'@graph':\n\n  # the recipe\n\n  - '@id': urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    '@type': ResourceSpecification\n    name: Training handout\n    substitutable: false\n\n  - '@id': urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86\n    '@type': ResourceSpecification\n    name: Technical writing # a skill\n\n  - '@id': urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': RecipeFlow\n    recipeOutputOf: urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    action: produce\n    resourceConformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # the handout spec\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': RecipeProcess\n    name: Write and format training handout\n\n  - '@id': urn:uuid:60f4204e-b8d2-4026-8577-102c3f82c0af\n    '@type': RecipeFlow\n    recipeInputOf: urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf # the recipe process\n    recipeClauseOf: urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb # the recipe exchange\n    action: work\n    resourceConformsTo: urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # technical writing\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 15\n\n  - '@id': urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb\n    '@type': RecipeExchange\n    name: Exchange documentation work for FairCoin\n\n  - '@id': urn:uuid:3129ca8b-fcda-45be-bbda-294dc924d3b9\n    '@type': RecipeFlow\n    recipeReciprocalClauseOf: urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb # the recipe exchange\n    action: transfer\n    resourceConformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 300\n\n  # the plan\n\n  - '@id': doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    '@type': Plan\n    name: X Training Handout and Payment\n    note: Write and format the training handout, payment for writing work.\n    due: 2019-04-08T17:00:00-5:00\n    created: 2019-04-01T10:35:00-5:00\n\n  - '@id': doc:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': Commitment\n    independentDemandOf: doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f # the plan\n    outputOf: doc:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: produce\n    provider: https://documenters.example/\n    receiver: https://documenters.example/\n    resourceConformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # training handout\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': doc:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Write and format X training handout\n    plannedWithin: doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f # the plan\n\n  - '@id': doc:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': Commitment\n    inputOf: doc:02b39a30-3e04-4305-9656-7f261aa63c84\n    clauseOf: urn:uuid:583e83d9-a46d-44ff-bd71-88513a1d83c0\n    action: work\n    provider: https://alice.example/\n    receiver: https://documenters.example/\n    resourceConformsTo: urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 20 # the estimate for this particular work is higher than the generic recipe\n\n  - '@id': urn:uuid:583e83d9-a46d-44ff-bd71-88513a1d83c0\n    '@type': Agreement\n    name: Exchange technical documentation work for FairCoin\n\n  - '@id': doc:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': Commitment\n    plannedWithin: doc:8e5fe80d-a769-4bd5-89e5-2136d33eab9f # the plan\n    reciprocalClauseOf: doc:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: transfer\n    provider: https://documenters.example/\n    receiver: https://alice.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 400 # the plan payment is adjusted from the generic recipe\n</code></pre>"},{"location":"examples/ex-complex/#transportation-with-transfer","title":"Transportation with transfer","text":"<p>Bob purchases 30kg of apples from Alice and Claudia transports them (FOB destination).  This illustrates an implied transfer of custody, to keep the overall flow simpler.  (The example without the implied transfer is shown after this one.)</p> <p></p> <p><pre><code># Transportation with transfer\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    bob: https://bob.example/\n    claudia: https://claudia.example/\n    geo: https://location.example/\n\n'@graph':\n\n# Bob purchases 30kg of apples from Alice and Claudia transports them (FOB destination)\n\n  # Alice's resource before\n\n  - '@id': alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    locatedAt: geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9\n    primaryAccountable: https://alice.example\n    accountingQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 230\n    onhandQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 230\n\n  # alice commits to transfer some apples to bob\n\n  - '@id': urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86\n    '@type': Commitment\n    action: transfer\n    resourceConformsTo: http://www.wikidata.org/entity/Q41777871Q41777871 # haralson apples\n    provider: https://alice.example/\n    receiver: https://bob.example/\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 30\n\n  # alice and claudia agree on transportation of the apples\n\n  - '@id': urn:uuid:f325a950-5737-488d-b122-8f21114d0eb0\n    '@type': Agreement\n    note: exchange transportation service for currency\n    stipulates:\n\n    - '@id': urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a\n      '@type': Commitment\n      note: Transportation of alice's apples from alice's location to bob's location\n      action: deliverService\n      resourceClassifiedAs: http://www.wikidata.org/entity/Q7590 # transportation service\n      provider: https://claudia.example/\n      receiver: https://alice.example/\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    stipulatesReciprocal:\n\n    - '@id': urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083\n      '@type': Commitment\n      action: transfer\n      resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US Dollar\n      provider: https://alice.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 10\n\n  # claudia transports the apples in two hops\n\n  - '@id': claudia:633f6e56-6c7d-4a5b-b9c9-1a8adafd8960\n    '@type': Process\n    note: Claudia transports the apples to the distribution center\n    hasInput:\n\n    - '@id': claudia:fd399b37-0740-4a68-a184-1e655021ca21\n      '@type': EconomicEvent\n      action: pickup # with implied transfer custody, since different provider/receiver\n      resourceInventoriedAs: alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n      toResourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95\n      provider: https://alice.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        hasUnit: kilogram\n        hasNumericalValue: 30\n\n    hasOutput:\n\n    - '@id': claudia:57f1c1d0-432e-4bfa-9d32-002b8955a708\n      '@type': EconomicEvent\n      action: dropoff # no implied transfer, one agent and one resource\n      resourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95\n      provider: https://claudia.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        hasUnit: kilogram\n        hasNumericalValue: 30\n\n  - '@id': claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c\n    '@type': Process\n    note: Claudia transports the apples from the distribution center to the receiver\n    hasInput:\n\n    - '@id': claudia:856c43b1-0a63-445f-a56f-707b257f086e\n      '@type': EconomicEvent\n      action: pickup\n      resourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95\n      provider: https://claudia.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        hasUnit: kilogram\n        hasNumericalValue: 30\n\n    hasOutput:\n\n    - '@id': claudia:9cb4944b-d26d-4774-a530-d18f2747c0d8\n      '@type': EconomicEvent\n      action: dropoff # implied transfer of custody\n      resourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95\n      toResourceInventoriedAs: bob:9bd19194-a36d-4a1f-896b-8082887962cb\n      provider: https://claudia.example/\n      receiver: https://bob.example/\n      resourceQuantity:\n        hasUnit: kilogram\n        hasNumericalValue: 30\n\n    - '@id': urn:uuid:68cabaf3-deb8-4bd5-a439-798263abe35a\n      '@type': EconomicEvent\n      note: Transportation of alice's apples to bob's location\n      action: deliverService\n      resourceConformsTo: http://www.wikidata.org/entity/Q7590 # transportation service\n      provider: https://claudia.example/\n      receiver: https://alice.example/\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n      fulfills: urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # the commitment\n\n  # receipt of the apples triggers finalizing the transfer of ownership\n\n  - '@id': urn:uuid:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47\n    '@type': EconomicEvent\n    action: transferAllRights\n    resourceClassifiedAs: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    provider: https://alice.example/\n    receiver: https://bob.example/\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 30\n    fulfills: urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # the commitment\n\n  # resources snapshot\n\n  - '@id': alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    locatedAt: geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9\n    primaryAccountable: https://alice.example\n    accountingQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 200\n    onhandQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 200\n\n  - '@id': bob:9bd19194-a36d-4a1f-896b-8082887962cb\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    locatedAt: geo:b52a5815-fae9-43bf-be95-833b95dc0ada\n    primaryAccountable: https://bob.example\n    accountingQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 30\n    onhandQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 30\n\n  - '@id': claudia:27be5cab-d740-4194-9298-1661a69d9d95 # record of claudia's bill of lading on the truck\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    onhandQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 0\n\n  # alice pays claudia for the transportation service\n\n  - '@id': urn:uuid:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    '@type': EconomicEvent\n    action: transfer\n    resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US Dollar\n    resourceInventoriedAs: alice:daa2ec3b-2c1a-4eb1-839f-8dcec1a1f93a # alice's bank account\n    toResourceInventoriedAs: claudia:bd5806d6-4a36-45b9-b3b6-3e7d361a5a14 # claudia's bank account\n    provider: https://alice.example/\n    receiver: https://claudia.example/\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 10\n    fulfills: urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 # the commitment\n</code></pre> The following shows a snippet alternative for the transport, where claudia uses alice's id for what is in her custody. <pre><code>  # claudia transports the apples in two hops\n\n  - '@id': claudia:633f6e56-6c7d-4a5b-b9c9-1a8adafd8960\n    '@type': Process\n    note: Claudia transports the apples to the distribution center\n    hasInput:\n\n    - '@id': claudia:fd399b37-0740-4a68-a184-1e655021ca21\n      '@type': EconomicEvent\n      action: pickup\n      resourceInventoriedAs: alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n      provider: https://alice.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        hasUnit: kilogram\n        hasNumericalValue: 30\n\n    hasOutput:\n\n    - '@id': claudia:57f1c1d0-432e-4bfa-9d32-002b8955a708\n      '@type': EconomicEvent\n      action: dropoff\n      resourceInventoriedAs: alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n      provider: https://claudia.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        hasUnit: kilogram\n        hasNumericalValue: 30\n\n  - '@id': claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c\n    '@type': Process\n    note: Claudia transports the apples from the distribution center to the receiver\n    hasInput:\n\n    - '@id': claudia:856c43b1-0a63-445f-a56f-707b257f086e\n      '@type': EconomicEvent\n      action: pickup\n      resourceInventoriedAs: alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n      provider: https://claudia.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        hasUnit: kilogram\n        hasNumericalValue: 30\n\n    hasOutput:\n\n    - '@id': claudia:9cb4944b-d26d-4774-a530-d18f2747c0d8\n      '@type': EconomicEvent\n      action: dropoff\n      resourceInventoriedAs: alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n      toResourceInventoriedAs: bob:9bd19194-a36d-4a1f-896b-8082887962cb\n      provider: https://claudia.example/\n      receiver: https://bob.example/\n      resourceQuantity:\n        hasUnit: kilogram\n        hasNumericalValue: 30\n\n    - '@id': urn:uuid:68cabaf3-deb8-4bd5-a439-798263abe35a\n      '@type': EconomicEvent\n      note: Transportation of alice's apples from alice's location to bob's location\n      action: deliverService\n      resourceConformsTo: http://www.wikidata.org/entity/Q7590 # transportation service\n      provider: https://claudia.example/\n      receiver: https://alice.example/\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n      fulfills: urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # the commitment\n</code></pre> It is also valid to do this with an explicit transfer of custody, as below:</p> <p></p> <pre><code># Transportation with transfer\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    bob: https://bob.example/\n    claudia: https://claudia.example/\n\n'@graph':\n\n# Bob purchases 30kg of apples from Alice and Claudia transports them (FOB destination)\n\n  # Alice's resource before\n\n  - '@id': alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    locatedAt: geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9\n    primaryAccountable: https://alice.example\n    accountingQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 230\n    onhandQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 230\n\n  # alice commits to transfer some apples to bob\n\n  - '@id': urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86\n    '@type': Commitment\n    action: transfer\n    resourceConformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    provider: https://alice.example/\n    receiver: https://bob.example/\n    resourceQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 30\n\n  # alice and claudia agree on transportation of the apples\n\n  - '@id': urn:uuid:f325a950-5737-488d-b122-8f21114d0eb0\n    '@type': Agreement\n    skos:note: exchange transportation service for currency\n    stipulates:\n\n    - '@id': urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a\n      '@type': Commitment\n      skos:note: Transportation of alice's apples from alice's location to bob's location\n      action: deliverService\n      resourceClassifiedAs: http://www.wikidata.org/entity/Q7590 # transportation service\n      provider: https://claudia.example/\n      receiver: https://alice.example/\n      resourceQuantity:\n        om2:hasUnit: om2:one\n        om2:hasNumericalValue: 1\n\n    stipulatesReciprocal:\n    - '@id': urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083\n      '@type': Commitment\n      action: transfer\n      resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US Dollar\n      provider: https://alice.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        om2:hasUnit: om2:one\n        om2:hasNumericalValue: 10\n\n  # alice transfers custody of the apples to claudia for transportation\n\n  - '@id': urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f87\n    '@type': EconomicEvent\n    action: transferCustody # this is an event that was implied in the first example\n    resourceClassifiedAs: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    provider: https://alice.example/\n    receiver: https://claudia.example/\n    resourceInventoriedAs: alice:21f361a6-2375-46bb-b192-c21b5ba833bf # alice's apples\n    toResourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95 # claudia's bill of lading on the truck\n    resourceQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 30\n\n  # resources snapshot\n\n  - '@id': alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n    '@type': EconomicResource\n    classifiedAs: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    locatedAt: geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9\n    primaryAccountable: https://alice.example\n    accountingQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 230\n    onhandQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 200\n\n  - '@id': claudia:27be5cab-d740-4194-9298-1661a69d9d95\n    '@type': EconomicResource\n    classifiedAs: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    onhandQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 30\n\n  # claudia transports the apples in two hops\n\n  - '@id': claudia:633f6e56-6c7d-4a5b-b9c9-1a8adafd8960\n    '@type': Process\n    skos:note: Claudia transports the apples\n    hasInput:\n\n    - '@id': claudia:fd399b37-0740-4a68-a184-1e655021ca21\n      '@type': EconomicEvent\n      action: pickup\n      resourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95\n      provider: https://claudia.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        om2:hasUnit: om2:kilogram\n        om2:hasNumericalValue: 30\n\n    hasOutput:\n\n    - '@id': claudia:57f1c1d0-432e-4bfa-9d32-002b8955a708\n      '@type': EconomicEvent\n      action: dropoff\n      resourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95\n      provider: https://claudia.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        om2:hasUnit: om2:kilogram\n        om2:hasNumericalValue: 30\n\n  - '@id': claudia:c404cff5-19c7-453d-b0d8-d8e96055bd0c\n    '@type': Process\n    skos:note: Claudia transports the apples\n    hasInput:\n\n    - '@id': claudia:856c43b1-0a63-445f-a56f-707b257f086e\n      '@type': EconomicEvent\n      action: pickup\n      resourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95\n      provider: https://claudia.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        om2:hasUnit: om2:kilogram\n        om2:hasNumericalValue: 30\n\n    hasOutput:\n\n    - '@id': claudia:9cb4944b-d26d-4774-a530-d18f2747c0d8\n      '@type': EconomicEvent\n      action: dropoff\n      resourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95\n      provider: https://claudia.example/\n      receiver: https://claudia.example/\n      resourceQuantity:\n        om2:hasUnit: om2:kilogram\n        om2:hasNumericalValue: 30\n\n    - '@id': urn:uuid:68cabaf3-deb8-4bd5-a439-798263abe35a\n      '@type': EconomicEvent\n      skos:note: Transportation of alice's apples to bob's location\n      action: deliverService\n      resourceConformsTo: http://www.wikidata.org/entity/Q7590 # transportation service\n      provider: https://claudia.example/\n      receiver: https://alice.example/\n      resourceQuantity:\n        om2:hasUnit: om2:one\n        om2:hasNumericalValue: 1\n      fulfills: urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # the commitment\n\n  # bob receives the apples\n\n  - '@id': urn:uuid:7a63ea10-b1c3-441a-9a08-fb8630c02614\n    '@type': EconomicEvent\n    action: transferCustody # this is the event that was implied in the first example\n    resourceConformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    resourceInventoriedAs: claudia:27be5cab-d740-4194-9298-1661a69d9d95\n    toResourceInventoriedAs: bob:9bd19194-a36d-4a1f-896b-8082887962cb\n    provider: https://claudia.example/\n    receiver: https://bob.example/\n    resourceQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 30\n\n  # receipt of the apples triggers finalizing the transfer of ownership\n\n  - '@id': urn:uuid:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47\n    '@type': EconomicEvent\n    action: transferAllRights\n    resourceClassifiedAs: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    provider: https://alice.example/\n    receiver: https://bob.example/\n    resourceQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 30\n    fulfills: urn:uuid:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # the commitment\n\n  # resources snapshot\n\n  - '@id': alice:21f361a6-2375-46bb-b192-c21b5ba833bf\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    locatedAt: geo:70ee3034-0d15-4471-8ee3-91c60bb1a9c9 # only the possessed amount\n    primaryAccountable: https://alice.example\n    accountingQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 200\n    onhandQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 200\n\n  - '@id': bob:9bd19194-a36d-4a1f-896b-8082887962cb\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    trackingIdentifier: lot-alice-apples-2018-10-11\n    locatedAt: geo:b52a5815-fae9-43bf-be95-833b95dc0ada # only the possessed amount\n    primaryAccountable: https://bob.example\n    accountingQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 30\n    onhandQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 30\n\n  - '@id': claudia:27be5cab-d740-4194-9298-1661a69d9d95 # claudia's bill of lading on the truck\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q41777871 # haralson apples\n    onhandQuantity:\n      om2:hasUnit: om2:kilogram\n      om2:hasNumericalValue: 0\n\n  # alice pays claudia for the transportation service\n\n  - '@id': urn:uuid:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    '@type': EconomicEvent\n    action: transfer\n    resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US Dollar\n    resourceInventoriedAs: alice:daa2ec3b-2c1a-4eb1-839f-8dcec1a1f93a # alice's bank account\n    toResourceInventoriedAs: claudia:bd5806d6-4a36-45b9-b3b6-3e7d361a5a14 # claudia's bank account\n    provider: https://alice.example/\n    receiver: https://claudia.example/\n    resourceQuantity:\n      om2:hasUnit: om2:one\n      om2:hasNumericalValue: 10\n    fulfills: urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083 # the commitment\n</code></pre>"},{"location":"examples/ex-complex/#manufacturing-and-workflow","title":"Manufacturing and workflow","text":"<p>A component is produced (manufacturing pattern) and tested (workflow pattern).  QT (\"quality testing\") gives pass and/or fail outputs.  The failed components are passed back into a source resource (because it can be re-used as an input as part of the QT process, to be used in this or the next manufacturing run.</p> <p>The QT needs the stage and state of the input component resource, because QT would only be done on components that are made and not tested yet.  By the same token, components would only be sent into the next assembly process if they have passed the QT process/stage (not part of this example).</p> <p>This example includes recipe, plan, and actuals.</p> <p></p> <pre><code># Example: Workflow recipe, plan, execution, including stage and state usage\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - mfg: https://manufacturing.example/\n\n'@graph':\n\n  # specifications\n\n  - '@id': urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    '@type': ResourceSpecification\n    name: Bucket white 5 gallon\n    defaultUnitOfResource: one\n    substitutable: true\n\n  - '@id': urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58\n    '@type': ResourceSpecification\n    name: Thermoplastic polymer white\n    DefaultUnitOfResource: kilogram\n    substitutable: true\n\n  - '@id': urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a\n    '@type': ResourceSpecification\n    name: Injection molding machine\n    defaultUnitOfResource: one\n    defaultUnitOfEffort: hour\n    substitutable: true\n\n  - '@id': mfg:27be5cab-d740-4194-9298-1661a69d9d95\n    '@type': ProcessSpecification\n    name: Make injection molded buckets\n\n  - '@id': mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5\n    '@type': ProcessSpecification\n    name: QT injection molded buckets\n\n  # resources before\n\n  - '@id': mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9\n    '@type': EconomicResource\n    name: Bucket white 5 gallon\n    conformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 320\n    state: pass\n    stage: mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # QT\n\n  - '@id': mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86\n    '@type': EconomicResource\n    name: Thermoplastic polymer white\n    conformsTo: urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58\n    accountingQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 2455\n\n  - '@id': mfg:23799c14-c368-4653-a584-83bf9ae8b82a\n    '@type': EconomicResource\n    name: Injection molding maching\n    conformsTo: urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a\n    trackingIdentifier: DDE098989099911\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    unitOfEffort: hour\n\n  # the recipe (here the recipe runs \"backwards\" from the final product, similar to a BOM)\n\n  - '@id': mfg:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': RecipeFlow\n    recipeOutputOf: mfg:a8356625-bf64-4c16-9099-28aa1b718c4b\n    action: modify\n    state: pass\n    resourceConformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 500\n\n  - '@id': mfg:54b814ee-62dc-40c1-bb96-f8582aa4f771\n    '@type': RecipeFlow\n    recipeOutputOf: mfg:a8356625-bf64-4c16-9099-28aa1b718c4b\n    action: produce # fail\n    resourceConformsTo: urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 0\n\n  - '@id': mfg:a8356625-bf64-4c16-9099-28aa1b718c4b\n    '@type': RecipeProcess\n    name: QT bucket white 5 gallon - minimum run\n    processConformsTo: mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # the process specification\n    time:hasDuration:\n      time:unitType unit:Hour\n      time:numericDuration 1\n\n  - '@id': mfg:2342d456-5d6f-46d5-a7ed-3ac7bfd5a86c\n    '@type': RecipeFlow\n    recipeInputOf: mfg:a8356625-bf64-4c16-9099-28aa1b718c4b\n    action: accept\n    resourceConformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket\n    stage: mfg:27be5cab-d740-4194-9298-1661a69d9d95 # 'make' process specification\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 500\n\n  - '@id': mfg:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': RecipeFlow\n    recipeOutputOf: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    action: produce\n    resourceConformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 500\n\n  - '@id': mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': RecipeProcess\n    name: Make bucket white 5 gallon - minimum run\n    processConformsTo: mfg:27be5cab-d740-4194-9298-1661a69d9d95 # the process specification\n    time:hasDuration:\n      time:unitType unit:Hour\n      time:numericDuration 7\n\n  - '@id': mfg:9bd19194-a36d-4a1f-896b-8082887962cb\n    '@type': RecipeFlow\n    recipeInputOf: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    action: consume\n    resourceConformsTo: urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 450\n\n  - '@id': mfg:60f4204e-b8d2-4026-8577-102c3f82c0af\n    '@type': RecipeFlow\n    recipeInputOf: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    action: use\n    resourceConformsTo: urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # injection molding machine\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 5.5\n\n  # the plan (shown running \"forwards\")\n\n  - '@id': mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    '@type': Plan\n    name: Buckets run number 381\n    due: 2019-04-08T17:00:00-5:00\n\n  - '@id': mfg:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': Commitment\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 900\n\n  - '@id': mfg:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': Commitment\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: use\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a # injection molding machine\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 11\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Make bucket white 5 gallon\n    plannedWithin: mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    basedOn: mfg:27be5cab-d740-4194-9298-1661a69d9d95 # the process specification\n    time:hasDuration:\n      time:unitType unit:Hour\n      time:numericDuration 14\n\n  - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': Commitment\n    outputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: produce\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1000\n\n  - '@id': mfg:fbff9852-36ca-4364-a943-bc0b49e1cab5\n    '@type': Commitment\n    inputOf: mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    action: accept\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket\n    stage: mfg:27be5cab-d740-4194-9298-1661a69d9d95 # 'make' process specification\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1000\n\n  - '@id': mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    '@type': Process\n    name: QT bucket white 5 gallon\n    plannedWithin: mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    basedOn: mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # the process specification\n    time:hasDuration:\n      time:unitType unit:Hour\n      time:numericDuration 14\n\n  - '@id': mfg:21f361a6-2375-46bb-b192-c21b5ba833bf\n    '@type': Commitment\n    independentDemandOf: mfg:8e5fe80d-a769-4bd5-89e5-2136d33eab9f # the plan\n    outputOf: mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    action: modify\n    state: pass\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # bucket\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1000\n\n  - '@id': mfg:21f361a6-2375-46bb-b192-c21b5ba833bg\n    '@type': Commitment\n    outputOf: mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    action: produce\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # polymer\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 0\n\n  # manufacture and test the buckets according to plan\n\n  - '@id': mfg:e18c808c-929a-450d-9d0d-3b3f531bc126\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # planned make process\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # polymer stock\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 925\n\n  - '@id': mfg:5d2fe7da-b91b-4dab-91d9-68db80c1feb7\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # planned make process\n    action: use\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:23799c14-c368-4653-a584-83bf9ae8b82a # the machine\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 10.7\n\n  - '@id': mfg:8791913c-0152-4c32-bb3f-f25d61df736c\n    '@type': EconomicEvent\n    outputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # planned make process\n    action: produce\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # buckets\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1000\n\n  - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': EconomicEvent\n    inputOf: mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # planned qt process\n    action: accept\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 #buckets\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1000\n\n  - '@id': mfg:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': EconomicEvent\n    outputOf: mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # planned qt process\n    action: modify\n    state: pass\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # buckets\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 998\n\n  - '@id': mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicEvent\n    outputOf: mfg:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # planned qt process\n    action: produce\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86 # polymer stock\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 1.8\n\n  # resources after\n\n  - '@id': mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9\n    '@type': EconomicResource\n    name: Bucket white 5 gallon\n    conformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1318\n    state: pass\n    stage: mfg:6fb358a3-2859-4d6a-a4fa-431603ee70f5 #QT\n\n  - '@id': mfg:6b5bc786-b9ed-4189-b34f-5ef7d10f1f86\n    '@type': EconomicResource\n    name: Thermoplastic polymer white\n    conformsTo: urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58\n    accountingQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 1531.8\n\n  - '@id': mfg:23799c14-c368-4653-a584-83bf9ae8b82a\n    '@type': EconomicResource\n    name: Injection molding maching\n    conformsTo: urn:uuid:c7897c39-7f05-4a5d-a487-80e130a2414a\n    trackingIdentifier: DDE098989099911\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    unitOfEffort: hour\n</code></pre>"},{"location":"examples/ex-exchange/","title":"Transfer and Exchange Examples","text":""},{"location":"examples/ex-exchange/#exchange-agreement","title":"Exchange agreement","text":"<p>An exchange agreement with commitments.</p> <p></p> <pre><code># Example: Simple exchange agreement\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    bob: https://bob.example/\n\n'@graph':\n\n  # Exchange agreement with commitments\n\n  - '@id': alice:57f1c1d0-432e-4bfa-9d32-002b8955a708\n    '@type': Agreement\n    note: Alice commits to giving Bob 50 kg of apples in exchange for 10 liters of apple cider.\n\n  - '@id': alice:2342d456-5d6f-46d5-a7ed-3ac7bfd5a86c\n    '@type': Commitment\n    clauseOf: alice:57f1c1d0-432e-4bfa-9d32-002b8955a708\n    action: transfer\n    provider: https://alice.example/\n    receiver: https://bob.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q89 # apples\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 50\n\n  - '@id': bob:fd399b37-0740-4a68-a184-1e655021ca21\n    '@type': Commitment\n    clauseOf: alice:57f1c1d0-432e-4bfa-9d32-002b8955a708\n    action: transfer\n    provider: https://bob.example/\n    receiver: https://alice.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q5977438 # soft apple cider\n    resourceQuantity:\n      hasUnit: litre\n      hasNumericalValue: 10\n</code></pre>"},{"location":"examples/ex-exchange/#retail-exchange","title":"Retail exchange","text":"<p>An exchange without prior commitments.  Note we are still using the Agreement to tie together the reciprocal events, even there were no commitments ahead of time.</p> <p></p> <pre><code># Example: Simple retail exchange without commitments\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - carol: https://carol.example/\n    store: https://store.example/\n\n'@graph':\n\n  - '@id': store:ac9ec98d-db80-44dc-97be-7aa149b2fe5d\n    '@type': Agreement\n    note: Carol purchased a new bucket at the hardware store and paid 5 dollars for it.\n\n  - '@id': store:a8356625-bf64-4c16-9099-28aa1b718c4b\n    '@type': EconomicEvent\n    realizationOf: store:ac9ec98d-db80-44dc-97be-7aa149b2fe5d\n    action: transfer\n    provider: https://store.example/\n    receiver: https://carol.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q47107 # bucket\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': store:2342d456-5d6f-46d5-a7ed-3ac7bfd5a86c\n    '@type': EconomicEvent\n    reciprocalRealizationOf: store:ac9ec98d-db80-44dc-97be-7aa149b2fe5d\n    action: transfer\n    provider: https://carol.example/\n    receiver: https://store.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US dollar\n    resourceInventoriedAs: carol:e56fd654-7b94-4d96-8e60-de39e08329a7 # Carol's bank account\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 5\n</code></pre>"},{"location":"examples/ex-exchange/#crypto-currency-transfer","title":"Crypto-currency transfer","text":"<p>A simple transfer of a currency from one agent to another.</p> <p></p> <pre><code># Transfer of crypto-currency, ignoring the fee, but to record time involved in the transfer validation process\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - bob: https://bob.example/\n    alice: https://alice.example/\n    fair: https://faircoin.example/\n\n'@graph':\n\n  # accounts before\n\n  - '@id': fair:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead\n    '@type': EconomicResource\n    note: Alice's wallet address\n    conformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 540\n\n  - '@id': fair:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    '@type': EconomicResource\n    note: Bob's wallet address\n    conformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 480\n\n  # transfer from Alice to Bob\n\n  - '@id': urn:uuid:e5afaa28-1080-4912-835b-46883efb83e6\n    '@type': EconomicEvent\n    action: transfer\n    resourceConformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    resourceInventoriedAs: fair:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead # Alice's wallet address\n    toResourceInventoriedAs: fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 # Bob's wallet address\n    provider: https://alice.example\n    receiver: https://bob.example\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 100\n    hasPointInTime: 2019-04-18T8:30:08-5:00\n\n  # accounts after\n\n  - '@id': fair:b75d8f6a-e2df-4e52-b36d-1a22a66f4ead\n    '@type': EconomicResource\n    note: Alice's wallet address\n    conformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 440\n\n  - '@id': fair:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    '@type': EconomicResource\n    note: Bob's wallet address\n    conformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 580\n</code></pre>"},{"location":"examples/ex-exchange/#moving-crypto-currency","title":"Moving crypto-currency","text":"<p>A simple move of a currency from one account to another by one agent.</p> <p></p> <pre><code># Move of crypto-currency for one agent, ignoring the fee\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - bob: https://bob.example/\n    fair: https://faircoin.example/\n\n'@graph':\n\n  # accounts before\n\n  - '@id': fair:6fb358a3-2859-4d6a-a4fa-431603ee70f5\n    '@type': EconomicResource\n    note: Bob's first wallet address\n    conformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 540\n\n  - '@id': fair:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    '@type': EconomicResource\n    note: Bob's second wallet address\n    conformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 480\n\n  # move between Bob's accounts\n\n  - '@id': urn:uuid:e5afaa28-1080-4912-835b-46883efb83e6\n    '@type': EconomicEvent\n    action: move\n    resourceconformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    resourceInventoriedAs: fair:6fb358a3-2859-4d6a-a4fa-431603ee70f5 # Bob's first wallet address\n    toResourceInventoriedAs: fair:3be5259d-10f0-431c-9fec-9c0c15a461d3 # Bob's second wallet address\n    provider: https://bob.example\n    receiver: https://bob.example\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 100\n    hasPointInTime: 2019-04-18T8:30:08-5:00\n\n  # accounts after\n\n  - '@id': fair:b6fb358a3-2859-4d6a-a4fa-431603ee70f5\n    '@type': EconomicResource\n    note: Bob's first wallet address\n    conformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 440\n\n  - '@id': fair:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    '@type': EconomicResource\n    note: Bob's second wallet address\n    conformsTo: http://www.wikidata.org/entity/Q21002847 # FairCoin\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 580\n</code></pre>"},{"location":"examples/ex-exchange/#checkout-book","title":"Checkout book","text":"<p>Checking out and checking back in a library book (a loan).</p> <p></p> <pre><code># Checking out a book\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - library: https://library.example/\n    bob: https://bob.example/\n\n'@graph':\n\n  # resource before\n\n  - '@id': library:2402b57c-1c45-423a-acb2-f50961c97d65\n    '@type': EconomicResource\n    note: Valueflows cookbook ISBN:1234 copy 2\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    onhandQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  # check out\n\n  - '@id': library:f47064eb-7120-4b31-b882-770165901fe6\n    '@type': Agreement\n    note: loaning Valueflows cookbook to Bob\n\n  - '@id': urn:uuid:54b814ee-62dc-40c1-bb96-f8582aa4f771\n    '@type': EconomicEvent\n    realizationOf: library:f47064eb-7120-4b31-b882-770165901fe6\n    action: transferCustody\n    resourceInventoriedAs: library:2402b57c-1c45-423a-acb2-f50961c97d65\n    hasPointInTime: 2019-04-18T8:00:00-5:00\n    provider: https://library.example/\n    receiver: https://bob.example/\n    resourceQuantity: \n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': urn:uuid:98c2bfeb-9c70-4801-896c-4646b975a7d9\n    '@type': Commitment\n    clauseOf: library:f47064eb-7120-4b31-b882-770165901fe6\n    action: transferCustody\n    resourceInventoriedAs: library:2402b57c-1c45-423a-acb2-f50961c97d65\n    provider: https://bob.example/\n    receiver: https://library.example/\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    due: 2019-05-17T18:00:00-5:00\n\n  # resource after check out\n\n  - '@id': library:2402b57c-1c45-423a-acb2-f50961c97d65\n    '@type': EconomicResource\n    note: Valueflows cookbook ISBN:1234 copy 2\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    onhandQuantity:\n      hasUnit: one\n      hasNumericalValue: 0\n\n  # return\n\n  - '@id': urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n    '@type': EconomicEvent\n    realizationOf: library:f47064eb-7120-4b31-b882-770165901fe6\n    action: transferCustody\n    resourceInventoriedAs: library:2402b57c-1c45-423a-acb2-f50961c97d65\n    provider: https://bob.example/\n    receiver: https://library.example/\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    hasPointInTime: 2019-05-14T10:20:00-5:00\n    fulfills: urn:uuid:98c2bfeb-9c70-4801-896c-4646b975a7d9 # the commitment\n\n  # resource after return\n\n  - '@id': library:2402b57c-1c45-423a-acb2-f50961c97d65\n    '@type': EconomicResource\n    note: Valueflows cookbook ISBN:1234 copy 2\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    onhandQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre>"},{"location":"examples/ex-exchange/#claim-for-income","title":"Claim for income","text":"<p>Logged work triggers a claim for future income distribution for that work.</p> <p></p> <pre><code># Example: Claim (simple)\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - bob: https://bob.example/\n    mfg: https://manufacturer.example/\n\n'@graph':\n\n  # Bob does some work to create a product that the mfg team wishes to sell on the marketplace\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c83\n    '@type': EconomicEvent\n    action: work\n    provider: https://bob.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q192047 # machining\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 7\n    hasBeginning: 2018-10-14T8:00:00-0:00\n    hasEnd: 2018-10-14T15:00:00-0:00\n\n  # this triggers a claim for payment in the future based on an income distribution agreement among the mfg group\n\n  - '@id': mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58\n    '@type': Claim\n    action: transfer\n    provider: https://manufacturing.example/\n    receiver: https://bob.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q1104069 # Canadian dollar\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 140\n    created: 2018-10-14T15:30:00-0:00\n    triggeredBy: mfg:02b39a30-3e04-4305-9656-7f261aa63c83\n\n  # half of the manufactured product is sold, and income is distributed\n\n  - '@id': mfg:c7897c39-7f05-4a5d-a487-80e130a2414a\n    '@type': EconomicEvent\n    action: transfer\n    provider: https://manufacturing.example/\n    receiver: https://bob.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q1104069 # Canadian dollar\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 70 # partially settles the claim\n    hasPointInTime: 2018-10-25T09:30:00-0:00\n    settles: mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da58 # the claim\n</code></pre>"},{"location":"examples/ex-exchange/#car-rental","title":"Car Rental","text":"<p>Renting a car as a service, with transfer of custody.</p> <p></p> <pre><code># Example: Car rental\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - ahmed: https://ahmed.example/\n    car: https://car-rental.example/\n\n'@graph':\n\n  # Ahmed rents a car for a week\n\n  # resource before\n\n  - '@id': car:2402b57c-1c45-423a-acb2-f50961c9df89\n    '@type': EconomicResource\n    trackingIdentifier: VIN 43187 # a specific car\n    classifiedAs: midsize\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    onhandQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  # schedule rental\n\n  - '@id': car:f47064eb-7120-4b31-b882-770165901fe6\n    '@type': Agreement\n    note: renting midsize car for a week\n\n  - '@id': car:3129ca8b-fcda-45be-bbda-294dc924r8f8\n    '@type': Commitment\n    clauseOf: car:f47064eb-7120-4b31-b882-770165901fe6\n    action: deliverService\n    resourceConformsTo: http://www.wikidata.org/entity/Q110464531 # short term rental\n    hasBeginning: 2019-04-18T8:00:00-5:00\n    hasEnd: 2019-04-25T9:00:00-5:00\n    provider: https://car-rental.example/\n    receiver: https://ahmed.example/\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': car:3129ca8b-fcda-45be-bbda-294dc924r8f8\n    '@type': Commitment\n    reciprocalClauseOf: car:f47064eb-7120-4b31-b882-770165901fe6\n    action: transfer\n    resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US dollar\n    hasPointInTime: 2019-04-18T8:00:00-5:00\n    provider: https://ahmed.example/\n    receiver: https://car-rental.example/\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 300\n\n  # pick up car\n\n  - '@id': car:3129ca8b-fcda-45be-bbda-294dc924kj87\n    '@type': EconomicEvent\n    fulfills: car:3129ca8b-fcda-45be-bbda-294dc924r8f8\n    reciprocalRealizationOf: car:f47064eb-7120-4b31-b882-770165901fe6\n    action: transfer\n    resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US dollar\n    hasPointInTime: 2019-04-18T8:30:00-5:00\n    provider: https://ahmed.example/\n    receiver: https://car-rental.example/\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 300\n\n  - '@id': urn:uuid:54b814ee-62dc-40c1-bb96-f8582aa4f771\n    '@type': EconomicEvent\n    realizationOf: car:f47064eb-7120-4b31-b882-770165901fe6\n    action: transferCustody\n    resourceInventoriedAs: car:2402b57c-1c45-423a-acb2-f50961c97d65\n    hasPointInTime: 2019-04-18T9:00:00-5:00\n    provider: https://car-rental.example/\n    receiver: https://ahmed.example/\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': urn:uuid:98c2bfeb-9c70-4801-896c-4646b975a7d9\n    '@type': Commitment\n    clauseOf: car:f47064eb-7120-4b31-b882-770165901fe6\n    action: transferCustody\n    resourceInventoriedAs: car:2402b57c-1c45-423a-acb2-f50961c97d65\n    provider: https://ahmed.example/\n    receiver: https://car-rental.example/\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    due: 2019-04-25T9:00:00-5:00\n\n  # resource after pick up\n\n  - '@id': car:2402b57c-1c45-423a-acb2-f50961c9df89\n    '@type': EconomicResource\n    trackingIdentifier: VIN 43187 # a specific car\n    classifiedAs: midsize\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    onhandQuantity:\n      hasUnit: one\n      hasNumericalValue: 0\n\n  # return\n\n  - '@id': urn:uuid:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n    '@type': EconomicEvent\n    realizationOf: car:f47064eb-7120-4b31-b882-770165901fe6\n    action: transferCustody\n    resourceInventoriedAs: car:2402b57c-1c45-423a-acb2-f50961c9df89\n    provider: https://ahmed.example/\n    receiver: https://car-rental.example/\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    hasPointInTime: 2019-04-25T07:20:00-5:00\n    fulfills: urn:uuid:98c2bfeb-9c70-4801-896c-4646b975a7d9 # the commitment\n\n  # resource after return\n\n  - '@id': car:2402b57c-1c45-423a-acb2-f50961c9df89\n    '@type': EconomicResource\n    trackingIdentifier: VIN 43187 # a specific car\n    classifiedAs: midsize\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    onhandQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre>"},{"location":"examples/ex-overview/","title":"Examples Overview","text":"<p>The examples section contains yaml files that are snippets of sample data for some of the functions Valueflows supports.  They aim to add concreteness and detail for people who are exploring the depths of Valueflows, or designing or coding applications or APIs based on Valueflows.</p> <p>Each yaml file is accompanied by a diagram to give an overview of the structure.  The color coded layers of the diagrams correspond to this base model.  The diagrams are not meant to be data models, they are meant to be a sort of flow model, with directionality representing how things happen, not data relationships.</p> <p>The example sections are ordered so they generally build on previous example sections.</p> <p>Note: The data is often incomplete, to try to keep the examples simpler, and pointed towards the issue at hand.  So it could be helpful to skim across different examples.</p>"},{"location":"examples/ex-planning/","title":"Planning Examples","text":""},{"location":"examples/ex-planning/#simple-plan","title":"Simple plan","text":"<p>A plan for creating two different resources needed for one campaign.  The first resource requires two chained processes.</p> <p></p> <pre><code># Example: Simple operational plan\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - printer: https://printer.example/\n\n'@graph':\n\n  - '@id': printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    '@type': Plan\n    name: Anti climate-change campaign materials\n    note: A set of printed materials for the campaign by Students for Peace and Justice\n    due: 2019-04-08T17:00:00-5:00\n    created: 2019-04-01T10:35:00-5:00\n\n  - '@id': printer:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Print climate brochures\n    plannedWithin: printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n\n  - '@id': printer:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': Commitment\n    outputOf: printer:02b39a30-3e04-4305-9656-7f261aa63c84\n    independentDemandOf: printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    action: produce\n    provider: https://printer.example/\n    receiver: https://printer.example/\n    resourceInventoriedAs: printer:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # specific brochures\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1000\n\n  - '@id': printer:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': Commitment\n    inputOf: printer:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://printer.example/\n    receiver: https://printer.example/\n    resourceConformsTo: printer:3129ca8b-fcda-45be-bbda-294dc924d3b9 # paper\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1020\n\n  - '@id': printer:9bd19194-a36d-4a1f-896b-8082887962cb\n    '@type': Process\n    name: Print climate posters\n    plannedWithin: printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n\n  - '@id': printer:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': Commitment\n    outputOf: printer:9bd19194-a36d-4a1f-896b-8082887962cb\n    independentDemandOf: printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    action: produce\n    provider: https://printer.example/\n    receiver: https://printer.example/\n    resourceInventoriedAs: printer:6078f30a-b15b-4b1c-8e77-797abae11378 # specific posters\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 35\n\n  - '@id': printer:60f4204e-b8d2-4026-8577-102c3f82c0af\n    '@type': Commitment\n    inputOf: printer:9bd19194-a36d-4a1f-896b-8082887962cb\n    action: consume\n    provider: https://printer.example/\n    receiver: https://printer.example/\n    resourceConformsTo: printer:e56fd654-7b94-4d96-8e60-de39e08329a7 # paper\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 35\n\n  - '@id': printer:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172\n    '@type': Commitment\n    inputOf: printer:9bd19194-a36d-4a1f-896b-8082887962cb\n    action: use\n    provider: https://printer.example/\n    receiver: https://printer.example/\n    resourceConformsTo: printer:e4783bef-9006-490c-9c03-389272c7444d # printing plate for the specific posters\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 1.5\n\n  - '@id': printer:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b\n    '@type': Process\n    name: Create poster plate\n    plannedWithin: printer:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n\n  - '@id': printer:583e83d9-a46d-44ff-bd71-88513a1d83c0\n    '@type': Commitment\n    outputOf: printer:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b\n    action: produce\n    provider: https://printer.example/\n    receiver: https://printer.example/\n    resourceConformsTo: printer:e4783bef-9006-490c-9c03-389272c7444d # printing plate for the specific posters\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': printer:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47\n    '@type': Commitment\n    inputOf: printer:9bd19194-a36d-4a1f-896b-8082887962cb\n    action: consume\n    provider: https://printer.example/\n    receiver: https://printer.example/\n    resourceInventoriedAs: printer:86ad6e22-7640-4b93-972a-db7177ab2616 # blank printing plate\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre>"},{"location":"examples/ex-planning/#simple-plan-from-recipe","title":"Simple plan from recipe","text":"<p>A plan generated from a recipe, for making a component.</p> <p></p> <pre><code># Example: Simple plan from recipe\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    sensor: https://sensorica.example/\n    open: https://openhardware.example\n\n'@graph':\n\n  # the recipe\n\n  - '@id': urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    '@type': ResourceSpecification\n    name: Delivery fiber\n    note: Optical fiber that connects 2 devices.\n\n  - '@id': urn:uuid:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': RecipeFlow\n    recipeOutputOf: urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    action: produce\n    resourceConformsTo: urn:uuid:3be5259d-10f0-431c-9fec-9c0c15a461d3 # the delivery fiber spec\n    resourceQuantity:\n      hasUnit: metre\n      hasNumericalValue: .5\n\n  - '@id': urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': RecipeProcess\n    name: Make delivery fiber component\n    note: The delivery fiber makes the optical connection between an optical transducer and the sensor [electro-photonics device]. Requires cutting a piece of optical fiber and connectorizing it\n\n  - '@id': urn:uuid:9bd19194-a36d-4a1f-896b-8082887962cb\n    '@type': RecipeFlow\n    recipeInputOf: urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    action: consume\n    resourceConformsTo: http://www.wikidata.org/entity/Q162 # optical fiber\n    resourceQuantity:\n      hasUnit: metre\n      hasNumericalValue: .5\n    note: Optical guide, can be of glass of polymer. Usually it comes in a cylindrical shape. Can be MM (multimode) or SM (single mode)\n\n  - '@id': urn:uuid:60f4204e-b8d2-4026-8577-102c3f82c0af\n    '@type': RecipeFlow\n    recipeInputOf: urn:uuid:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    action: work\n    resourceConformsTo: http://www.wikidata.org/entity/Q640621 # optical engineering\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 2\n\n  # the plan\n\n  - '@id': sensor:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    '@type': Plan\n    name: Delivery fiber\n    note: Make the optical fiber that makes the connection between the device and the transducer.\n    due: 2019-04-08T17:00:00-5:00\n    created: 2019-04-01T10:35:00-5:00\n\n  - '@id': sensor:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': Commitment\n    independentDemandOf: sensor:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    outputOf: sensor:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: produce\n    provider: https://sensorica.example/\n    receiver: https://sensorica.example/\n    resourceConformsTo: urn:uuid:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172 # delivery fiber\n    resourceQuantity:\n      hasUnit: metre\n      hasNumericalValue: .5\n\n  - '@id': sensor:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Make optical fiber component\n    plannedWithin: sensor:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    note: The delivery fiber makes the optical connection between an optical transducer and the sensor [electro-photonics device]. Requires cutting a piece of optical fiber and connectorizing it.\n\n  - '@id': sensor:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': Commitment\n    inputOf: sensor:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://sensorica.example/\n    receiver: https://sensorica.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q162 # optical fiber\n    resourceQuantity:\n      hasUnit: metre\n      hasNumericalValue: .5\n    note: Optical guide, can be of glass of polymer. Usually it comes in a cylindrical shape. Can be MM (multimode) or SM (single mode).\n\n  - '@id': sensor:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': Commitment\n    inputOf: sensor:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: work\n    provider: https://alice.example/\n    receiver: https://sensorica.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q640621 # optical engineering\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 2\n</code></pre>"},{"location":"examples/ex-planning/#fulfillment-and-satisfaction","title":"Fulfillment and satisfaction","text":"<p>Commitments satisfying intents, and economic events fulfilling commitments.  (Note that economic events can also satisfy intents if there is no commitment, although it is not shown in this example.)</p> <p></p> <pre><code># Example: Intent - satisfied by - Commitment - fulfilled by - EconomicEvent\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - bob: https://bob.example/\n    mfg: https://manufacturer.example/\n\n'@graph':\n\n  # A manufacturer makes a plan that includes an intent for some work which \n  # they want someone in their network to commit to doing on Oct. 14 - 15\n\n  - '@id': mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': Intent\n    action: work\n    receiver: https://manufacturing.example/\n    resourceConformsTo: http://www.wikidata.org/entity//Q192047 # machining\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 8\n    hasBeginning: 2018-10-14T8:00:00-0:00\n    hasEnd: 2018-10-15T18:00:00-0:00\n\n  # Bob commits to doing the work on Oct. 14\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Commitment\n    action: work\n    provider: https://bob.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q192047 # machining\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 8\n    hasBeginning: 2018-10-14T8:00:00-0:00\n    hasEnd: 2018-10-14T17:00:00-0:00\n    satisfies: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # the intent\n\n  # Bob does the work in two 4-hour shifts on Oct. 14\n\n  - '@id': mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n    '@type': EconomicEvent\n    action: work\n    provider: https://bob.example/\n    receiver: https://manufacturing.example/\n    resourceConforms: http://www.wikidata.org/entity/Q192047 # machining\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 4\n    hasBeginning: 2018-10-14T8:00:00-0:00\n    hasEnd: 2018-10-14T12:00:00-0:00\n    fulfills: mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # the commitment\n\n  - '@id': mfg:c7897c39-7f05-4a5d-a487-80e130a2414b\n    '@type': EconomicEvent\n    action: work\n    provider: https://bob.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q192047 # machining\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 4\n    hasBeginning: 2018-10-14T13:00:00-0:00\n    hasEnd: 2018-10-14T17:00:00-0:00\n    fulfills: mfg:02b39a30-3e04-4305-9656-7f261aa63c84 # the commitment\n</code></pre>"},{"location":"examples/ex-production/","title":"Production Examples","text":""},{"location":"examples/ex-production/#manufacturing","title":"Manufacturing","text":"<p>Simple one-process manufacturing with typical inputs and outputs.</p> <p></p> <p><pre><code># Example: Simple manufacturing process\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    mfg: https://manufacturing.example/\n\n'@graph':\n\n  # Economic resources before\n\n  - '@id': mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    conformsTo: https://www.opendesk.cc/lean/desk # desk\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 8\n\n  - '@id': mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q219803 # plywood\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 130\n    note: 4 x 8 sheet of 1/2 inch plywood\n\n  - '@id': mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q2101564 # desk design specification\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': mfg:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q13231055 # CNC machine\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  # Production\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Make the lean desk\n\n  - '@id': mfg:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # plywood sheets\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 3\n    hasInput:\n\n    - '@id': mfg:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172\n      '@type': EconomicEvent\n      action: use\n      provider: https://manufacturing.example/\n      receiver: https://manufacturing.example/\n      resourceInventoriedAs: mfg:52f0e212-3c4f-4d27-b345-5e964c135824 # CNC machine\n      effortQuantity:\n        hasUnit: hour\n        hasNumericalValue: 3.5\n\n    - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0fb\n      '@type': EconomicEvent\n      action: cite\n      provider: https://makezine.com/\n      receiver: https://manufacturing.example/\n      resourceInventoriedAs: mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # desk design specification\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    - '@id': mfg:6f438393-7f87-4914-806c-e23a4fd15e89\n      '@type': EconomicEvent\n      action: work\n      provider: https://alice.example/\n      receiver: https://manufacturing.example/\n      resourceConformsTo: http://www.wikidata.org/entity/Q192047 # machining\n      effortQuantity:\n        hasUnit: hour\n        hasNumericalValue: 7\n\n    hasOutput:\n\n    - '@id': mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n      '@type': EconomicEvent\n      action: produce\n      provider: https://manufacturing.example/\n      receiver: https://manufacturing.example/\n      resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # desk\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n  # Economic resources after\n\n  - '@id': mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    resourceConformsTo: https://www.opendesk.cc/lean/desk # desk\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 9\n\n  - '@id': mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q219803 # plywood\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 127\n    note: 4 x 8 sheet of 1/2 inch plywood\n\n  - '@id': mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q2101564 # desk design specification\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': mfg:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q13231055 # CNC machine\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre> Alternate view of this manufacturing example, using the relational directionality between Process and EconomicEvent. <pre><code># Example: Simple manufacturing process\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    mfg: https://manufacturing.example/\n\n'@graph':\n\n  # Production\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Make the lean desk\n\n  - '@id': mfg:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # plywood sheets\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 3\n\n  - '@id': mfg:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: use\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:52f0e212-3c4f-4d27-b345-5e964c135824 # CNC machine\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 3.5\n\n  - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: cite\n    provider: https://makezine.com/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # desk design specification\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': mfg:6f438393-7f87-4914-806c-e23a4fd15e89\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: work\n    provider: https://alice.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q192047 # machining\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 7\n\n  - '@id': mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n    '@type': EconomicEvent\n    outputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: produce\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # desk\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre></p>"},{"location":"examples/ex-production/#service","title":"Service","text":"<p>Simple delivery of a service with typical inputs and outputs.</p> <p></p> <p><pre><code># Example: Simple service process\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    bob: https://bob.example/\n    carol: https://carol.example/\n    training: https://training.example/\n\n'@graph':\n\n  # Economic resources and specifications\n\n  - '@id': training:3129ca8b-fcda-45be-bbda-294dc924d3b9\n    '@type': ResourceSpecification\n    name: 3D printing 1 day hands-on workshop\n    classifiedAs: [ http://www.wikidata.org/entity/Q27556165, http://www.wikidata.org/entity/Q229367 ] # workshop, 3d printing\n\n  - '@id': training:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': ResourceSpecification\n    name: 3D printing workshop handout\n    note: 3D printing class handout for the one day hands-on class, including exercises and review\n\n  - '@id': training:f438393-7f87-4914-806c-e23a4fd15e89\n    '@type': ResourceSpecification\n    name: 3D printing training\n    note: In-house certified training on 3D printing\n\n  - '@id': training:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q53953506 # 3D printer\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': training:6b97b1be-8e07-44ac-82e5-214f1b2aaf33\n    '@type': EconomicResource\n    conformsTo: training:52f0e212-3c4f-4d27-b345-5e964c135824 # 3D printing class handout\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 100\n\n  # Service delivery\n\n  - '@id': training:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Give the 3D printing workshop\n    hasInput:\n\n    - '@id': training:b90b0b77-09a2-42e2-8bd4-e9ae2c1c617\n      '@type': EconomicEvent\n      action: consume\n      provider: https://training.example/\n      receiver: https://training.example/\n      resourceInventoriedAs: training:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # workshop handout\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 3\n\n    - '@id': training:b52a5815-fae9-43bf-be95-833b95dc0adb\n      '@type': EconomicEvent\n      action: use\n      provider: https://training.example/\n      receiver: https://training.example/\n      resourceInventoriedAs: training:e1721a61-cd47-4556-84b9-8b1b81da15bf # 3D printer\n      effortQuantity:\n        hasUnit: hour\n        hasNumericalValue: 8\n\n    - '@id': training:a8236bbb-81e0-422d-9861-56d2417db0fb\n      '@type': EconomicEvent\n      action: work\n      provider: https://training.example/\n      receiver: https://training.example/\n      resourceConformsTo: training:f438393-7f87-4914-806c-e23a4fd15e89 # 3D printer training\n      effortQuantity:\n        hasUnit: hour\n        hasNumericalValue: 8\n\n    hasOutput:\n\n    - '@id': training:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n      '@type': EconomicEvent\n      action: deliverService\n      provider: https://training.example/\n      receiver: https://alice.example/\n      resourceConformsTo: training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    - '@id': training:583e83d9-a46d-44ff-bd71-88513a1d83c0\n      '@type': EconomicEvent\n      action: deliverService\n      provider: https://training.example/\n      receiver: https://bob.example/\n      resourceConformsTo: training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    - '@id': training:e4783bef-9006-490c-9c03-389272c7444d\n      '@type': EconomicEvent\n      action: deliverService\n      provider: https://training.example/\n      receiver: https://carol.example/\n      resourceConformsTo: training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n</code></pre> Alternate view of this service example, using the relational directionality between Process and EconomicEvent. <pre><code># Example: Simple service process\n\n'@context':\n  - h'@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    bob: https://bob.example/\n    carol: https://carol.example/\n    training: https://training.example/\n\n'@graph':\n  # Service delivery\n\n  - '@id': training:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Give the 3D printing workshop\n\n  - '@id': training:b90b0b77-09a2-42e2-8bd4-e9ae2c1c617\n    '@type': EconomicEvent\n    inputOf: training:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://training.example/\n    receiver: https://training.example/\n    resourceInventoriedAs: training:6b97b1be-8e07-44ac-82e5-214f1b2aaf33 # workshop handout\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 3\n\n  - '@id': training:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': EconomicEvent\n    inputOf: training:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: use\n    provider: https://training.example/\n    receiver: https://training.example/\n    resourceInventoriedAs: training:e1721a61-cd47-4556-84b9-8b1b81da15bf # 3D printer\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 8\n\n  - '@id': training:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': EconomicEvent\n    inputOf: training:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: work\n    provider: https://training.example/\n    receiver: https://training.example/\n    resourceConformsTo: training:f438393-7f87-4914-806c-e23a4fd15e89 # 3D printer training\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 8\n\n  - '@id': training:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n    '@type': EconomicEvent\n    outputOf: training:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: deliverService\n    provider: https://training.example/\n    receiver: https://alice.example/\n    resourceConformsTo: training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': training:583e83d9-a46d-44ff-bd71-88513a1d83c0\n    '@type': EconomicEvent\n    outputOf: training:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: deliverService\n    provider: https://training.example/\n    receiver: https://bob.example/\n    resourceConformsTo: training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': training:e4783bef-9006-490c-9c03-389272c7444d\n    '@type': EconomicEvent\n    outputOf: training:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: deliverService\n    provider: https://training.example/\n    receiver: https://carol.example/\n    resourceConformsTo: training:3129ca8b-fcda-45be-bbda-294dc924d3b9 # one day 3D printing workshop\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre></p>"},{"location":"examples/ex-production/#workflow-production","title":"Workflow production","text":"<p>Simple repair process with typical inputs and outputs.  The same economic resource goes into and out of the process(es).</p> <p></p> <p><pre><code># Example: Simple workflow process\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    repair: https://auto-repair.example/\n\n'@graph':\n\n  # Economic resource before\n\n  - '@id': alice:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    resourceConformsTo: http://opensourceecology.org/wiki/Wikispeed_SGT01 # car\n    trackingIdentifier: JHMCD38698S061469\n    primaryAccountable: https://alice.example/\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  # Repair process\n\n  - '@id': repair:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Oil change JHMCD38698S061469\n    note: Check over car, change oil (standard quantity).\n    hasInput:\n\n    - '@id': repair:a8236bbb-81e0-422d-9861-56d2417db0fb\n      '@type': EconomicEvent\n      action: accept\n      provider: https://alice.example/\n      receiver: https://auto-repair.example/\n      resourceInventoriedAs: alice:e1721a61-cd47-4556-84b9-8b1b81da15bf\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    hasOutput:\n\n    - '@id': repair:52f0e212-3c4f-4d27-b345-5e964c135824\n      '@type': EconomicEvent\n      action: modify\n      provider: https://auto-repair.example/\n      receiver: https://alice.example/\n      resourceInventoriedAs: alice:e1721a61-cd47-4556-84b9-8b1b81da15bf\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n  # Economic resource after\n\n  - '@id': alice:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    resourceConformsTo: http://opensourceecology.org/wiki/Wikispeed_SGT01 # car\n    trackingIdentifier: JHMCD38698S061469\n    primaryAccountable: https://alice.example/\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre> Alternate view of this workflow process, using the more relational directionality option. <pre><code># Example: Simple workflow process\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    repair: https://auto-repair.example/\n\n'@graph':\n\n  # Repair process\n\n  - '@id': repair:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Oil change JHMCD38698S061469\n    note: Check over car, change oil (standard quantity).\n\n  - '@id': repair:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': EconomicEvent\n    inputOf: repair:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: accept\n    provider: https://alice.example/\n    receiver: https://auto-repair.example/\n    resourceInventoriedAs: alice:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': repair:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': EconomicEvent\n    inputOf: repair:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: modify\n    provider: https://auto-repair.example/\n    receiver: https://alice.example/\n    resourceInventoriedAs: alice:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre></p>"},{"location":"examples/ex-production/#combine-and-separate","title":"Combine and separate","text":"<p>Simple pack and unpack of resources into and out of a container resource, using <code>combine</code> and <code>separate</code>.</p> <p></p> <p><pre><code># Example: Simple pack and unpack processes\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - med: https://medical.example/\n    wash: https://laundry.example/\n\n'@graph':\n\n  # Economic resources before\n\n  - '@id': med:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q987767 # container\n    trackingIdentifier: cont234\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn:\n\n  - '@id': med:3129ca8b-fcda-45be-bbda-294dc924d3b9\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q89990310 # medical gown\n    trackingIdentifier: gown789\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn: \n\n  - '@id': med:3129ca8b-fcda-45be-bbda-294dc924d3b0\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q89990310 # medical gown\n    trackingIdentifier: gown734\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn: \n\n  - '@id': med:3129ca8b-fcda-45be-bbda-294dc924d3b1\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q89990310 # medical gown\n    trackingIdentifier: gown698\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn: \n\n  # Packing process\n\n  - '@id': med:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Pack medical gowns\n    note: Each gown is scanned for tracking identifier as packed\n    hasInput:\n\n    - '@id': med:b52a5815-fae9-43bf-be95-833b95dc0adb\n      '@type': EconomicEvent\n      action: combine\n      provider: https://medical.example/\n      receiver: https://medical.example/\n      resourceInventoriedAs: med:e1721a61-cd47-4556-84b9-8b1b81da15bf # a container\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n      note: Container is empty at this point.\n\n    - '@id': med:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172\n      '@type': EconomicEvent\n      action: combine\n      provider: https://medical.example/\n      receiver: https://medical.example/\n      resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b9 # a medical gown\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    - '@id': med:a8236bbb-81e0-422d-9861-56d2417db0fb\n      '@type': EconomicEvent\n      action: combine\n      provider: https://medical.example/\n      receiver: https://medical.example/\n      resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b0 # a medical gown\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    - '@id': med:6f438393-7f87-4914-806c-e23a4fd15e89\n      '@type': EconomicEvent\n      action: combine\n      provider: https://medical.example/\n      receiver: https://medical.example/\n      resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b1 # a medical gown\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    hasOutput:\n\n    - '@id': med:b52a5815-fae9-43bf-be95-833b95dc0456\n      '@type': EconomicEvent\n      action: produce\n      provider: https://medical.example/\n      receiver: https://medical.example/\n      resourceConformsTo: http://www.wikidata.org/entity/Q2127468 # packaging unit\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n      note: This is a new resource, a package containing all inputs.\n\n  # Economic resources after packing\n\n  - '@id': med:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q987767 # container\n    trackingIdentifier: cont234\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn: med:e1721a61-cd47-4556-84b9-8b1b81da564h\n\n  - '@id': med:3129ca8b-fcda-45be-bbda-294dc924d3b9\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q89990310 # medical gown\n    trackingIdentifier: gown789\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn: med:e1721a61-cd47-4556-84b9-8b1b81da564h\n\n  - '@id': med:3129ca8b-fcda-45be-bbda-294dc924d3b0\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q89990310 # medical gown\n    trackingIdentifier: gown734\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn: med:e1721a61-cd47-4556-84b9-8b1b81da564h\n\n  - '@id': med:3129ca8b-fcda-45be-bbda-294dc924d3b1\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q89990310 # medical gown\n    trackingIdentifier: gown698\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn: med:e1721a61-cd47-4556-84b9-8b1b81da564h\n\n  - '@id': med:e1721a61-cd47-4556-84b9-8b1b81da564h\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q2127468 # packaging unit\n    trackingIdentifier: pack6789\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  # The package is transferred to the laundry\n\n  - '@id': med:b52a5815-fae9-43bf-be95-833berqojdasf7\n    '@type': EconomicEvent\n    action: transferCustody\n    provider: https://medical.example/\n    receiver: https://laundry.example/\n    resourceInventoriedAs: med:e1721a61-cd47-4556-84b9-8b1b81da564h # the package\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    note: Contains gowns and container.\n\n  # The package is unpacked at the laundry\n\n  - '@id': wash:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': Process\n    name: Unpack medical gowns\n    note: Each gown is scanned for tracking identifier as unpacked\n    hasInput:\n\n    - '@id': wash:33e8933b-ff73-4a01-964a-ca7a98893\n      '@type': EconomicEvent\n      action: consume\n      provider: https://laundry.example/\n      receiver: https://laundry.example/\n      resourceInventoriedAs: med:e1721a61-cd47-4556-84b9-8b1b81da564h # the package\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    hasOutput:\n\n    - '@id': wash:60f4204e-b8d2-4026-8577-102c3f82c0af\n      '@type': EconomicEvent\n      action: separate\n      provider: https://laundry.example/\n      receiver: https://laundry.example/\n      resourceInventoriedAs: med:e1721a61-cd47-4556-84b9-8b1b81da15bf # a container\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    - '@id': wash:60f4204e-b8d2-4026-8577-102c3fkm98g1\n      '@type': EconomicEvent\n      action: separate\n      provider: https://laundry.example/\n      receiver: https://laundry.example/\n      resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b9 # a medical gown\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    - '@id': wash:60f4204e-b8d2-4026-8577-102c3fsd89cv\n      '@type': EconomicEvent\n      action: separate\n      provider: https://laundry.example/\n      receiver: https://laundry.example/\n      resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b0 # a medical gown\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    - '@id': wash:60f4204e-b8d2-4026-8577-102c3fd9kjre\n      '@type': EconomicEvent\n      action: separate\n      provider: https://laundry.example/\n      receiver: https://laundry.example/\n      resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b1 # a medical gown\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n  # Economic resources after unpacking\n\n  - '@id': med:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q987767 # container\n    trackingIdentifier: cont234\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': med:3129ca8b-fcda-45be-bbda-294dc924d3b9\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q89990310 # medical gown\n    trackingIdentifier: gown789\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn: \n\n  - '@id': med:3129ca8b-fcda-45be-bbda-294dc924d3b0\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q89990310 # medical gown\n    trackingIdentifier: gown734\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn:\n\n  - '@id': med:3129ca8b-fcda-45be-bbda-294dc924d3b1\n    '@type': EconomicResource\n    conformsTo: http://www.wikidata.org/entity/Q89990310 # medical gown\n    trackingIdentifier: gown698\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    containedIn: \n</code></pre> Alternate view of these pack-unpack processes, using the more relational directionality option. <pre><code># Example: Simple pack and unpack processes\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - med: https://medical.example/\n    wash: https://laundry.example/\n\n'@graph':\n\n  # Packing process\n\n  - '@id': med:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Pack medical gowns\n    note: Each gown is scanned for tracking identifier as packed\n\n  - '@id': med:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': EconomicEvent\n    inputOf: med:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: combine\n    provider: https://medical.example/\n    receiver: https://medical.example/\n    resourceInventoriedAs: med:e1721a61-cd47-4556-84b9-8b1b81da15bf # a container\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    note: Container is empty at this point.\n\n  - '@id': med:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172\n    '@type': EconomicEvent\n    inputOf: med:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: combine\n    provider: https://medical.example/\n    receiver: https://medical.example/\n    resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b9 # a medical gown\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': med:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': EconomicEvent\n    inputOf: med:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: combine\n    provider: https://medical.example/\n    receiver: https://medical.example/\n    resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b0 # a medical gown\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': med:6f438393-7f87-4914-806c-e23a4fd15e89\n    '@type': EconomicEvent\n    inputOf: med:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: combine\n    provider: https://medical.example/\n    receiver: https://medical.example/\n    resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b1 # a medical gown\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': med:b52a5815-fae9-43bf-be95-833b95dc0456\n    '@type': EconomicEvent\n    outputOf: med:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: produce\n    provider: https://medical.example/\n    receiver: https://medical.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q2127468 # packaging unit\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    note: This is a new resource, a package containing all inputs.\n\n  # The package is unpacked at the laundry\n\n  - '@id': wash:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': Process\n    name: Unpack medical gowns\n    note: Each gown is scanned for tracking identifier as unpacked\n\n  - '@id': wash:33e8933b-ff73-4a01-964a-ca7a98893\n    '@type': EconomicEvent\n    inputOf: wash:33e8933b-ff73-4a01-964a-ca7a98893083\n    action: consume\n    provider: https://laundry.example/\n    receiver: https://laundry.example/\n    resourceInventoriedAs: med:e1721a61-cd47-4556-84b9-8b1b81da564h # the package\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': wash:60f4204e-b8d2-4026-8577-102c3f82c0af\n    '@type': EconomicEvent\n    outputOf: wash:33e8933b-ff73-4a01-964a-ca7a98893083\n    action: separate\n    provider: https://laundry.example/\n    receiver: https://laundry.example/\n    resourceInventoriedAs: med:e1721a61-cd47-4556-84b9-8b1b81da15bf # a container\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': wash:60f4204e-b8d2-4026-8577-102c3fkm98g1\n    '@type': EconomicEvent\n    outputOf: wash:33e8933b-ff73-4a01-964a-ca7a98893083\n    action: separate\n    provider: https://laundry.example/\n    receiver: https://laundry.example/\n    resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b9 # a medical gown\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': wash:60f4204e-b8d2-4026-8577-102c3fsd89cv\n    '@type': EconomicEvent\n    outputOf: wash:33e8933b-ff73-4a01-964a-ca7a98893083\n    action: separate\n    provider: https://laundry.example/\n    receiver: https://laundry.example/\n    resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b0 # a medical gown\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': wash:60f4204e-b8d2-4026-8577-102c3fd9kjre\n    '@type': EconomicEvent\n    outputOf: wash:33e8933b-ff73-4a01-964a-ca7a98893083\n    action: separate\n    provider: https://laundry.example/\n    receiver: https://laundry.example/\n    resourceInventoriedAs: med:3129ca8b-fcda-45be-bbda-294dc924d3b1 # a medical gown\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre></p>"},{"location":"examples/ex-production/#stage-and-state","title":"Stage and state","text":"<p>Simple assembly and testing showing use of stage and state.</p> <p></p> <p><pre><code># Example: Process using stage and state\n# credit Fabulaser-Mini, https://github.com/fab-machines/Fabulaser-Mini/blob/main/manual/Fabulaser%20manual%20L2M2.pdf\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - mfg: https://manufacturing.example/\n\n'@graph':\n\n  # Process Specifications\n\n  - '@id': mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3\n    '@type': ProcessSpecification\n    name: Attach air filter\n\n  - '@id': mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4\n    '@type': ProcessSpecification\n    name: Attach air compressor\n\n  - '@id': mfg:3be5259d-10f0-431c-9fec-9c0c15a461f9\n    '@type': ProcessSpecification\n    name: Test machine\n\n  # Resource Specification\n\n  - '@id': mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97\n    '@type': ResourceSpecification\n    name: Fabulaser laser cutter\n\n  # Economic resource before attach air filter process\n\n  - '@id': mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    resourceConformsTo: mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 # Fabulaser\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    stage: mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4 # attach air compressor\n\n  # Assembly process\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Attach the air filter (step 33)\n    basedOn: mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # process specification: attach air filter\n    hasInput:\n\n    - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0fb\n      '@type': EconomicEvent\n      action: accept\n      provider: https://manufacturing.example/\n      receiver: https://manufacturing.example/\n      resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n      stage: mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4 # attach air compressor\n\n    - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0ss\n      '@type': EconomicEvent\n      action: consume\n      provider: https://manufacturing.example/\n      receiver: https://manufacturing.example/\n      resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81dlk4d0 # an air filter\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0st\n      '@type': EconomicEvent\n      action: consume\n      provider: https://manufacturing.example/\n      receiver: https://manufacturing.example/\n      resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81dlcvgk # a hose clamp\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n    hasOutput:\n\n    - '@id': mfg:52f0e212-3c4f-4d27-b345-5e964c135824\n      '@type': EconomicEvent\n      action: modify\n      provider: https://manufacturing.example/\n      receiver: https://manufacturing.example/\n      resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 1\n\n  # Economic resource after attach air filter process\n\n  - '@id': mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    resourceConformsTo: mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 # Fabulaser\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    stage: mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # attach air filter\n\n  # Testing process\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c98\n    '@type': Process\n    name: Test the laser cutter\n    basedOn: mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # final test after all assembly\n\n  - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c98\n    action: accept\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    stage: mfg:02b39a30-3e04-4305-9656-7f261aa63c84 #attach air filter\n\n  - '@id': mfg:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': EconomicEvent\n    outputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c98\n    action: modify\n    state: pass\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  # Economic resource after testing\n\n  - '@id': mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf\n    '@type': EconomicResource\n    resourceConformsTo: mfg:3be525ee-10f0-431c-9fec-9c0c15a4dv97 # Fabulaser\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    stage: mfg:02b39a30-3e04-4305-9656-7f261aa63c98 # test machine\n    state: pass\n</code></pre> Alternate view of these stage-state processes, using the more relational directionality option. <pre><code># Example: Process using stage and state\n# credit Fabulaser-Mini, https://github.com/fab-machines/Fabulaser-Mini/blob/main/manual/Fabulaser%20manual%20L2M2.pdf\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - mfg: https://manufacturing.example/\n\n'@graph':\n\n  # Assembly process\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Attach the air filter (step 33)\n    basedOn: mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # process specification: attach air filter\n\n  - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: accept\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    stage: mfg:3be5259d-10f0-431c-9fec-9c0c15a461e4 # attach air compressor\n\n  - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0ss\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81dlk4d0 # an air filter\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0st\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81dlcvgk # a hose clamp\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': mfg:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': EconomicEvent\n    outputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: modify\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  # Testing process\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c98\n    '@type': Process\n    name: Test the laser cutter\n    basedOn: mfg:3be5259d-10f0-431c-9fec-9c0c15a461d3 # final test after all assembly\n\n  - '@id': mfg:a8236bbb-81e0-422d-9861-56d2417db0fb\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c98\n    action: accept\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    stage: mfg:02b39a30-3e04-4305-9656-7f261aa63c84 #attach air filter\n\n  - '@id': mfg:52f0e212-3c4f-4d27-b345-5e964c135824\n    '@type': EconomicEvent\n    outputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c98\n    action: modify\n    state: pass\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # a laser cutter\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre></p>"},{"location":"examples/ex-production/#correcting-errors","title":"Correcting errors","text":"<p>Simple one-process manufacturing with corrections.</p> <p>Note that the diagram below shows the actual data in the flow.  If a use case calls for it, the events can be combined on a user interface so that a \"corrected\" event would be displayed, for example just \"work 6 hours machining\" and \"consume 5 plywood sheets\" as the two inputs to this process. In that case, you could show all of events, including the correcting events, in another view.</p> <p></p> <pre><code># Example: Correcting a data recording error in an event\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    mfg: https://manufacturing.example/\n\n'@graph':\n\n  # Before corrections\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Make the lean desk\n\n  - '@id': mfg:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # plywood sheets\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 3\n    hasPointInTime: 2019-04-08T10:00:00-5:00\n    created: 2019-04-08T18:00:00-5:00\n\n  - '@id': mfg:6f438393-7f87-4914-806c-e23a4fd15e89\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: work\n    provider: https://alice.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q192047 # machining\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 7\n    hasBeginning: 2019-04-08T10:30:00-5:00\n    hasEnd: 2019-04-08T16:30:00-5:00\n    created: 2019-04-08T18:00:00-5:00\n\n  - '@id': mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n    '@type': EconomicEvent\n    outputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: produce\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # desk\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    hasPointInTime: 2019-04-08T17:30:00-5:00\n    created: 2019-04-08T18:02:00-5:00\n\n  # After corrections\n\n  - '@id': mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Process\n    name: Make the lean desk\n\n  # original consume event\n\n  - '@id': mfg:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # plywood sheets\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 3\n    hasPointInTime: 2019-04-08T10:00:00-5:00\n    created: 2019-04-08T18:00:00-5:00\n\n  # the consume event is backed out completely and a new event entered to replace it\n\n  - '@id': mfg:b52a5815-fae9-43bf-be95-833b95dc0sdf\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # plywood sheets\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: -3\n    hasPointInTime: 2019-04-08T18:00:00-5:00\n    created: 2019-04-08T18:00:00-5:00\n    corrects: mfg:b52a5815-fae9-43bf-be95-833b95dc0adb\n\n  - '@id': mfg:b52a5815-fae9-43bf-be95-833b95dc0yu8\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: consume\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:3129ca8b-fcda-45be-bbda-294dc924d3b9 # plywood sheets\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 5\n    hasPointInTime: 2019-04-08T10:00:00-5:00\n    created: 2019-04-08T18:01:00-5:00\n\n  # original work event\n\n  - '@id': mfg:6f438393-7f87-4914-806c-e23a4fd15e89\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: work\n    provider: https://alice.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q192047 # machining\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: 7\n    hasBeginning: 2019-04-08T10:30:00-5:00\n    hasEnd: 2019-04-08T16:30:00-5:00\n    created: 2019-04-08T18:00:00-5:00\n\n  # the work event is corrected without backing it out completely\n\n  - '@id': mfg:6f438393-7f87-4914-806c-e23a4fd158uj\n    '@type': EconomicEvent\n    inputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: work\n    provider: https://alice.example/\n    receiver: https://manufacturing.example/\n    resourceConformsTo: http://www.wikidata.org/entity/Q192047 # machining\n    effortQuantity:\n      hasUnit: hour\n      hasNumericalValue: -1\n    hasBeginning: 2019-04-08T10:30:00-5:00\n    hasEnd: 2019-04-08T16:30:00-5:00\n    created: 2019-04-08T18:00:00-5:00\n    corrects: mfg:6f438393-7f87-4914-806c-e23a4fd15e89\n\n  # the produce event is not corrected\n\n  - '@id': mfg:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n    '@type': EconomicEvent\n    outputOf: mfg:02b39a30-3e04-4305-9656-7f261aa63c84\n    action: produce\n    provider: https://manufacturing.example/\n    receiver: https://manufacturing.example/\n    resourceInventoriedAs: mfg:e1721a61-cd47-4556-84b9-8b1b81da15bf # desk\n    resourceQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n    hasPointInTime: 2019-04-08T17:30:00-5:00\n    created: 2019-04-08T18:02:00-5:00\n</code></pre>"},{"location":"examples/ex-proposals/","title":"Offers/Requests Examples","text":""},{"location":"examples/ex-proposals/#proposals-to-sell-and-give-away","title":"Proposals to sell and give away","text":"<p>A simple proposal with reciprocity expected, then another one to give the item away.</p> <p></p> <pre><code># Example: Simple proposals based on one intent\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - alice: https://alice.example/\n    map: https://mapping.service/\n\n'@graph':\n\n  # One offer with expected reciprocity\n\n  - '@id': alice:8791913c-0152-4c32-bb3f-f25d61df736c\n    '@type': Proposal\n    purpose: offer\n    name: Used bike\n    hasBeginning: 2019-03-01T00:00:00-5:00\n    hasEnd: 2019-03-31T00:00:00-5:00\n    eligibleLocation: map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI\n    publishes:\n\n    - '@id': alice:02b39a30-3e04-4305-9656-7f261aa63c84\n      '@type': Intent\n      name: Old adult Schwinn one speed bike\n      note: Pedals fine, not good for hills, has basket, brakes are a bit dodgy\n      action: transfer\n      provider: https://alice.example/\n      resourceConformsTo: http://www.wikidata.org/entity/Q11442 # bicycle\n\n    reciprocal:\n\n    - '@id': alice:e72f7d1d-4f0a-4518-a44c-96658cafda95\n      '@type': Intent\n      name: Payment\n      action: transfer\n      receiver: https://alice.example/\n      resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US Dollar\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 15\n\n  # Alice did not get any responses to her proposal above, so decided to offer the bike for free\n\n  - '@id': alice:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    '@type': Proposal\n    purpose: offer\n    name: Free used bike\n    hasBeginning: 2019-04-01T00:00:00-5:00\n    hasEnd: 2019-05-01T00:00:00-5:00\n    eligibleLocation: map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI\n    publishes:\n\n    - '@id': alice:02b39a30-3e04-4305-9656-7f261aa63c84 # the intent (this is the same intent alice originally published)\n</code></pre>"},{"location":"examples/ex-proposals/#proposal-in-timebank","title":"Proposal in timebank","text":"<p>A simple proposal for a timebank.  The reciprocity is assumed based on the timebank policies.</p> <p></p> <pre><code># Example: Simple proposal in a timebank\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - bob: https://bob.example/\n    timebank: https://timebank.example/\n\n'@graph':\n\n  # Timebank request, reciprocity defined in the timebank agreement (hour credits)\n\n  - '@id': bob:23799c14-c368-4653-a584-83bf9ae8b82a\n    '@type': Proposal\n    purpose: request\n    name: Seeking plumbing help\n    hasBeginning: 2019-04-01T00:00:00-5:00\n    hasEnd: 2019-04-05T00:00:00-5:00\n    inScopeOf: https://timebank.example/\n    publishes:\n\n    - '@id': bob:e18c808c-929a-450d-9d0d-3b3f531bc126\n      '@type': Intent\n      name: Plumbing help please\n      note: Need someone with plumbing skills to fix leaky faucet and plugged drain asap\n      action: work\n      receiver: https://bob.example/\n      resourceConformsTo: http://www.wikidata.org/entity/Q252924 # plumber\n</code></pre>"},{"location":"examples/ex-proposals/#proposal-for-barter","title":"Proposal for barter","text":"<p>A simple proposal for barter.</p> <p></p> <pre><code># Example: Simple proposal for barter\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - carol: https://carol.example/\n    map: https://mapping.service/\n\n'@graph':\n\n  - '@id': carol:6405b8ad-0ac2-4d58-abdb-0808903c78ad\n    '@type': Proposal\n    purpose: request\n    name: Cider press for cider\n    hasBeginning: 2018-10-01T00:00:00-5:00\n    hasEnd: 2018-10-15T00:00:00-5:00\n    eligibleLocation: map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI\n    publishes:\n\n    - '@id': carol:e02e3f6b-420a-4ba8-89b0-909d7363ce07\n      '@type': Intent\n      name: Cider press\n      note: I can pick up or come to your place, will clean up.\n      action: use\n      receiver: https://carol.example/\n      resourceConformsTo: http://www.wikidata.org/entity/Q1111 # cider press (fictional)\n      effortQuantity:\n        hasUnit: hour\n        hasNumericalValue: 6\n\n    reciprocal:\n\n    - '@id': carol:b52a5815-fae9-43bf-be95-833b95dc0adb\n      '@type': Intent\n      name: Cider\n      note: Fresh cider from the pressing\n      action: transfer\n      provider: https://carol.example/\n      resourceConformsTo: http://www.wikidata.org/entity/Q5977438 # apple cider\n      resourceQuantity:\n        hasUnit: gallon-US\n        hasNumericalValue: 3\n</code></pre>"},{"location":"examples/ex-proposals/#proposal-for-work-commitment","title":"Proposal for work commitment","text":"<p>A simple proposal requesting help for work on a planned production process.  The reciprocal intent (payment) is based on the actual hours that will be worked.</p> <p></p> <pre><code># Example: Simple proposal for commitment to an intent on a planned process\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - fablab: https://fablab.example/\n    map: https://mapping.service/\n\n'@graph':\n\n  # Plan a process, publish request for worker with certain skills to collaborate\n\n  - '@id': fablab:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47\n    '@type': Process\n    name: Develop soil moisture sensor\n    inScopeOf: https://fablab.example/\n    hasInput:\n\n    - '@id': fablab:60f4204e-b8d2-4026-8577-102c3f82c0af\n      '@type': Intent\n      inputOf: fablab:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47\n      name: Help with R&amp;D for the sensor\n      note: Will need to be at the lab all day both days. It possibly could extend to a third day.\n      action: work\n      receiver: https://fablab.example/\n      resourceConformsTo: http://www.wikidata.org/entity/Q2474620 # electrochemical engineering\n      effortQuantity:\n        hasUnit: hour\n        hasNumericalValue: 1\n      minimumQuantity:\n        hasUnit: hour\n        hasNumericalValue: 16\n      hasBeginning: 2019-04-12T08:00:00-5:00\n      hasEnd: 2019-04-13T17:00:00-5:00\n\n  # Proposal to find worker\n\n  - '@id': fablab:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': Proposal\n    name: Electrochemical engineering skills\n    hasBeginning: 2019-04-01T08:00:00-5:00\n    hasEnd: 2019-04-11T17:00:00-5:00\n    eligibleLocation: map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI\n    unitBased: true\n    publishes:\n\n    - '@id': fablab:60f4204e-b8d2-4026-8577-102c3f82c0af # the Intent that was planned\n\n    reciprocal:\n\n    - '@id': fablab:583e83d9-a46d-44ff-bd71-88513a1d83c0\n      '@type': Intent\n      name: Payment\n      note: Payment when the unit is manufactured and sold\n      action: transfer\n      provider: https://fablab.example/\n      resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US Dollar\n      resourceQuantity:\n        hasUnit: one\n        hasNumericalValue: 30\n</code></pre>"},{"location":"examples/ex-proposals/#proposals-for-price-list","title":"Proposals for price list","text":"<p>A simple set of proposals that make up a price list.</p> <p></p> <pre><code># Example: Simple price list\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - farm: https://farm.example/\n    map: https://mapping.service/\n\n'@graph':\n\n  # Price list\n  - '@id': farm:da7bfa38-a1b2-4f6f-a896-b9bf1ec88dr9\n    '@type': ProposalList\n    name: Price List for Week of March 1\n    lists:\n\n    - '@id': farm:da7bfa38-a1b2-4f6f-a896-b9bf1ec8807a\n      '@type': Proposal\n      hasBeginning: 2019-03-01T00:00:00-5:00\n      hasEnd: 2019-03-31T00:00:00-5:00\n      eligibleLocation: map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI\n      unitBased: true # often currently called 'unit pricing'\n      publishes:\n\n      - '@id': farm:c7897c39-7f05-4a5d-a487-80e130a24345\n        '@type': Intent\n        name: Carrots case 25#\n        action: transfer\n        provider: https://farm.example/\n        resourceClassifiedAs: http://www.wikidata.org/entity/Q81 # carrot\n        resourceSpecifiedAs: farm:2402b57c-1c45-423a-acb2-f50961c97d65 # 25 pound case organic carrots seconds\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 1\n\n      reciprocal:\n\n      - '@id': farm:0f563083-7f05-4a5d-a487-80e130a24345\n        '@type': Intent\n        name: Payment\n        action: transfer\n        receiver: https://farm.example/\n        resourceConformsTo: http://www.wikidata.org/entity/Q4917 # US Dollar\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 18\n\n    - '@id': farm:f47064eb-7120-4b31-b882-770165901fe6\n      '@type': Proposal\n      hasBeginning: 2019-03-01T00:00:00-5:00\n      hasEnd: 2019-03-31T00:00:00-5:00\n      eligibleLocation: map:566a2c01-96f8-4b3c-adcf-f197eced3092 # Madison, WI\n      unitBased: true\n      publishes:\n\n      - '@id': farm:54b814ee-62dc-40c1-bb96-f8582aa4f771\n        '@type': Intent\n        name: Beets case 25#\n        action: transfer\n        provider: https://farm.example/\n        resourceClassifiedAs: http://www.wikidata.org/entity/Q165437 # beet root\n        resourceConformsTo: farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # 25 pound case organic beets\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 1\n\n      reciprocal:\n\n      - '@id': farm:21f361a6-2375-46bb-b192-c21b5ba833bf\n        '@type': Intent\n        name: Payment\n        action: transfer\n        receiver: https://farm.example/\n        resourceConformsTo: https://www.wikidata.org/wiki/Q4917 # US Dollar\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 32\n</code></pre>"},{"location":"examples/ex-resource/","title":"Economic Resource Examples","text":"<p>This example includes economic resources, with their resource specifications.  One resource has a lot identifier.</p> <p></p> <pre><code># Example: Resources\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - farm: https://farm.example/\n    ose: https://www.opensourceecology.org/\n\n'@graph':\n\n  - '@id': ose:822b6baf-d66f-45a0-98f2-57450e2aec23\n    '@type': ResourceSpecification\n    name: Tractor - LifeTrac 6\n    uri: https://www.opensourceecology.org/portfolio/tractor/\n    image: https://www.opensourceecology.org/wp-content/uploads/2014/02/Tractor_gray.png\n    defaultUnitOfResource: one\n    defaultUnitOfEffort: hour\n    substitutable: true\n    note: A versatile, 4-wheel drive, hydraulically-driven tractor with 18 to 200 horsepower capacity for agriculture, construction and other utility duties.\n\n  - '@id': farm:fbff9852-36ca-4364-a943-bc0b49e1cab5\n    '@type': EconomicResource\n    name: Tractor - LifeTrac 6\n    trackingIdentifier: 889jcd00s # the serial number assigned by the manufacturer\n    conformsTo: ose:822b6baf-d66f-45a0-98f2-57450e2aec23\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n\n  - '@id': farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    '@type': ResourceSpecification\n    name: Carrots organic\n    defaultUnitOfResource: kilogram\n    substitutable: true\n    note: Organic loose carrots without tops.\n\n  - '@id': farm:07819789-dd51-44c3-b35c-9210165bc832\n    '@type': EconomicResource\n    name: Loose organic carrots\n    trackingIdentifier: 3409888 # the lot number assigned by the farm\n    conformsTo: farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    accountingQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 650\n    note: Medium size, clean, harvested after the first frost, will store well.\n\n  - '@id': farm:68cabaf3-deb8-4bd5-a439-798263abe35a\n    '@type': ResourceSpecification\n    name: Farm documentation\n    defaultUnitOfResource: one\n    substitutable: false\n    note: Any of the documentation produced and/or used by the farm.\n\n  - '@id': farm:a7e94dde-2997-451e-a7e1-8d364d5e6dee\n    '@type': EconomicResource\n    name: Intern orientation instructions\n    conformsTo: farm:68cabaf3-deb8-4bd5-a439-798263abe35a\n    uri: https://farm.example/docs/intern-orientation.odt\n    accountingQuantity:\n      hasUnit: one\n      hasNumericalValue: 1\n</code></pre>"},{"location":"examples/ex-scenario/","title":"Estimates and Analysis (Scenarios)","text":"<p>Scenarios are used for all pre-operational planning, such as estimates for other agents, group offers/requests, forecasting and budgeting.  They are also used for post-operational aggregated analysis, especially where only the aggregated data is available.</p>"},{"location":"examples/ex-scenario/#community-planning","title":"Community planning","text":"<p>This snippet maps potential yearly inputs and outputs for community members, in order to discover opportunities to connect more in the network, and start organizations or projects to fill gaps.  In the following diagram, the dotted arrows indicate where opportunities for output-to-input matches can occur.</p> <p></p> <pre><code># Example: Map community consumption/production\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - community: https://community.example/\n    garden: https://community-gardens.example/\n    restaurant: https://restaurant.example/\n    bakery: https://bakery.example/\n    taxi: https://taxi-coop.example/\n\n'@graph':\n\n  # Knowledge layer setup\n\n  - '@id': community:822b6baf-d66f-45a0-98f2-57450e2aec23\n    '@type': ResourceSpecification\n    name: Fresh veggies\n    defaultUnitOfResource: kilogram\n    substitutable: true\n\n  - '@id': community:fbff9852-36ca-4364-a943-bc0b49e1cab5\n    '@type': ResourceSpecification\n    name: Gardening space\n    defaultUnitOfResource: squareMetre\n    substitutable: true\n\n  - '@id': community:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    '@type': ResourceSpecification\n    name: Prepared food\n    defaultUnitOfResource: kilogram\n    substitutable: true\n\n  - '@id': community:a7e94dde-2997-451e-a7e1-8d364d5e6dee\n    '@type': ResourceSpecification\n    name: Transportation\n    defaultUnitOfResource: kilometre\n    substitutable: true\n\n  - '@id': community:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': ScenarioDefinition\n    name: Yearly agent estimates\n    hasDuration: year\n    note: Yearly estimates of high-level consumption and production.\n\n  # The scenario is set up with generic processes by the community to set the stage\n\n  - '@id': community:9bd19194-a36d-4a1f-896b-8082887962cb\n    '@type': Scenario\n    name: 2025 agent estimates\n    definedAs: community:33e8933b-ff73-4a01-964a-ca7a98893083 # the ScenarioDefinition\n    hasBeginning: 2025-01-01T00:00:00-6:00\n    hasEnd: 2025-12-31T23:59:59-6:00\n    note: 2025 estimates of high-level consumption and production by economic solidarity groups in Madison, WI.\n    scenarioIncludes:\n\n    - '@id': community:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b\n      '@type': Process\n      name: Urban gardening\n      nestedIn: community:9bd19194-a36d-4a1f-896b-8082887962cb # the Scenario\n\n    - '@id': community:02b39a30-3e04-4305-9656-7f261aa63c84\n      '@type': Process\n      name: Process food\n      nestedIn: community:9bd19194-a36d-4a1f-896b-8082887962cb # the Scenario\n\n    - '@id': community:a8236bbb-81e0-422d-9861-56d2417db0fb\n      '@type': Process\n      name: Recover food\n      nestedIn: community:9bd19194-a36d-4a1f-896b-8082887962cb # the Scenario\n\n    - '@id': community:b52a5815-fae9-43bf-be95-833b95dc0adb\n      '@type': Process\n      name: Distribute food\n      nestedIn: community:9bd19194-a36d-4a1f-896b-8082887962cb # the Scenario\n\n  # Estimated inputs and outputs are added by the agents\n\n  - '@id': community:60f4204e-b8d2-4026-8577-102c3f82c0af\n    '@type': Intent\n    inputOf: community:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b # Urban gardening\n    action: consume\n    receiver: https://community-gardens.example/\n    resourceConformsTo: community:fbff9852-36ca-4364-a943-bc0b49e1cab5 # gardening space\n    resourceQuantity:\n      hasUnit: squareMetre\n      hasNumericalValue: 4500\n\n  - '@id': community:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n    '@type': Intent\n    outputOf: community:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b # Urban gardening\n    action: produce\n    provider: https://community-gardens.example/\n    resourceConformsTo: community:822b6baf-d66f-45a0-98f2-57450e2aec23 # fresh veggies\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 6000\n\n  - '@id': community:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172\n    '@type': Intent\n    inputOf: community:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b # Process food\n    action: consume\n    receiver: https://restaurant.example/\n    resourceConformsTo: community:822b6baf-d66f-45a0-98f2-57450e2aec23 # fresh veggies\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 2500\n\n  - '@id': community:583e83d9-a46d-44ff-bd71-88513a1d83c0\n    '@type': Intent\n    outputOf: community:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b # Process food\n    action: produce\n    provider: https://restaurant.example/\n    resourceConformsTo: community:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # prepared food\n    note: leftover food\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 10000\n\n  - '@id': community:ad56a7ed-be3c-4937-a3fb-0f156bcd2c47\n    '@type': Intent\n    outputOf: community:a8236bbb-81e0-422d-9861-56d2417db0fb # Recover food\n    action: dropoff\n    provider: https://taxi-coop.example/\n    resourceConformsTo: community:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # prepared food\n    note: taxi drivers pickup leftovers from local businesses\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 3000\n\n  - '@id': community:8791913c-0152-4c32-bb3f-f25d61df736c\n    '@type': Intent\n    outputOf: community:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b # Process food\n    action: produce\n    provider: https://bakery.example/\n    resourceConformsTo: community:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # prepared food\n    note: non-retail food\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 1500\n\n  - '@id': community:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Intent\n    inputOf: community:b52a5815-fae9-43bf-be95-833b95dc0adb # distribute food\n    action: pickup\n    receiver: https://taxi-coop.example/\n    resourceConformsTo: community:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # prepared food\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 20000\n\n  - '@id': community:e72f7d1d-4f0a-4518-a44c-96658cafda95\n    '@type': Intent\n    outputOf: community:b52a5815-fae9-43bf-be95-833b95dc0adb # distribute food\n    action: dropoff\n    provider: https://taxi-coop.example/\n    resourceConformsTo: community:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # prepared food\n    resourceQuantity:\n      hasUnit: kilogram\n      hasNumericalValue: 20000\n</code></pre>"},{"location":"examples/ex-scenario/#regional-analysis","title":"Regional analysis","text":"<p>This is a snippet of a regional analysis of actual flows of resources at a high level in one domain (groundfish). Even though this is not operational, it uses economic events which are aggregates of operational events, to reflect that this is actual data. A person or software can tell these events are not operational because they are part of a scenario, not an operational plan.</p> <p></p> <pre><code># Example: Map actual aggregated resource flows for groundfish for a region\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - region: https://region.example/\n\n'@graph':\n\n  # Knowledge layer setup\n\n  - '@id': region:822b6baf-d66f-45a0-98f2-57450e2aec23\n    '@type': ResourceSpecification\n    name: Grade A Groundfish\n    defaultUnitOfResource: tonne\n    substitutable: true\n\n  - '@id': region:fbff9852-36ca-4364-a943-bc0b49e1cab5\n    '@type': ResourceSpecification\n    name: Grade B Groundfish\n    defaultUnitOfResource: tonne\n    substitutable: true\n\n  - '@id': region:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n    '@type': ResourceSpecification\n    name: Bycatch\n    defaultUnitOfResource: tonne\n    substitutable: true\n\n  - '@id': region:07819789-dd51-44c3-b35c-9210165bc832\n    '@type': ResourceSpecification\n    name: Processed Groundfish\n    defaultUnitOfResource: tonne\n    substitutable: true\n\n  - '@id': region:3d4iu33b-ff73-4a01-964a-ca7a9849kr98\n    '@type': Agent\n    name: XYZ Region\n    hasDuration: year\n\n  - '@id': region:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': ScenarioDefinition\n    name: Yearly Groundfish Processing\n    hasDuration: year\n\n  # The aggregated data is entered as economic events, since it is actual data, albeit not operational.\n\n  - '@id': region:9bd19194-a36d-4a1f-896b-8082887962cb\n    '@type': Scenario\n    name: 2020 Yearly Groundfish Processing\n    definedAs: region:33e8933b-ff73-4a01-964a-ca7a98893083 # the ScenarioDefinition\n    hasBeginning: 2025-01-01T00:00:00-6:00\n    hasEnd: 2025-12-31T23:59:59-6:00\n    note: 2010 estimates of high-level consumption and production by economic solidarity groups in Madison, WI.\n    inScopeOf: region:3d4iu33b-ff73-4a01-964a-ca7a9849kr98 # XYZ region\n    scenarioIncludes:\n\n    - '@id': region:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59b\n      '@type': Process\n      name: Otter Trawl Fishing\n      nestedIn: region:9bd19194-a36d-4a1f-896b-8082887962cb # the Scenario\n      hasOutput:\n\n      - '@id': region:60f4204e-b8d2-4026-8577-102c3f82c0af\n        '@type': EconomicEvent\n        action: produce\n        resourceConformsTo: region:fbff9852-36ca-4364-a943-bc0b49e1cab5 # grade B groundfish\n        resourceQuantity:\n          hasUnit: tonne\n          hasNumericalValue: 27915\n\n      - '@id': region:b52a5815-fae9-43bf-be95-833b95dc0adb\n        '@type': EconomicEvent\n        action: produce\n        resourceConformsTo: region:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9 # bycatch\n        resourceQuantity:\n          hasUnit: tonne\n          hasNumericalValue: 3700\n\n    - '@id': region:02b39a30-3e04-4305-9656-7f261aa63c84\n      '@type': Process\n      name: Longline Fishing\n      nestedIn: region:9bd19194-a36d-4a1f-896b-8082887962cb # the Scenario\n      hasOutput:\n\n      - '@id': region:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n        '@type': EconomicEvent\n        action: produce\n        resourceConformsTo: region:fbff9852-36ca-4364-a943-bc0b49e1cab5 # grade B groundfish\n        resourceQuantity:\n          hasUnit: tonne\n          hasNumericalValue: 7193\n\n    - '@id': region:a8236bbb-81e0-422d-9861-56d2417db0fb\n      '@type': Process\n      name: Processing Groundfish\n      nestedIn: region:9bd19194-a36d-4a1f-896b-8082887962cb # the Scenario\n      hasOutput:\n\n      - '@id': region:21f361a6-2375-46bb-b192-c21b5ba833bf\n        '@type': EconomicEvent\n        action: produce\n        resourceConformsTo: region:07819789-dd51-44c3-b35c-9210165bc832 # processed groundfish\n        resourceQuantity:\n          hasUnit: tonne\n          hasNumericalValue: 31120\n</code></pre>"},{"location":"examples/ex-scenario/#refinement-of-estimates","title":"Refinement of estimates","text":"<p>Here a farm is publishing a seasonal estimate of resources they intend to produce for a farmstand retailer.  Then each month, they publish a refined estimate for the next month, to enable further planning by the farmstand retailer.</p> <p></p> <pre><code># Example: Season and monthly estimates for vegetable availability from a farm to a farmstand retailer\n\n'@context':\n  - '@vocab': http://w3id.org/valueflows/ont/vf#\n  - farm: https://farm.example/\n    retail: https://farmstand-retailer.example/\n\n'@graph':\n\n  # Knowledge layer setup\n\n  - '@id': farm:822b6baf-d66f-45a0-98f2-57450e2aec23\n    '@type': ResourceSpecification\n    name: All Red Potatoes, 25 lb case\n    defaultUnitOfResource: one\n    substitutable: true\n\n  - '@id': farm:fbff9852-36ca-4364-a943-bc0b49e1cab5\n    '@type': ResourceSpecification\n    name: All Blue Potatoes, 25 lb case\n    defaultUnitOfResource: one\n    substitutable: true\n\n  - '@id': farm:33e8933b-ff73-4a01-964a-ca7a98893083\n    '@type': ScenarioDefinition\n    name: Seasonal availability estimate\n    hasDuration: year\n\n  - '@id': farm:b52a5815-fae9-43bf-be95-833b95dc0adb\n    '@type': ScenarioDefinition\n    name: Monthly availability estimate\n    hasDuration: month\n\n  # Early in the season, the farm gives a rough estimate for the season availability to the farmstand retailer.\n\n  - '@id': farm:9bd19194-a36d-4a1f-896b-8082887962cb\n    '@type': Scenario\n    name: 2020 potato availability estimate\n    definedAs: farm:33e8933b-ff73-4a01-964a-ca7a98893083 # the ScenarioDefinition\n    hasBeginning: 2020-08-01T00:00:00-5:00\n    hasEnd: 2021-10-30T23:59:59-5:00\n    note: This covers the season for potatoes in this area.\n    created: 2020-06-01-T00:00:00-5:00\n    inScopeOf: https://farm.example/\n    publishedTo: https://farmstand-retailer.example/\n    scenarioIncludes:\n\n      - '@id': farm:60f4204e-b8d2-4026-8577-102c3f82c0af\n        '@type': Intent\n        action: transfer\n        provider: https://farm.example/\n        resourceConformsTo: farm:822b6baf-d66f-45a0-98f2-57450e2aec23 # all red potatoes 25 lb case\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 300\n\n      - '@id': farm:8baa8ff7-9c1e-4586-ae7b-79d620a3cac9\n        '@type': Intent\n        action: transfer\n        provider: https://farm.example/\n        resourceConformsTo: farm:fbff9852-36ca-4364-a943-bc0b49e1cab5 # all blue potatoes 25 lb case\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 300\n\n  # Then before each month, the farmer gives a more accurate estimate for the month.\n\n  - '@id': farm:02b39a30-3e04-4305-9656-7f261aa63c84\n    '@type': Scenario\n    name: August 2020 potato availability estimate\n    definedAs: farm:b52a5815-fae9-43bf-be95-833b95dc0adb # the ScenarioDefinition\n    refinementOf: farm:9bd19194-a36d-4a1f-896b-8082887962cb # the season estimate\n    hasBeginning: 2020-08-01-01T00:00:00-5:00\n    hasEnd: 2021-08-31T23:59:59-5:00\n    created: 2020-07-20-T00:00:00-5:00\n    inScopeOf: https://farm.example/\n    publishedTo: https://farmstand-retailer.example/\n    scenarioIncludes:\n\n      - '@id': farm:a8236bbb-81e0-422d-9861-56d2417db0fb\n        '@type': Intent\n        action: transfer\n        provider: https://farm.example/\n        resourceConformsTo: farm:822b6baf-d66f-45a0-98f2-57450e2aec23 # all red potatoes 25 lb case\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 80\n\n      - '@id': farm:8e5fe80d-a769-4bd5-89e5-2136d33eab9f\n        '@type': Intent\n        action: transfer\n        provider: https://farm.example/\n        resourceConformsTo: farm:fbff9852-36ca-4364-a943-bc0b49e1cab5 # all blue potatoes 25 lb case\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 95\n\n  - '@id': farm:07819789-dd51-44c3-b35c-9210165bc832\n    '@type': Scenario\n    name: September 2020 potato availability estimate\n    definedAs: farm:b52a5815-fae9-43bf-be95-833b95dc0adb # the ScenarioDefinition\n    refinementOf: farm:9bd19194-a36d-4a1f-896b-8082887962cb # the season estimate\n    hasBeginning: 2020-09-01-01T00:00:00-5:00\n    hasEnd: 2021-09-30T23:59:59-5:00\n    created: 2020-08-20-T00:00:00-5:00\n    inScopeOf: https://farm.example/\n    publishedTo: https://farmstand-retailer.example/\n    scenarioIncludes:\n\n      - '@id': farm:b90b0b77-09a2-42e2-8bd4-e9ae2c1c6172\n        '@type': Intent\n        action: transfer\n        provider: https://farm.example/\n        resourceConformsTo: farm:822b6baf-d66f-45a0-98f2-57450e2aec23 # all red potatoes 25 lb case\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 110\n\n      - '@id': farm:a8236bbb-81e0-422d-9861-56d2417db0fb\n        '@type': Intent\n        action: transfer\n        provider: https://farm.example/\n        resourceConformsTo: farm:fbff9852-36ca-4364-a943-bc0b49e1cab5 # all blue potatoes 25 lb case\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 110\n\n  - '@id': farm:6f438393-7f87-4914-806c-e23a4fd15e89\n    '@type': Scenario\n    name: October 2020 potato availability estimate\n    definedAs: farm:b52a5815-fae9-43bf-be95-833b95dc0adb # the ScenarioDefinition\n    refinementOf: farm:9bd19194-a36d-4a1f-896b-8082887962cb # the season estimate\n    hasBeginning: 2020-10-01-01T00:00:00-5:00\n    hasEnd: 2021-10-31T23:59:59-5:00\n    created: 2020-09-20-T00:00:00-5:00\n    inScopeOf: https://farm.example/\n    publishedTo: https://farmstand-retailer.example/\n    scenarioIncludes:\n\n      - '@id': farm:d4d2fd71-34f2-41c3-b1c5-19ad5ed2da59\n        '@type': Intent\n        action: transfer\n        provider: https://farm.example/\n        resourceConformsTo: farm:822b6baf-d66f-45a0-98f2-57450e2aec23 # all red potatoes 25 lb case\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 105\n\n      - '@id': farm:e1721a61-cd47-4556-84b9-8b1b81da15bf\n        '@type': Intent\n        action: transfer\n        provider: https://farm.example/\n        resourceConformsTo: farm:fbff9852-36ca-4364-a943-bc0b49e1cab5 # all blue potatoes 25 lb case\n        resourceQuantity:\n          hasUnit: one\n          hasNumericalValue: 90\n</code></pre>"},{"location":"introduction/contributors/","title":"Contributors","text":""},{"location":"introduction/contributors/#main-authors","title":"Main Authors","text":"<ul> <li>Lynn Foster</li> <li>elf Pavlik</li> <li>Bob Haugen</li> </ul>"},{"location":"introduction/contributors/#other-committers","title":"Other Committers","text":"<ul> <li>Michael Williams</li> <li>Paul Mackey</li> <li>Kalin Maldzhanski</li> <li>pospi (Sam Pospischil)</li> <li>Jef Vanbockryck</li> <li>Robin Vobruba</li> <li>Jillian Ada Burrows</li> </ul>"},{"location":"introduction/contributors/#use-cases-tools-and-helpful-discussion-and-lets-not-forget-the-logo","title":"Use cases, tools, and helpful discussion... and let's not forget the logo!","text":"<ul> <li>Jon Richter</li> <li>Steve Bosserman</li> <li>Greg Cassel</li> <li>Connor Turland</li> <li>Brent Shambaugh</li> <li>Dan Hassan</li> <li>Alexander Praetorius</li> <li>Steve Michel</li> <li>Tiberius Brastaviceanu</li> <li>Simon Tegg</li> <li>Johannes Winter</li> <li>Elio Qoshi</li> </ul>"},{"location":"introduction/contributors/#rea-assistance-and-inspiration","title":"REA assistance and inspiration","text":"<ul> <li>Bill McCarthy</li> <li>Wim Laurier</li> <li>Jesper Kiehn</li> <li>Julie Smith David</li> <li>Christian Scheller</li> <li>Anders Hessellund</li> <li>Pavel Hruby</li> <li>Graham Gal</li> <li>Richard Newmark</li> <li>Todd Sedbrook</li> <li>Cheryl Dunn</li> <li>Dave McComb</li> </ul>"},{"location":"introduction/core/","title":"Core","text":""},{"location":"introduction/core/#flows-of-value","title":"Flows of value","text":"<p>Value means useful economic resources. Flows means how people create, combine, move, and exchange them.</p> <p>Networks of value flows are created when processes and transfers are linked together through flows of resources.</p> <p>Flow-oriented systems can coordinate whole networks as easily as one company.</p>"},{"location":"introduction/core/#the-patterns-used-in-valueflows","title":"The patterns used in Valueflows","text":"<p>There are two basic patterns used in Valueflows:</p> <ul> <li> <p>Resources, Events, and Agents (REA)</p> </li> <li> <p>Input-Process-Output Resource Flows (IPO)</p> </li> </ul>"},{"location":"introduction/core/#rea-resources-events-agents","title":"REA (Resources, Events, Agents)","text":"<p>The core is based on the REA (Resource, Event, Agent) ontology.  You can find all the details by following the links here.</p> <p>Agents are individual persons or organizations or ecological agents, who perform Economic Events affecting Economic Resources.</p> <p>An Economic Event can take actions like produce, modify, consume, or use Economic Resources, or transfer them from one Agent to another, or transport them from one location to another.</p> <p>Economic Resources would typically be useful goods and services, but could also be money, credits, energy, knowledge, designs, skills, CO2, methane, air, water, or almost anything else that some Agents can agree should be accounted for in their economic networks.</p> <p></p>"},{"location":"introduction/core/#ipo-input-process-output","title":"IPO (Input-Process-Output)","text":"<p>The IPO pattern is used to enhance the ability of REA to represent complex flows of value.  The flows are IPOs...</p> <p>...Input-Process-Output resource chains, where one Economic Resource is the output of one Process and then becomes an input to another, thus connecting the processes into a flow. The Agents involved in each Process in the chain need to coordinate with the previous and next Processes about the quantity, quality, and timing of resource flows between them.</p> <p></p>"},{"location":"introduction/core/#putting-them-together","title":"Putting them together","text":"<p>In general, how they fit together: Agents perform Economic Events that provide Inputs to Processes and take Outputs from Processes and move Resources from one Process to another.  This forms a directed graph of value flows.</p> <p></p> <p>For example: a food network</p> <p>...might include farmers, food processors, restaurants and bakeries, grocery stores, families to eat the food. And vehicles to move everything from place to place. Coordination might be needed between each of those stages: seeds and other inputs for planting crops, workers etc for harvesting crops. when are the crops ready for processing, when is the grain ready for milling and then for baking and then for people to eat, when is the fruit ready for pies, etc.</p>"},{"location":"introduction/core/#flows-without-processes","title":"Flows without processes","text":"<p>Some flows do not involve processing, i.e. there is no transformation or transportation of Economic Resources.  These flows simply transfer Economic Resources between Agents. One common example is an exchange of one Economic Resource for another Economic Resource between two Agents, as below, with two reciprocal flows based on an Agreement.</p> <p></p> <p>It can also be simpler, such as a gift, or more complex, involving many Agents.  Also, these flows can mix in with Process-based flows.</p> <p>For example: in that food network above</p> <p>...food processors might purchase the harvested food from farmers, sell processed food to restaurants and stores... or families might provide land and labor for a farm and receive harvested food each week in return.  That becomes part of the coordination.</p>"},{"location":"introduction/core/#types-of-flows","title":"Types of flows","text":"<p>These are the main types of flows and how they relate as stages of value flows.  They have basically the same core data structure, with differences related to their stage.  Any of these types can be input or output to a process, or reciprocally related, as above.</p> <p></p>"},{"location":"introduction/core/#traversing-value-flows","title":"Traversing value flows","text":"<p>Value flows can be traversed forwards (\"tracking\") or backwards (\"tracing\").  Often people use the term \"provenance\" when looking backwards towards the source of some resource, sometimes when a problem emerges (as in a disease outbreak from food), sometimes to know the quality of the resource (as in wanting local humanely produced food with lower ecological impact).</p> <p>The data structures of Valueflows provide the ability to trace or track any value flow, no matter how long or complex, see Track and Trace.</p>"},{"location":"introduction/core/#levels-of-the-ontology","title":"Levels of the ontology","text":"<p>Valueflows uses the layers of ontology documented by REA.  Each of the layers follows the core patterns above.</p> <p></p> <ul> <li>The Knowledge level represents classification, policies, procedures, rules and patterns. This is where each network or community can configure the core concepts to fit their needs.</li> <li>The Plan level represents offers and requests, schedules and promises.</li> <li>The Observation level represents what really happened.</li> </ul> <p>Here is a simplified view of how they connect.</p> <p></p> <p>Here is a specific simplified example:</p> <p></p>"},{"location":"introduction/faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"introduction/faq/#what-is-valueflows","title":"What is Valueflows?","text":"<p>Valueflows is a vocabulary and model (an ontology) that is intended to cover any economic activity, focused on the economic networks of the \"next economy\", but also supporting conventional businesses and supply chains.  It's purpose is to facilitate interoperability between various economic software.</p>"},{"location":"introduction/faq/#does-valueflows-include-an-application-that-i-can-run-or-fork","title":"Does Valueflows include an application that I can run or fork?","text":"<p>No, Valueflows is only the vocabulary and documentation.  There are some applications that have been and are being created using Valueflows internally and/or exposing Valueflows as an api. They are all open source.</p>"},{"location":"introduction/faq/#how-do-we-think-of-the-economy","title":"How do we think of the \"economy\"?","text":"<p>Community Economies has a definition we like a lot.  \"In conventional usage, economy often refers to a system of formal commodity production and monetary exchange. Our use of the term is much broader. The 'eco' in economy comes from the Greek root oikos, meaning 'home' or 'habitat'\u2014in other words, that which sustains life. The 'nomy' comes from nomos, meaning management. We view economy as referring to all of the practices that allow us to survive and care for each other and the earth. Economy, understood this way, is not separate from ecology, but refers to the ongoing management\u2014and therefore negotiation\u2014of human and nonhuman ecological relations of sustenance.\"</p>"},{"location":"introduction/faq/#what-do-we-mean-economic-network","title":"What do we mean, \u201ceconomic network\u201d?","text":"<p>An economic network consists of independent economic agents (individual people or organizations) collaborating to produce and distribute goods and services to meet human and ecological needs. For example, food, clothing, housing, education, health care. healthy soil, etc.</p>"},{"location":"introduction/faq/#what-do-we-mean-next-economy","title":"What do we mean, \"next economy\"?","text":"<p>We want to support experiments towards:</p> <ul> <li>cooperation rather than competition;</li> <li>open, shared, common knowledge instead of jealously-guarded \u201cintellectual property\u201d;</li> <li>sustainable production instead of getting away with as much plunder as possible;</li> <li>\u201cequitable distribution of value\u201d vs exploitation for profit;</li> <li>respecting nature and our environment.</li> </ul>"},{"location":"introduction/faq/#what-makes-valueflows-different-than-conventional-economic-vocabularies-like-ubl","title":"What makes Valueflows different than conventional economic vocabularies like UBL?","text":"<p>The Valueflows model is designed to support:</p> <ul> <li>coordination of economic activity both inside and between organizations, an enterprise is not assumed;</li> <li>reciprocity with or without money, money is not assumed;</li> <li>ecological agents as part of the network; externalities as resources.</li> </ul> <p>Other economic vocabularies are focused on conventional capitalit enterprise operational and accounting needs.</p>"},{"location":"introduction/faq/#where-can-i-read-more-about-rea","title":"Where can I read more about REA?","text":"<p>Here are a lot of REA links.</p>"},{"location":"introduction/faq/#what-formats-is-valueflows-available-in","title":"What formats is Valueflows available in?","text":"<p>The vocabulary is presented in several ways, as Linked Open Data using the Resource Description Framework (RDF) family of languages, as well as a GraphQL reference and a UML model. We want to support RDF based and non-RDF based uses of the vocabulary, basically any way that people want to use software and data on the internet to help create economic networks.</p>"},{"location":"introduction/faq/#what-if-i-want-a-different-format-or-protocol","title":"What if I want a different format or protocol?","text":"<p>We will add formats and protocols as requested.</p>"},{"location":"introduction/faq/#what-is-the-current-release","title":"What is the current release?","text":"<p>The current release and status can be found in Introduction/Release and Status.</p>"},{"location":"introduction/faq/#there-is-a-lot-here-do-i-need-to-implement-the-whole-vocabulary","title":"There is a lot here, do I need to implement the whole vocabulary?","text":"<p>While the base model is quite simple and elegant, or perhaps because of this in contrast to the many possible use cases, there are indeed quite a few options coming from experience with different use cases, and the desire to support future experiments which we don't know about.  We want to emphasize that projects will need to pick and choose what is useful for any specific application or use case.  For that reason, we have kept most things optional, and don't want to make assumptions about how the vocabulary will be used.  We also hope that the examples and links to existing open source implementations will help.</p>"},{"location":"introduction/faq/#what-can-i-do-to-simplify-the-data-entry-needed-for-valueflows-applications","title":"What can I do to simplify the data entry needed for Valueflows applications?","text":"<p>One thing to note is that the base model appears in all three layers in similar ways.  This gives applications a way to pre-fill many properties.  For example, a recipe can create many plans, where each may only need tweaking.  A commitment can pre-fill many properties from an intent that it will satisfy.  An economic event can pre-fill many properties from a commitment that it will fulfill.  There may also be application-specific opportunities, like using a hardware design to create a recipe for planning the production of the design.</p>"},{"location":"introduction/faq/#where-are-the-rules-for-economic-events-effects-on-economic-resources","title":"Where are the rules for economic events effects on economic resources?","text":"<p>You can find those under Concepts/Actions.</p>"},{"location":"introduction/faq/#where-can-i-find-the-logic-for-track-and-trace","title":"Where can I find the logic for track and trace?","text":"<p>You can find that under Algorithms/Track and Trace.</p>"},{"location":"introduction/introduction/","title":"Introduction","text":""},{"location":"introduction/introduction/#what-is-valueflows","title":"What is Valueflows?","text":"<p>Valueflows is a vocabulary (ontology) that is intended to cover any economic activity, focused on the distributed economic networks of the \"next economy\", but also supporting conventional businesses and supply chains. Specifically, we want to support resource flows connecting many agents (people, organizations, ecological agents), creating fractal networks of people and organizations.</p> <p>On a more technical level, its purpose is to facilitate interoperability among many different software projects. Although the Valueflows core model has also been used to design economic software,  Valueflows itself is not a software application.</p>"},{"location":"introduction/introduction/#what-do-we-mean-economic-network","title":"What do we mean, \u201ceconomic network\u201d?","text":"<p>An economic network consists of independent economic agents (individual people or organizations) collaborating to produce and distribute goods and services to meet human and ecological needs. For example, food, clothing, housing, education, health care. healthy soil, etc.</p> <p>If the agents in such a network want to work together, they will need to coordinate their activities.  Because they are independent, they can't rely on their non-existent bosses to tell them what to do, so they will need to coordinate among themselves. The Valueflows vocabulary is designed to help them do that.</p>"},{"location":"introduction/introduction/#what-do-we-mean-next-economy","title":"What do we mean, \"next economy\"?","text":"<p>We want to support experiments towards:</p> <ul> <li>cooperation rather than competition;</li> <li>open, shared, common knowledge instead of jealously-guarded \u201cintellectual property\u201d;</li> <li>sustainable production instead of getting away with as much plunder as possible;</li> <li>\u201cequitable distribution of value\u201d vs exploitation for profit;</li> <li>respecting nature and our environment.</li> </ul> <p>These next economy experiments might call themselves a solidarity economy, cooperative, collaborative economy, small business ecosystem, commons based peer production, and many other names.</p>"},{"location":"introduction/introduction/#what-makes-valueflows-actually-different","title":"What makes Valueflows actually different?","text":"<p>The Valueflows model is designed to support:</p> <ul> <li>coordination of economic activity both inside and between organizations, an enterprise is not assumed;</li> <li>reciprocity with or without money, money is not assumed;</li> <li>ecological agents as part of the network; externalities as resources that need to be managed.</li> </ul>"},{"location":"introduction/introduction/#example-uses-for-valueflows","title":"Example uses for Valueflows","text":"<p>Here's a (big but not all-inclusive) list of possible applications that can be built using the Valueflows model.  It's a big list for a relatively simple model.  This is because the model, thanks to the many shoulders it stands upon, starting with REA, can be used for almost any economic application.</p> <p>Production and creation:</p> <ul> <li>manufacturing and assembly,</li> <li>distributed manufacturing,</li> <li>supply chains and economic networks,</li> <li>fablabs and open hardware design,</li> <li>inventory,</li> <li>services,</li> <li>organizational and administrative projects,</li> <li>simple todo's,</li> <li>CSA and Solawi,</li> <li>transportation,</li> <li>track and trace of resources.</li> </ul> <p>Exchange:</p> <ul> <li>marketplace and e-commerce,</li> <li>point-of-sale retail,</li> <li>offers and needs publication and matching,</li> <li>mutual credit and timebanks,</li> <li>supply network purchasing,</li> <li>alternative currencies,</li> <li>barter and gift economies,</li> <li>buyng clubs and consumer cooperatives,</li> <li>reward distribution based on contributions,</li> <li>direct distribution of resources.</li> </ul> <p>Financing:</p> <ul> <li>savings pools,</li> <li>mutual credit financing.</li> </ul> <p>Analysis and planning:</p> <ul> <li>operational planning,</li> <li>supply chain and network planning,</li> <li>community/regional planning,</li> <li>gaps and opportunities analysis at any level,</li> <li>standard accounting,</li> <li>climate accounting.</li> </ul>"},{"location":"introduction/introduction/#economic-ecosystems","title":"Economic ecosystems","text":"<p>We think these kinds of applications can also be building blocks to create whole economic ecosystems. Valueflows-based protocols could facilite that, as resources flow from one application to another.</p> <p></p>"},{"location":"introduction/principles/","title":"Principles","text":""},{"location":"introduction/principles/#the-4-opens","title":"The \"4 opens\"","text":"<p>These principles are borrowed from the 4opens, which we embrace for the Valueflows ecosystem, with a bit of clarification for Valueflows purposes.  (Of course anyone can create anything using this documentation, there are no legal restrictions, so these are the VF team's aspiration and declaration.)</p> <ul> <li> <p>Open source \u2013 as in \u201cfree software\u201d https://en.wikipedia.org/wiki/Free_software this keeps development healthy by increasing interconnectedness and bringing in serendipity. The Open licences are the \u201clock\u201d that keep the first two in place, what we have isn\u2019t perfect, but they do expand the area of \u201ctrust\u201d that a project needs to work, creative commons is a start here.</p> </li> <li> <p>Open \u201cindustrial\u201d standards \u2013 this is a little understood but core open, it\u2019s what the open internet and WWW are built from. Here is an outline https://en.wikipedia.org/wiki/Open_standard.</p> </li> <li> <p>Open process \u2013 this is the most \u201cnebulous\u201d part, examples of the work flow would be wikis and activity streams. Projects are built on linking trust networks so open process is the \u201cglue\u201d that binds the links together, https://en.wikipedia.org/wiki/Process.</p> </li> <li> <p>Open data \u2013 is the basic part of a project https://en.wikipedia.org/wiki/Open_data without this open they cannot work. This does not mean that personal data should be open.  The goal here is to not let public goods be privatized or enclosed.</p> </li> </ul>"},{"location":"introduction/principles/#principles-for-the-model","title":"Principles for the model","text":"<p>These principles are about the model behind the vocabulary.</p> <ol> <li>The model must enable collaboration between different people in different organizations using different software on different platforms using different human and programming languages.</li> <li>The model must be able to form global networks which can track the flows of resources (values) forwards and backwards. Or maybe it would be better to say \"in any direction\", but forwards means in the direction of value creation, and backwards means in the direction of return or compensation.</li> <li>Corollary: the model must be able to support various fair methods of distribution of resources.  The ability to find contributions to the network or the economy regardless of where and when in the network configuration those contributions occurred is key.</li> <li>The model must also be able to support coordinating work between different people in different organizations. People who are not concerned with rewards may still want to coordinate work.</li> <li>The model must be able to support circular economies, value flows where resources come full cycle to be fed into the same set or other processes.  Recycling, re-use, and other ways to encourage resources not becoming waste, must be supported.  Flows currently considered \"externalities\" should be able to be internalized in the model.</li> <li>The model must be fractal. It must support global views of networks in aggregate as well as drilling down to lower and lower levels of detail. Those lower levels of detail, for example inside one organization, may require permissions.</li> <li>The model must also work on the Knowledge, Plan and Observation levels, where the objects on each level are linked appropriately to the other levels.</li> <li>The model must support non-business-as-usual organizational forms and economic relationships in addition to traditional business organizations and relationships. These organizational forms can be as varied as the people and groups who create them want. VF in particular embraces this experimentation towards next-economy / solidarity-economy / commons-based-economy / P2P-economy / etc. in this transitional time.</li> <li>The model must support systems where all the people involved can get shares of the outcome to allocate as they wish. The shared outcome could be resources produced by the contributors, like food, or it could be income (reciprocal resources exchanged for resources produced). A group can choose to introduce various monetary currencies into their flows but can also do all the coordination and accounting without introducing such artifacts.</li> </ol>"},{"location":"introduction/status/","title":"Status of the vocabulary","text":"<p>This documentation is for release 0.14. Change log can be found here.</p> <p>This vocabulary is based on decades of work in academia and several implementations in the field.  The mixed stability of the model reflects this history.  The core model is fairly stable.  However, there are many edge cases and possibly not-so-edge cases where the model will need to be adjusted for the reality in the field based on further experience. Also, this model represents something new, something that we want to be able to support the next economy, with all the unknowns that will bring.</p> <p>So we see continuous improvements happening as the vocabulary is adopted by more people, through ongoing collaboration between the VF team and the adopters.</p> <p>The core model adapted from academic work on REA includes:</p> <ul> <li>Resources, Events, Agents (REA)</li> <li>Commitments</li> <li>the classifications/specifications in the knowledge layer</li> </ul> <p>Other consolidated parts of the vocabulary include:</p> <ul> <li>Agent model</li> <li>Core Input-Process-Output model</li> <li>Intents and Proposals</li> <li>Core Recipe model</li> </ul> <p>Please refer to the status for each element in the source turtle file for details on relative stability of various elements of the vocabularity, based on implementations by user groups.</p>"},{"location":"specification/external-terms/","title":"Use of Other Vocabularies","text":""},{"location":"specification/external-terms/#units-of-measure","title":"Units of Measure","text":"<p>Using agreed upon standard units will facilitate network interoperability into the future.  Valueflows uses the units of measure from the OM2 vocabulary.  Here is the complete rdf reference for OM2, which undergoes occasional update by the maintainers.  Here is the same reference with a user interface.</p> <p>The OM2 vocabulary contains thousands of units of measure.  It includes all the commonly used units of measure for business use, as well as scientific units, both common and obscure.</p>"},{"location":"specification/external-terms/#quantities-and-units","title":"Quantities and units","text":"<p>OM2 also has a quantity called Measure, including both the numeric amount and the unit of measure.</p> <p>http://www.ontology-of-units-of-measure.org/resource/om-2/</p> <ul> <li><code>om:Measure</code><ul> <li><code>om:hasUnit</code><ul> <li><code>om:Unit</code></li> </ul> </li> <li><code>om:hasNumericalValue</code></li> </ul> </li> </ul> <p>Valueflows has created this same structure within our namespace, and added some additional properties for flexible labeling for business users.  VF's Unit also has a OM unit identifier, referencing back to OM for cross-network unique identification of the units.</p>"},{"location":"specification/external-terms/#application-units-of-measure","title":"Application units of measure","text":"<p>We expect that user applications will choose a much smaller subset of these standard units, and probably maintain them separately.</p> <p>To facilitate this, a csv file of units has been extracted from OM2 to make it easier for user groups to choose their set of standard units.  Since OM2 is still in active development, this file will gradually become out of date, but we expect added units to be newer scientific units not usually used in economic applications.</p> <p>This file includes only the English version for now, although some additional languages can be found in OM2.  The currencies have been removed, since we recommend these be set up as Resource Specifications instead, semantically, and specifically given the proliferation of alternate currencies.  We have added classifications (partially complete) to facilitate search for needed units. The columns in this file are, left to right:</p> <ul> <li>OM2 owl Class.  When a Unit belonged to multiple classes, those were consolidated to one row, under \"Unit\".</li> <li>Unique identifier in OM2.  These can be prefixed with \"http://www.ontology-of-units-of-measure.org/resource/om-2/\" for direct access; but also used as-is internally to an application as a readable unique identity.</li> <li>Label from OM2 for the unit.</li> <li>Symbol from OM2 for the unit.</li> <li>Description from OM2.</li> <li>Classification(s), added by us (not from OM), to facilitate search in the csv file, or in an application (if one is created) for groups to choose their units.  This column is incomplete, possibly not the best granularity, and in some places possibly wrong.  It is experimental, updates are welcome!</li> </ul>"},{"location":"specification/external-terms/#overriding-the-om-label-or-symbol","title":"Overriding the OM label or symbol","text":"<p>We have added 2 properties in VF as optional additions to the OM2 unit, <code>overrideLabel</code> and <code>overrideSymbol</code>.  These are meant for applications to assign for themselves, when the normal display usage for their set of users is different than the OM2.  For example, an application might want to use <code>pound</code> instead of <code>pound (avoirdupois)</code>, or <code>gallon</code> instead of <code>gallon (US)</code> or <code>gallon (imperial)</code>.</p> <p>Perhaps the most frequent use of the override is the unit <code>one</code>.  This indicates a generic one dimensional unit from the scientific perspective, which in an economic application might be called <code>each</code>, <code>piece</code>, <code>count</code>, <code>number</code> or similar, or just left off of a user interface or report.  Some applications might even want to use more than one of these local labels. But for interoperability, any of these overrides should reference back to OM2:one.</p> <p>See this directory about units for other potentially useful artifacts.</p>"},{"location":"specification/external-terms/#quantities-and-durations","title":"Quantities and Durations","text":"<p>As noted above, we are using <code>vf:Measure</code>, subclass of <code>om:Measure</code>, for the quantity properties in VF.</p> <p>We decided to also use <code>vf:Measure</code> for durations, since OM2 has the time-based units needed for durations, as well as a Duration subclass of Unit.  The thinking is that simplicity and consistent naming are more important than the ability to map directly to the owl:time vocabulary for durations.</p>"},{"location":"specification/external-terms/#times","title":"Times","text":"<p>See also Flows Concepts: Quantities and Times.</p> <p>VF times are inspired by the owl:time ontology, but we have much more limited needs.  We decided to pull them into the VF namespace, rather than directly referencing owl:time.  Specifically we decided not to map them as is done for the PROV-O ontology. But owl:time does support many time constructs and comparisons that may be useful for people, such as below.</p> <p></p> <p>In terms of durations, although owl:time includes the duration concept, we are using OM, as noted above.</p>"},{"location":"specification/external-terms/#locations","title":"Locations","text":"<p>See also Location Concepts.</p> <p>Currently there is not a unified standard location vocabulary, due to the varied historical development of these standards.</p> <p>Our location data is a compromise between basic needs (latitude, longitude, and altitude), subclassed from the Basic Geo Vocabulary (WGS84), and more complex needs, for which we include a data reference to the extensive Geography information of the GEOSPARQL Specification.</p> <p>For more information on the current state of specification of spatial data, one reference is the Spatial Data on the Web Best Practices.</p>"},{"location":"specification/external-terms/#elements-not-included-in-vf","title":"Elements not included in VF","text":"<p>Valueflows is a generic vocabulary, and does not contain many domain-specific properties beyond those needed for coordinating economic value flows.  So it will be normal to use additional elements, hopefully from another standard.</p> <p>For example, there are no food or bicycle specific elements.  Much of this can be handled by the user-definable ResourceSpecification and ProcessSpecificaion. Applications might also want to consider using a faceted classification structure for this purpose.</p> <p>There are also only minimal properties for classes that are on the \"edge\" of the vocabulary, and which have other more complete sets of properties elsewhere.  For example, <code>Agent</code> is very sparse, and some applications might want more contact information, etc.  <code>EconomicResource</code> has many identifiers that are industry specific (like GTIN) which applications might want to include.  We are using <code>rdfs:seeAlso</code> to provide helpful sources for those kinds of elements.  In addition, anything that is a <code>rdfs:subClassOf</code> a class from another vocabulary can inherit its properties.</p> <p>We also welcome proposed additions!  See the Home page for how to request additions and changes.</p>"},{"location":"specification/inverses/","title":"Query and Filter Naming","text":""},{"location":"specification/inverses/#introduction","title":"Introduction","text":"<p>UNDER CONSTRUCTION</p> <p>Some key inverses are specified in the VF core, for flexibility of different technical implementations.  Many are not.  This section is to provide guidance on naming for those that are not explicitly specified, to facilitate standard api naming.</p> <p>This document is not meant to imply that all of these named queries and filters should be implemented in any particular application api!  Most implementations will want to use only a fraction of these.</p> <p>Note: Filters can be applicable to any query that can return more than one of the class.  For example all processes, processes in scope of an agent, processes in a plan, could each use the process filters.</p> <p>Status: Not all of these queries and filters are tested, and there will certainly be other useful queries and filters. If anyone has recommended changes or additions, please start an issue or merge request, or just let us know in the Welcome chat (links on the home page).</p>"},{"location":"specification/inverses/#observation-layer","title":"Observation layer","text":""},{"location":"specification/inverses/#agent-also-subclasses-person-organization-ecologicalagent","title":"Agent (also subclasses Person, Organization, EcologicalAgent)","text":"<p>main queries:</p> <ul> <li>agent</li> <li>agents</li> <li>myAgent</li> <li>person</li> <li>people</li> <li>organization</li> <li>organizations</li> </ul> <p>filters: classifiedAs (Organizations only), withinLocation (some geographic boundary, city, region, etc.)</p> <p>inverse queries:</p> <ul> <li>processes (Process.inScopeOf)</li> <li>inventoriedEconomicResources (EconomicResource.primaryAccountable)</li> <li>commitmentsAsProvider (Commitment.provider)</li> <li>commitmentsAsReceiver (Commitment.receiver)</li> <li>commitmentsInScope (Commitment.inScopeOf)</li> <li>economicEventsAsProvider (EconomicEvent.provider)</li> <li>economicEventsAsReceiver (EconomicEvent.receiver)</li> <li>economicEventsInScope (EconomicEvent.inScopeOf)</li> <li>intentsAsProvider (Intent.provider)</li> <li>intentsAsReceiver (Intent.receiver)</li> <li>intentsInScope (Intent.inScopeOf)</li> <li>claimsAsProvider (Claim.provider)</li> <li>claimsAsReceiver (Claim.receiver)</li> <li>claimsInScope (Claim.inScopeOf)</li> <li>proposalsInScope (Proposal.inScopeOf)</li> <li>scenariosInScope (Scenario.inScopeOf)</li> <li>relationshipsAsSubject (Relationship.subject)</li> <li>relationshipsAsObject (Relationship.object)</li> </ul> <p>other queries:</p> <ul> <li>plans (if there is any Process.inScopeOf in the Plan)</li> <li>economicEvents (EconomicEvent.provider or .receiver or .inScopeOf)</li> <li>commitments (Commitment.provider or .receiver or .inScopeOf)</li> <li>intents (Intent.provider or .receiver or .inScopeOf)</li> <li>claims (Claim.provider or .receiver or .inScopeOf)</li> <li>proposals (Proposal.inScopeOf, or a related Intent.provider or Intent.receiver)</li> <li>proposalsTo (Proposals.proposed where ProposedTo.proposedTo is the Agent)</li> <li>relationships (Relationship.object or .subject or .inScopeOf)</li> <li>roles (AgentRelationshipRoles that are AgentRelationship.relationship where the .subject or .object or .inScopeOf is the Agent)</li> </ul>"},{"location":"specification/inverses/#agentrelationship","title":"AgentRelationship","text":"<p>main queries:</p> <ul> <li>agentRelationship</li> <li>agentRelationships</li> </ul> <p>filters: subject, object, role, inScopeOf</p>"},{"location":"specification/inverses/#process","title":"Process","text":"<p>main queries:</p> <ul> <li>process</li> <li>processes</li> </ul> <p>filters: searchString, finished, classifiedAs, inScopeOf, startDate, endDate (include any process that overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end)</p> <p>inverse queries:</p> <p>other queries:</p> <ul> <li>economicEvents (EconomicEvent.inputOf or .outputOf)</li> <li>commitments (Commitment.inputOf or .outputOf)</li> <li>intents (Intent.inputOf or .outputOf)</li> <li>unplannedEconomicEvents (all EconomicEvent.inputOf or .outputOf that doesn't fulfill a Commitment)</li> <li>unplannedInputs (all EconomicEvent.inputOf that doesn't fulfill a Commitment)</li> <li>unplannedOutputs (all EconomicEvent.outputOf that doesn't fulfill a Commitment)</li> <li>involvedAgents (all .provider or .receivers or .inScopeOf on Commitments or EconomicEvents or Intents, and self.inScopeOf)</li> <li>workingAgents (all EconomicEvent.provider on an input EconomicEvent with action equal to work)</li> <li>nextProcesses (Processes where .inputOf references the same .resourceInventoriedAs as self.outputOf references)</li> <li>previousProcesses (Processes where .outputOf references the same .resourceInventoriedAs as self.inputOf references)</li> <li>previous (EconomicEvent.inputOf, same as observedInputs)</li> <li>next (EconomicEvent.outputOf, same as observedOutputs)</li> </ul>"},{"location":"specification/inverses/#economicevent","title":"EconomicEvent","text":"<p>main queries:</p> <ul> <li>economicEvent</li> <li>economicEvents</li> </ul> <p>filters: searchString, action, provider, receiver, resourceClassifiedAs, startDate, endDate (include any EconomicEvent that overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end) </p> <p>inverse queries:</p> <ul> <li>appreciationOf (Appreciation.appreciationWith)</li> <li>appreciationWith (Appreciation.appreciationOf)</li> </ul> <p>other queries:</p> <ul> <li>reciprocalEvents (EconomicEvents.realizationOf the same Agreement with opposite provider, receiver)</li> <li>previous (Process, EconomicEvent, EconomicResource, see Track and Trace for logic)</li> <li>next (Process, EconomicEvent, EconomicResource, see Track and Trace for logic)</li> <li>trace (ordered incoming value flows, see Track and Trace for logic)</li> <li>track (ordered outgoing value flows, see Track and Trace for logic)</li> </ul>"},{"location":"specification/inverses/#economicresource","title":"EconomicResource","text":"<p>main queries:</p> <ul> <li>economicResource</li> <li>economicResources</li> </ul> <p>filters: searchString, accountableAgent, currentLocation, withinLocation (some geographic boundary, city, region, etc.),  excludeZeroQuantities (boolean), classifiedAs, state, trackingIdentifier</p> <p>inverse queries:</p> <ul> <li>contains (EconomicResource.containedIn)</li> <li>intents (Intent.resourceInventoriedAs)</li> <li>commitments (Commitment.resourceInventoriedAs)</li> <li>economicEventsInOutFrom (All economic events with the economic resource in the EconomicEvent.resourceInventoriedAs, which includes all process related events, the provider resource in transfers/moves, and raise/lower)</li> <li>economicEventsTo (All economic events with the economic Resource in the EconomicEvent.toResourceInventoriedAs, which is the receiver resource in transfers and moves)</li> </ul> <p>other queries:</p> <ul> <li>economicEvents (either EconomicEvent.resourceInventoriedAs or .toResourceInventoriedAs)</li> <li>previous (EconomicEvent, see Track and Trace for logic)</li> <li>next (EconomicEvent, see Track and Trace for logic)</li> <li>trace (ordered incoming value flows, see Track and Trace for logic)</li> <li>track (ordered outgoing value flows, see Track and Trace for logic)</li> </ul>"},{"location":"specification/inverses/#plan-layer","title":"Plan layer","text":""},{"location":"specification/inverses/#proposal","title":"Proposal","text":"<p>main queries:</p> <ul> <li>proposal</li> <li>proposals</li> <li>offers (Proposals where .purpose is offer; or where .publishes has an Intent.provider)</li> <li>requests (Proposals where .purpose is request; or where .reciprocal has an Intent.receiver)</li> </ul> <p>filters: inScopeOf, withinLocation (the proposed intents are withinLocation), active (boolean, the current date is within the hasBeginning and hasEnd, inclusive), isOffer (boolean), isRequest (boolean)</p> <p>other queries:</p> <ul> <li>isOffer (boolean, true if .purpose is offer; or if a .publishes has a .provider)</li> <li>isRequest (boolean, true if .purpose is request; or if a .publishes has a .receiver)</li> </ul>"},{"location":"specification/inverses/#intent","title":"Intent","text":"<p>main queries:</p> <ul> <li>intent</li> <li>intents</li> </ul> <p>filters: searchString, action, provider, receiver, resourceClassifiedAs, resourceConformsTo, finished, startDate, endDate, inScopeOf, withinLocation (some geographic boundary, city, region, etc.)</p> <p>inverse queries:</p> <ul> <li>(probably some location based queries, TBD)</li> </ul>"},{"location":"specification/inverses/#agreement","title":"Agreement","text":"<p>main queries:</p> <ul> <li>agreement</li> <li>agreements</li> </ul> <p>inverse queries:</p> <ul> <li>unplannedEconomicEvents (EconomicEvent.realizationOf)</li> </ul> <p>other queries:</p> <ul> <li>involvedAgents (any .provider, .receiver, .inScopeOf on commitments or economicEvents)</li> <li>economicEvents (EconomicEvent.realizationOf, and any EconomicEvents that fulfill Commitments that are .clauseOf or .reciprocalClauseOf the Agreement)</li> </ul>"},{"location":"specification/inverses/#commitment","title":"Commitment","text":"<p>main queries:</p> <ul> <li>commitment</li> <li>commitments</li> </ul> <p>filters: searchString, action, provider, receiver, resourceClassifiedAs, resourceConformsTo, finished, startDate, endDate (include any Commitment that overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end), withinLocation (some geographic boundary, city, region, etc.)</p> <p>inverse queries:</p> <p>other queries:</p> <ul> <li>involvedAgents (Commitment.provider, .receiver, .inScopeOf if agent)</li> <li>(possibly some location based queries, TBD)</li> </ul>"},{"location":"specification/inverses/#claim","title":"Claim","text":"<p>main queries:</p> <ul> <li>claim</li> <li>claims</li> </ul> <p>filters: action, provider, receiver, resourceClassifiedAs, resourceConformsTo, finished, startDate, endDate (include any Claim where due overlaps the start date to end date range inclusive; missing start date is from the beginning, missing end date is to the end)</p> <p>inverse queries:</p>"},{"location":"specification/inverses/#plan","title":"Plan","text":"<p>main queries:</p> <ul> <li>plan</li> <li>plans</li> </ul> <p>filters: searchString, finished (true means all the processes that are part of the Plan are finished), TBD possibly some date related logic</p> <p>inverse queries:</p> <p>other queries:</p> <ul> <li>inScopeOf (all the .plannedWithin Process.inScopeOf)</li> <li>involvedAgents (all the .plannedWithin Process.involvedAgents)</li> <li>startDate (earliest .plannedWithin Process.hasBeginning)</li> <li>endDate (latest .plannedWithin Process.hasEnd)</li> <li>finished (all the .plannedWithin Process.finished are true)</li> </ul>"},{"location":"specification/inverses/#scenario","title":"Scenario","text":"<p>main queries:</p> <ul> <li>scenario</li> <li>scenarios</li> </ul> <p>filters: searchString, (TBD date logic)</p> <p>inverse queries:</p> <ul> <li>plans (Plan.refinementOf)</li> <li>refinements (Scenario.refinementOf))</li> <li>processes (Process.nestedIn)</li> <li>startDate TBD</li> <li>endDate TBD</li> </ul>"},{"location":"specification/inverses/#knowledge-layer","title":"Knowledge layer","text":""},{"location":"specification/inverses/#resourcespecification","title":"ResourceSpecification","text":"<p>main queries:</p> <ul> <li>resourceSpecification</li> <li>resourceSpecifications</li> </ul> <p>filters: searchString, resourceClassifiedAs</p> <p>inverse queries:</p> <ul> <li>conformingResources (EconomicResource.conformsTo)</li> <li>conformingEconomicEvents (EconomicEvent.resourceConformsTo)</li> <li>conformingCommitments (Commitment.resourceConformsTo)</li> <li>conformingIntents (Intent.resourceConformsTo)</li> <li>conformingClaims (Claim.resourceConformsTo)</li> <li>conformingRecipeFlows (RecipeFlow.resourceConformsTo)</li> </ul>"},{"location":"specification/inverses/#processspecification","title":"ProcessSpecification","text":"<p>main queries:</p> <ul> <li>processSpecification</li> <li>processSpecifications</li> </ul> <p>inverse queries:</p> <ul> <li>conformingProcesses (Process.basedOn)</li> <li>conformingRecipeProcesses (RecipeProcess.processConformsTo)</li> <li>commitmentsRequiringStage (Commitment.stage)</li> <li>resourcesCurrentlyAtStage (EconomicResource.stage)</li> <li>recipeFlowsRequiringStage (RecipeFlow.stage)</li> </ul>"},{"location":"specification/inverses/#recipeflow","title":"RecipeFlow","text":"<p>main queries:</p> <ul> <li>recipeFlow</li> <li>reciprFlows</li> </ul>"},{"location":"specification/inverses/#recipeexchange","title":"RecipeExchange","text":"<p>main queries:</p> <ul> <li>recipeExchange</li> <li>recipeExchanges</li> </ul>"},{"location":"specification/inverses/#recipeprocess","title":"RecipeProcess","text":"<p>main queries:</p> <ul> <li>recipeProcess</li> <li>recipeProcesses</li> </ul>"},{"location":"specification/inverses/#scenariodefinition","title":"ScenarioDefinition","text":"<p>main queries:</p> <ul> <li>scenarioDefinition</li> <li>scenarioDefinitions</li> </ul> <p>inverse queries:</p> <ul> <li>scenarios (Scenario.definedAs)</li> </ul>"},{"location":"specification/inverses/#action","title":"Action","text":"<p>main queries:</p> <ul> <li>action</li> <li>actions</li> </ul>"},{"location":"specification/inverses/#agentrelationshiprole","title":"AgentRelationshipRole","text":"<p>main queries:</p> <ul> <li>agentRelationshipRole</li> <li>agentRelationshipRoles</li> </ul> <p>inverse queries:</p> <ul> <li>agentRelationships (AgentRelationship.relationship)</li> </ul>"},{"location":"specification/json-schemas/","title":"Json Schemas","text":"<p>IN PROCESS: Not all classes are included yet, and some are missing peripheral properties.  But this is a fair representation of the core of the Valueflows data model.</p> <p>The following are json-schema representations of the Valueflows vocabulary.</p> <p>Action</p> <p>Agent</p> <p>AgentRelationship</p> <p>AgentRelationshipRole</p> <p>Agreement</p> <p>Claim</p> <p>Commitment</p> <p>EconomicEvent</p> <p>EconomicResource</p> <p>Intent</p> <p>Measure</p> <p>Plan</p> <p>Process</p> <p>ProcessSpecification</p> <p>Proposal</p> <p>ResourceSpecification</p> <p>SpatialThing</p> <p>Unit</p>"},{"location":"specification/model-text/","title":"Diagram Explanations","text":"<p>These textual explanations are a break-down of the UML diagram on the previous page.  The explanations are organized by class within subject area of the model.</p>"},{"location":"specification/model-text/#agent","title":"Agent","text":"<p>The Agent subject area defines roles in the Knowledge Layer and defines agents and their relationships in the Observation Layer.  More info at Agent concepts and Ecological Agents.</p> <p></p>"},{"location":"specification/model-text/#vfagent","title":"vf:Agent","text":"<p>The Valueflows view of Agent is fairly broad, including people, organizations (formal or informal), and ecological agents such as non-human beings and ecosystems.  But all of these have economic or governance agency of some sort.</p> <p>Agents are key to the overall ontology, particularly the flows in Planning and Observation: Intents, Commitments, EconomicEvents, Claims, where each can reference a provider and receiver Agent. Proposals can be published to Agent(s), and Agents can have many AgentRelationships with other Agents of any type.</p> <p>There are 3 subclasses of Agent: vf:Person, vf:Organization, and vf:EcologicalAgent.</p>"},{"location":"specification/model-text/#vfagentrelationship","title":"vf:AgentRelationship","text":"<p>The subject and object of an AgentRelationship are Agents.  Their role the subject plays in relation to the object is represented by the AgentRelationshipRole.  Agents can have multiple relationships and multiple kinds of relationships in the same network.</p>"},{"location":"specification/model-text/#vfagentrelationshiprole","title":"vf:AgentRelationshipRole","text":"<p>Agent relationship roles define the roles or types of agent relationships within a network, completely defined by the network itself.  Roles can be a good base to define user account permissions.</p>"},{"location":"specification/model-text/#resource","title":"Resource","text":"<p>Resources are defined in different ways, depending on their need and ability to be accounted for specifically.  Every flow of any kind will reference a resource, represented either by ResourceSpecification or EconomicResource. Resource classifications also assist in understanding or finding a resource. More info at Resource concepts, Classification concepts.</p> <p></p>"},{"location":"specification/model-text/#vfresourcespecification","title":"vf:ResourceSpecification","text":"<p>This specifies the kind of resource, to the most specific level needed.  It also fills the space for the resource when it is not yet, or never will be, an actual resource.  It can be used in and across networks to communicate the resource type needed.  EconomicResource, as well as the resource concept referenced in flows (EconomicEvent, Intent, Commitment, Claim, RecipeFlow), conform to a ResourceSpecification.</p>"},{"location":"specification/model-text/#vfeconomicresource","title":"vf:EconomicResource","text":"<p>An actual EconomicResource is created only by EconomicEvents.  It is also updated only by EconomicEvents for all its accounting related properties.  It becomes involved in a Process by being referenced by an EconomicEvent. It can appear on a Commitment or Intent if recording of a specific resource is needed.  It must have a ResourceSpecification.  It can have a stage and/or a state.  It knows its primary accountable Agent at any point in time.  It can be contained in another EconomicResource.</p>"},{"location":"specification/model-text/#putting-flows-into-motion","title":"Putting flows into motion...","text":"<p>More flow info at Flows concepts, Actions concepts, Processes concepts, Transfers concepts, Exchanges concepts.  First, some necessary pieces.</p> <p></p>"},{"location":"specification/model-text/#vfaction","title":"vf:Action","text":"<p>An Action specifies the type of flow and what the flow will do or has done. EconomicEvent, Commitment, Intent, Claim, RecipeFlow have an Action.  Actions are specified in Valueflows to cover the various ways flows affect resources.  Actions have properties defined that can drive the code logic to create or change EconomicResources when EconomicEvents are recorded, if desired.</p>"},{"location":"specification/model-text/#vfspatialthing","title":"vf:SpatialThing","text":"<p>Physical location, represented by SpatialThing, is mostly used as part of the information about agents, resources, and flows, although it can stand on its own if needed. It is primarily used for mapping. Although the relationships are not shown in the above diagram, the following are a SpatialThing: in EconomicResource, currentLocation; in Agent, primaryLocation; in EconomicEvent, Commitment, Intent, atLocation; and in EconomicEvent, toLocation.  When something has a non-physical location, it will use a different property. More info at Use of Other Vocabularies.</p>"},{"location":"specification/model-text/#vfmeasure","title":"vf:Measure","text":"<p>Measure does not ever live on its own, it is a way to unify how quantities are represented in Valueflows.  Although the relationships are not shown in the diagram, the following are Measures: in EconomicResource, accountingQuantity and onhandQuantity; in EconomicEvent, Commitment, Intent, RecipeFlow, resourceQuantity, effortQuantity.  Measure is a numerical value plus a Unit. More info at Use of Other Vocabularies.</p>"},{"location":"specification/model-text/#vfunit","title":"vf:Unit","text":"<p>It is very helpful for interoperaability that the same units of measure are used as networks communicate.  VF uses units defined by OM2, with some additional properties. More info at Use of Other Vocabularies.</p>"},{"location":"specification/model-text/#flows-in-motion-recipe","title":"Flows in motion: Recipe","text":"<p>This set of Knowledge Layer entities together make a recipe for creating a Resource conforming to a ResourceSpecification. It can be used to automate generating a plan in the Plan Layer, since they follow the same basic input-process-output graph pattern. The recipe model may be made more complete in the future, to support forking, versioning, and variants.  It currently supports multiple recipes for the same ResourceSpecification.  It also supports a Recipe for more than one RecipeProcess in a flow graph, and RecipeGroup for creating a plan that includes more than one output from different Recipes.  More info at Recipes concepts.</p> <p></p>"},{"location":"specification/model-text/#vfrecipeprocess","title":"vf:RecipeProcess","text":"<p>This defines a process node in the recipe graph.  A recipe can contain as many RecipeProcesses as it needs to produce the resource defined in the final ResourceSpecification. It can optionally conform to a ProcessSpecification.  It will have at least one input or output RecipeFlow.</p>"},{"location":"specification/model-text/#vfrecipeexchange","title":"vf:RecipeExchange","text":"<p>RecipeExchange corresponds to the Agreement in the Plan Layer.  It enables generation of plans that include agreements.  It can contain as many RecipeFlows as needed.</p>"},{"location":"specification/model-text/#vfrecipeflow","title":"vf:RecipeFlow","text":"<p>A RecipeFlow defines either an input or output to a RecipeProcess, and/or a clause of a RecipeExchange.  RecipeProcesses and RecipeExchanges can be combined into one recipe if desired.  A RecipeFlow through its Action defines how it will affect the (resource of the) ResourceSpecification.  If it defines a ProcessSpecification stage, then the flow expects a resource at that stage of production.</p>"},{"location":"specification/model-text/#vfrecipe","title":"vf:Recipe","text":"<p>A Recipe defines a way to easily tie all the RecipeProcesses needed to create an output.  If your Recipes have only one RecipeProcess, you may not need Recipe.</p>"},{"location":"specification/model-text/#vfrecipegroup","title":"vf:RecipeGroup","text":"<p>A RecipeGroup makes it easy to include more than one output from more than Recipe in one Plan.</p>"},{"location":"specification/model-text/#flows-in-motion-planning","title":"Flows in motion: Planning","text":"<p>Planning can be done with or without recipes.  And planning is not always done, sometimes the economic activity is only observed, depending on the use case.  This section is about operational planning, proesses and agreements that are intended to be executed in this lowest level of detail.  More info at Planning concepts and Generation of Plans.</p> <p></p>"},{"location":"specification/model-text/#vfplan","title":"vf:Plan","text":"<p>A Plan is a collection of one or more operational Processes and/or non-process Commitments (such as transfers) in the input-output-process graph pattern.  Plans can also reference one or more Commitments that create the independent demand that provides the reason for, and final output of, the Plan. If the use case calls for it, Plans can be nested in Scenarios to give higher level views that drill down to operational Plans, or reference a Scenario that was done as a pre-planning effort.</p>"},{"location":"specification/model-text/#vfprocess","title":"vf:Process","text":"<p>This section talks about operational processes, see below for higher level processes.  A Process can exist both in the Plan and Observation Layers, or either one.  If it is planned, then observed as an actual process, it remains the same Process.  So it can have input and/or output Commitments, and/or input and/or output EconomicEvents.  It can also have input or output Intents, if all or some of its flows are not committed, but are intended to happen.  Processes are usually (but not required to be) planned within a Plan.  A Process can be based on a ProcessSpecification or not.</p>"},{"location":"specification/model-text/#vfprocessspecification","title":"vf:ProcessSpecification","text":"<p>This specifies the kind of Process, to the most specific level needed.  Processes can be based on a ProcessSpecification.  It is also used as the stage of an EconomicResource that is created in stages, and is part of the logical identifier in those cases.  RecipeFlow and Commitment can have a ProcessSpecification stage specified to indicate that the resource they expect is at a particular stage, for example \"tested\" or \"edited\".</p>"},{"location":"specification/model-text/#vfcommitment","title":"vf:Commitment","text":"<p>A Commitment is a planned flow.  It can be input or output of an operational Process or planned directly in a Plan if it is a non-process flow. It also can be defined as an independent demand of a Plan, meaning it is creating what the plan is for.  It can be a clause of an Agreement, even if also an input or output of a Process.  It references something to define a current or future resource, often a ResourceSpecification, but sometimes an existing EconomicResource if that exists and is important, usually because it is one-of-a-kind. Like all flows, it references an Action that defines its effects on the resource.  It can satisfy one or more Intents or be fulfilled by one or more EconomicEvents.  A Commitment references both a provider Agent and a receiver Agent, although it can be planned temporarily without both provider and receiver if there is a committed Agent assumed or immediately expected as part of planning. If it defines a ProcessSpecification stage, then the flow expects a resource at that stage of production.</p>"},{"location":"specification/model-text/#vfagreement","title":"vf:Agreement","text":"<p>An Agreement is a purposefully abstract term, so that it can represent many existing (or not-yet-invented) kinds of agreements, e.g. exchanges or income distributions.  Its main purpose is to contain related Commitments in planning, usually reciprocal commitments.  It can also be used to contain reciprocal EconomicEvents in cases where there has been no planning, such as point of sale.</p>"},{"location":"specification/model-text/#vfagreementbundle","title":"vf:AgreementBundle","text":"<p>An AgreementBundle contains all the agreements bundled together for user purposes, for example multiple line items in an order.</p>"},{"location":"specification/model-text/#vfintent","title":"vf:Intent","text":"<p>Intent is defined here as part of operational planning, but can also be key as part of a Proposal or part of a Scenario, see below for those uses of Intent.  An Intent has a provider or a receiver Agent, but not both. As part of planning, Intents can be entered directly or generated from recipe, as inputs or outputs to a Process, or as non-process flows, when there is no known Agent assumed to be the missing provider or receiver.  An Intent can be satisfied by one or more Commitments, and/or one or more EconomicEvents if the Commitment does not exist.  And as a flow, an Intent will have an Action. In operational planning, it will also reference a ResourceSpecification or EconomicResource.</p>"},{"location":"specification/model-text/#flows-in-motion-offers-and-requests","title":"Flows in motion: Offers and Requests","text":"<p>Offers and requests are published primarily to look for a reciprocal match, although they can also be gift offers or requests. Common use cases are e-commerce, timebanks, mutual aid, price lists, publication of help needed for planned work in a network.  More info at Proposals concepts.</p> <p></p>"},{"location":"specification/model-text/#vfproposal","title":"vf:Proposal","text":"<p>A Proposal is a container of related Intents, and is an offer or a request, determined by the purpose.  This also corresponds to whether the provider or receiver Agent is undefined in the primary published Intent. Proposals often have more than one Intent, either because there is a reciprocal Intent, or because more than one resource is being offered or requested together.  An Intent can be re-used in more than one Proposal.  A Proposal can be proposed to one or more specific individual or group Agents, or just be part of a scope where Proposals are published.</p>"},{"location":"specification/model-text/#vfproposallist","title":"vf:ProposalList","text":"<p>A ProposalList contains all the proposals in a user-defined grouping, for example a price list.</p>"},{"location":"specification/model-text/#vfintent_1","title":"vf:Intent","text":"<p>Intents that are part of Proposals can be more loosely defined than if they are part of a Plan, although planned Intents can also be part of one or more Proposals.  For example, the note is often used to explain some of the defined fields when the offers/needs application mostly supports just text.  But all Intents should have an Action, and either a provider or receiver Agent.</p>"},{"location":"specification/model-text/#flows-in-motion-observation","title":"Flows in motion: Observation","text":"<p>The Observation subject area is where economic activity actually happens.  The basic input-process-output graph pattern is again the same as for recipes and planning. More info at Flows concepts.</p> <p></p>"},{"location":"specification/model-text/#vfprocess_1","title":"vf:Process","text":"<p>See the operational Process defined in the Planning subject area.  Operational Processes are carried down to the Observation layer as they are executed, or can be directly defined for Observation if planning is not done.</p>"},{"location":"specification/model-text/#vfeconomicevent","title":"vf:EconomicEvent","text":"<p>An EconomicEvent is the \"real\" flow, one that actually happened.  Its behavior is governed by its Action.  It actually affects an EconomicResource if one is defined as inventoried and referenced in the EconomicEvent, possibly including quantities, location, primary accountable, stage, state, containment.  EconomicEvent has a provider and receiver Agent, and can be input or output of a Process, and/or part of an Agreement.  An EconomicEvent knows its resource, either an EconomicResource or a ResourceSpecification.  In some actions, for example transfers and moves, there can also be another EconomicResource on the receiver side.  EconomicEvents can fulfill a Commitment or satisfy an Intent (where there is no Commitment) or settle a Claim.  An EconomicEvent can correct a previous EconomicEvent, or reverse it completely.</p>"},{"location":"specification/model-text/#vfclaim","title":"vf:Claim","text":"<p>A Claim on another Agent is triggered by an EconomicEvent, according to rules agreed to elsewhere, although most EconomicEvents do not trigger a Claim, and if there is already a Commitment, a Claim is not needed.  The Claim then can be settled by other EconomicEvent(s).  As a flow, a Claim has an Action, provider and receiver Agent, and reference to a ResourceSpecification.</p>"},{"location":"specification/model-text/#estimation-and-analysis","title":"Estimation and Analysis","text":"<p>More info at Estimates and Analysis concepts.</p> <p></p>"},{"location":"specification/model-text/#vfscenario","title":"vf:Scenario","text":"<p>A Scenario is used as a grouping mechanism for flows.  It is a loose concept, and can support many situations.  It can be defined by a ScenarioDefinition.  It can contain Plans, Processes, Intents, aggregated EconomicEvents.  A Scenario can also be nested in itself, to support continued zooming out to less detail.  The uses below are some but probably not all of the possibilities.</p>"},{"location":"specification/model-text/#vfplan_1","title":"vf:Plan","text":"<p>When Plans (which are operational) are nested in a Scenario, the Scenario can be used to zoom out for less detail in a UX.  When a Plan is a refinement of a Scenario, the Scenario was an earlier estimate or pre-plan.</p>"},{"location":"specification/model-text/#vfprocess-vfintent-vfeconomicevent","title":"vf:Process, vf:Intent, vf:EconomicEvent","text":"<p>When Processes are nested in a Scenario, they are generally higher level processes for aggregated as-is or to-be resource flows, for analysis or persuasion. Non-process Intents or EconomicEvents could also be part of these Process higher level flows.</p> <p>Processes and/or Intents could also be nested when they are part of a budget, forecast, or other higher level pre-plan. Or with-list Intents might be listed, say for large many-agent barter, or when saved for future Proposals.</p>"},{"location":"specification/spec-overview/","title":"Specification Overview","text":""},{"location":"specification/spec-overview/#goals-and-compromises","title":"Goals and compromises","text":"<p>We have tried to make this vocabulary as technology-agnostic as possible, as it represents a domain ontology for economic activity that we believe can be useful well into the future.  We know from the past that technology moves relatively quickly.  This includes technical protocols and formats for interoperability, and also bleeds into data modeling techniques, no matter how much we in the industry try to create universal modeling methods.  We have tried to balance full use case support with simplicity and clarity in various protocol, with some compromises made along the way.  We represent the vocabulary in various ways, and plan to add formats and protocols as new needs arise.</p>"},{"location":"specification/spec-overview/#source-definitions-and-protocols","title":"Source definitions and protocols","text":"<ul> <li> <p>The \"system of record\" (authoritative data source) is a linked open data turtle (ttl) file representation, located here in the repository.</p> </li> <li> <p>A more readable formatted version of the vocabulary, which is generated from the turtle file</p> </li> <li> <p>A UML diagram of the ontology, with some explanation of compromises made between rdf-based / json-based / relational / object oriented methods</p> </li> <li> <p>The linked open data namespace base URI is <code>https://w3id.org/valueflows/ont/vf#</code>, supporting TTL, JSON-LD and HTML, with preferred namespace prefix being \"vf\"</p> </li> <li> <p>A GraphQL api source, which stays more or less in sync with the vocabulary</p> </li> <li> <p>A json-ld context file (TODO)</p> </li> <li> <p>A json-schema representation</p> </li> <li> <p>A SHACL representation and a ShEx representation  (TODO)</p> </li> </ul>"},{"location":"specification/uml/","title":"UML Diagram","text":""},{"location":"specification/uml/#uml-diagram","title":"UML diagram","text":"<p>This diagram includes all elements defined in the system of record turtle file, for visual understanding of relationships.</p> <p>A textual explanation of everything on this diagram is on the Diagram Explanations page.</p> <p>To make the diagram bigger, you can right click and select 'View Image' or 'Open Image in New Tab' or a similar command in your browser.</p> <p></p>"},{"location":"specification/uml/#diagram-conventions","title":"Diagram conventions","text":"<p>Each arrow represents an additional property in the class at the beginning of the arrow.  If there is an * at the arrowhead end, then many instances are supported (like a collection in object oriented modeling).  If there is no *, then it should be assumed that one instance is supported (like a foreign key in a relational model).</p>"},{"location":"specification/uml/#relationships-not-shown","title":"Relationships not shown","text":"<p>In some cases, there were just too many lines!  The subordinate classes in the gray section at the bottom are not connected with arrows, so the viewer should assume that:</p> <ul> <li>every property ending in \"Quantity\" or \"Duration\" is a <code>vf:Measure</code> (does not live on its own) ;</li> <li>properties ending in \"Location\" that are physical locations are a <code>vf:SpatialThing</code> ;</li> <li><code>vf:inScopeOf</code> references a <code>vf:Agent</code>.</li> </ul>"},{"location":"specification/uml/#inverse-terms","title":"Inverse terms","text":"<p>To support cleaner representation in JSON / JSON-LD / RDF, as well as object oriented collections, in addition to the initial relational representation, we include some inverse terms, using <code>owl:inverseOf</code> in the source turtle file.  If there is a name on each end of the line, and an end on both sides of the arrow, there is an inverse defined.</p> <p>For example, here a Commitment <code>isInput</code> or <code>isOutput</code> of a Process; and a Process <code>hasInput</code>(zero or more) and/or <code>hasOutput</code>(zero or more).  Both directions are specified as part of the formal vocabulary, so can be used in the direction preferred by the application.</p> <p></p> <p>The first several examples on the Examples-Production page show both options as yaml.</p>"},{"location":"specification/uml/#many-to-many-relationships","title":"Many-to-many relationships","text":"<p>Instead of the typical relational resolution of a many-to-many relationship of including an \"associative\" class or table between them, we are specifying a direct one-to-many relationship, which more cleanly supports JSON / JSON-LD / RDF / OO structures.  To get to the other less-used \"many\" without the \"associative\" entity, a query would be needed.  The suggested query names are included in Query Naming.</p> <p>Below are the places in Valueflows where there is a logical many-to-many.</p>"},{"location":"specification/uml/#published-proposedto","title":"published, proposedTo","text":"<p>Although not included in the formal RDF-based spec, the suggested intermediate \"associative\" class for the two cases where there are no intermediate properties is shown below with dotted lines, for projects that want to implement a relational database under the covers, for example.</p> <p></p>"},{"location":"specification/uml/#fulfills-satisfies-settles","title":"fulfills, satisfies, settles","text":"<p>These cases have possible properties in the \"associative\" class. For example, between Commitment and EconomicEvent, a Commitment for 40 hours of work might be fulfilled by 5 EconomicEvents of 8 hours.  Or an EconomicEvent might pay for a statement or invoice that includes multiple Commitments for deliveries.  The model we have settled on supports the former, but not the latter.  The latter is one of a few cases that we believe will be a small minority of edge cases where the quantities in the \"associative\" entity might be appreciated.  For that case, an application could possibly divide the payment into multiple EconomicEvents and connect them with the trackingIdentifier.  Or it could extend the vocabulary to include the quantity fulfilled/satisfied/settled, and over time the VF community can re-consider the best trade-off for handling this situation.</p> <p>We believe that it is more important to simplify the model and the concepts for the majority of use cases, than to have complete support of all use cases.</p> <p></p>"},{"location":"specification/uml/#denormalization","title":"Denormalization","text":"<p>Note there are a few place where VF is more normalized than might be wanted for a database design behind the scenes. However, for data provided for interoperability, it is expected that apps will adhere to the normalized version.</p> <p>For example, we have used a separate structure for quantities, including the numeric amount and unit of measure.  These never stand on their own, i.e. one wouldn't expect to change \"4 liters\" in an event and have it change wherever else \"4 liters\" appears.  So these can be safely denormalized behind the scenes.</p> <p>This also could apply to simple uses of location data, although in that case, locations can stand on their own, so it depends on the application.  But for example, some apps might move <code>SpatialThing</code>'s <code>long</code> and <code>lat</code> into the record having the location.</p>"}]}